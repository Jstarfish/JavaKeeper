{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{624:function(t,a,v){\"use strict\";v.r(a);var _=v(6),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[v(\"h1\",{attrs:{id:\"数据结构开篇\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据结构开篇\"}},[t._v(\"#\")]),t._v(\" 数据结构开篇\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://images.pexels.com/photos/163064/play-stone-network-networked-interactive-163064.jpeg?cs=srgb&dl=pexels-163064.jpg&fm=jpg\",alt:\"\"}})]),t._v(\" \"),v(\"h2\",{attrs:{id:\"概念\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#概念\"}},[t._v(\"#\")]),t._v(\" 概念\")]),t._v(\" \"),v(\"p\",[v(\"strong\",[t._v(\"数据\")]),t._v(\"（data）是描述客观事物的数值、字符以及能输入机器且能被处理的各种符号集合。  数据的含义非常广泛，除了通常的数值数据、字符、字符串是数据以外，声音、图像等一切可以输入计算机并能被处理的都是数据。例如除了表示人的姓名、身高、体重等的字符、数字是数据，人的照片、指纹、三维模型、语音指令等也都是数据。\")]),t._v(\" \"),v(\"p\",[v(\"strong\",[t._v(\"数据元素\")]),t._v(\"（data element）是数据的基本单位，是数据集合的个体，在计算机程序中通常作为一个整体来进行处理。例如一条描述一位学生的完整信息的数据记录就是一个数据元素；空间中一点的三维坐标也可以是一个数据元素。数据元素通常由若干个数据项组成，例如描述学生相关信息的姓名、性别、学号等都是数据项；三维坐标中的每一维坐标值也是数据项。数据项具有原子性，是不可分割的最小单位。\")]),t._v(\" \"),v(\"p\",[v(\"strong\",[t._v(\"数据对象\")]),t._v(\"（data object）是性质相同的数据元素的集合，是数据的子集。例如一个学校的所有学生的集合就是数据对象，空间中所有点的集合也是数据对象。\")]),t._v(\" \"),v(\"p\",[v(\"strong\",[t._v(\"数据结构\")]),t._v(\"（data structure）是指相互之间存在一种或多种特定关系的数据元素的集合。是组织并存储数据以便能够有效使用的一种专门格式，它用来反映一个数据的内部构成，即一个数据由哪些成分数据构成，以什么方式构成，呈什么结构。\")]),t._v(\" \"),v(\"p\",[t._v(\"由于信息可以存在于逻辑思维领域，也可以存在于计算机世界，因此作为信息载体的数据同样存在于两个世界中。表示一组数据元素及其相互关系的数据结构同样也有两种不同的表现形式，一种是数据结构的逻辑层面，即数据的逻辑结构；一种是存在于计算机世界的物理层面，即数据的存储结构\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"逻辑结构和物理结构\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#逻辑结构和物理结构\"}},[t._v(\"#\")]),t._v(\" 逻辑结构和物理结构\")]),t._v(\" \"),v(\"p\",[t._v(\"按照视点的不同，我们把数据结构分为逻辑结构和物理结构。\")]),t._v(\" \"),v(\"h3\",{attrs:{id:\"逻辑结构\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#逻辑结构\"}},[t._v(\"#\")]),t._v(\" 逻辑结构\")]),t._v(\" \"),v(\"p\",[t._v(\"是指数据对象中数据元素之间的相互关系。其实这也是我们今后最需要关注的问题。分为以下四种：\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[t._v(\"集合结构：集合结构中的数据元素除了同属于一个集合外，他们之间没有其他关系\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gix1hh13a3j30dy0dw755.jpg\",alt:\"\"}})])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"线性结构：数据之间是一对一关系\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gix1hldwtcj30fy080mxc.jpg\",alt:\"\"}})])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"树形结构：数据之间存在一对多的层次关系\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gix1hp4ex1j30ik0c20td.jpg\",alt:\"\"}})])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"图形结构：数据之间多对多的关系\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gix1hsezzfj30eu0e6gmi.jpg\",alt:\"\"}})])])]),t._v(\" \"),v(\"h3\",{attrs:{id:\"物理结构\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#物理结构\"}},[t._v(\"#\")]),t._v(\" 物理结构\")]),t._v(\" \"),v(\"p\",[t._v(\"是指数据的逻辑结构在计算机中的存储形式。（有时也被叫存储结构）\")]),t._v(\" \"),v(\"p\",[t._v(\"数据是数据元素的集合，根据物理结构的定义，实际上就是如何把数据元素存储到计算机的存储器中。存储器主要是针对内存而言的，像硬盘、软盘、光盘等外部存储器的数据组织通常用文件结构来描述。\")]),t._v(\" \"),v(\"p\",[t._v(\"数据元素的存储结构形式有两种：顺序存储和链式存储。\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[t._v(\"顺序存储：把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系一致\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gix1hw6vx7j30j904qjrj.jpg\",alt:\"\"}})])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"链式存储：把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gix1i0igvfj30m00i9wfm.jpg\",alt:\"\"}})])])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"抽象数据结构类型\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#抽象数据结构类型\"}},[t._v(\"#\")]),t._v(\" 抽象数据结构类型\")]),t._v(\" \"),v(\"p\",[v(\"strong\",[t._v(\"数据类型\")]),t._v(\"（data type）是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如 Java 语言中就有许多不同的数据类型，包括数值型的数据类型、字符串、布尔型等数据类型。以 Java 中的 int 型为例，int 型的数据元素的集合是[-2147483648,2147483647]  间的整数，定义在其上的操作有加、减、乘、除四则运算，还有模运算等。\")]),t._v(\" \"),v(\"p\",[t._v(\"数据类型是按照值得不同进行划分的。在高级语言中，每个变量、常量和表达式都有各自的取值范围。类型就用来说明变量或表达式取值范围和所能进行的操作。\")]),t._v(\" \"),v(\"p\",[t._v(\"定义数据类型的作用一个是隐藏计算机硬件及其特性和差别，使硬件对于用户而言是透明的，即用户可以不关心数据类型是怎么实现的而可以使用它。定义数据类型的另一个作用是，用户能够使用数据类型定义的操作，方便的实现问题的求解。例如，用户可以使用 Java  定义在 int 型的加法操作完成两个整数的加法运算，而不用关心两个整数的加法在计算机中到底是如何实现的。这样不但加快了用户解决问题的速度，也使得用户可以在更高的层面上  考虑问题。\")]),t._v(\" \"),v(\"p\",[v(\"strong\",[t._v(\"抽象数据类型\")]),t._v(\"（abstract data type, 简称 ADT）由一种数据模型和在该数据模型上的一组操作组成。\")]),t._v(\" \"),v(\"p\",[t._v(\"抽象数据类型一方面使得使用它的人可以只关心它的逻辑特征，不需要了解它的实现方式。另一方面可以使我们更容易描述现实世界，使得我们可以在更高的层面上来考虑问题。 例如可以使用树来描述行政区划，使用图来描述通信网络。\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"数据结构分类\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据结构分类\"}},[t._v(\"#\")]),t._v(\" 数据结构分类\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[t._v(\"数组\")]),t._v(\" \"),v(\"li\",[t._v(\"栈\")]),t._v(\" \"),v(\"li\",[t._v(\"链表\")]),t._v(\" \"),v(\"li\",[t._v(\"队列\")]),t._v(\" \"),v(\"li\",[t._v(\"树\")]),t._v(\" \"),v(\"li\",[t._v(\"图\")]),t._v(\" \"),v(\"li\",[t._v(\"堆\")]),t._v(\" \"),v(\"li\",[t._v(\"散列表\")])]),t._v(\" \"),v(\"h1\",{attrs:{id:\"算法\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法\"}},[t._v(\"#\")]),t._v(\" 算法\")]),t._v(\" \"),v(\"p\",[t._v(\"算法设计是最具创造性的工作之一，人们解决任何问题的思想、方法和步骤实际上都可以认为是算法。人们解决问题的方法有好有坏，因此算法在性能上也就有高低之分。\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"概念-2\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#概念-2\"}},[t._v(\"#\")]),t._v(\" 概念\")]),t._v(\" \"),v(\"p\",[t._v(\"算法（algorithm）是指令的集合，是为解决特定问题而规定的一系列操作。它是明确定义的可计算过程，以一个数据集合作为输入，并产生一个数据集合作为输出。一个算法通常来说具有以下五个特性：\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[t._v(\"输入：一个算法应以待解决的问题的信息作为输入。\")]),t._v(\" \"),v(\"li\",[t._v(\"输出：输入对应指令集处理后得到的信息。\")]),t._v(\" \"),v(\"li\",[t._v(\"可行性：算法是可行的，即算法中的每一条指令都是可以实现的，均能在有限的时间内完成。\")]),t._v(\" \"),v(\"li\",[t._v(\"有穷性：算法执行的指令个数是有限的，每个指令又是在有限时间内完成的，因此 整个算法也是在有限时间内可以结束的。\")]),t._v(\" \"),v(\"li\",[t._v(\"确定性：算法对于特定的合法输入，其对应的输出是唯一的。即当算法从一个特定  输入开始，多次执行同一指令集结果总是相同的。  对于随机算法，该特性应当被放宽\")])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"算法设计要求\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法设计要求\"}},[t._v(\"#\")]),t._v(\" 算法设计要求\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[t._v(\"正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义、能正确反映问题的需求、能得到问题的正确答案\")]),t._v(\" \"),v(\"li\",[t._v(\"可读性：算法设计的另一目的是为了便于阅读、理解和交流\")]),t._v(\" \"),v(\"li\",[t._v(\"健壮性：当输入数据不合法时，算法也能做出相关处理，而不是产生异常或错误结果\")]),t._v(\" \"),v(\"li\",[t._v(\"时间效率高和存储量低\")])]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/91/a7/913e0ababe43a2d57267df5c5f0832a7.jpg\",alt:\"\"}})])])}),[],!1,null,null,null);a.default=s.exports}}]);","extractedComments":[]}