{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{748:function(t,v,_){\"use strict\";_.r(v);var e=_(6),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[_(\"blockquote\",[_(\"p\",[t._v(\"你好，我是 π大新，目前在一家名字等于周角的公司就职，精通 Java，熟悉计算机网络，，\")])]),t._v(\" \"),_(\"p\",[t._v(\"然后就~~~~\")]),t._v(\" \"),_(\"blockquote\",[_(\"p\",[t._v(\"在浏览器中输入一个 URL 至页面呈现，网络上都发生了什么事？\")]),t._v(\" \"),_(\"p\",[t._v(\"能说说 ISO 七层模型和 TCP/IP 四层模型吗？\")]),t._v(\" \"),_(\"p\",[t._v(\"TCP/IP 与 HTTP 有什么关系吗？\")]),t._v(\" \"),_(\"p\",[t._v(\"TCP协议与UDP协议的区别？\")]),t._v(\" \"),_(\"p\",[t._v(\"请详细介绍一下 TCP 的三次握手机制，为什么要三次握手？挥手却又是四次呢？\")]),t._v(\" \"),_(\"p\",[t._v(\"详细讲一下TCP的滑动窗口？知道流量控制和拥塞控制吗？\")]),t._v(\" \"),_(\"p\",[t._v(\"说一下对称加密与非对称加密？\")]),t._v(\" \"),_(\"p\",[t._v(\"状态码 206 是什么意思？\")]),t._v(\" \"),_(\"p\",[t._v(\"你们用的 https 是吧，https 工作原理是什么？\")]),t._v(\" \"),_(\"p\",[t._v(\"......\")])]),t._v(\" \"),_(\"blockquote\",[_(\"p\",[t._v(\"文章收录在 GitHub \"),_(\"a\",{attrs:{href:\"https://github.com/Jstarfish/JavaKeeper\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"JavaKeeper\"),_(\"OutboundLink\")],1),t._v(\" ，N线互联网开发必备技能兵器谱，有你想要的。\")])]),t._v(\" \"),_(\"h2\",{attrs:{id:\"一、计算机网络\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、计算机网络\"}},[t._v(\"#\")]),t._v(\" 一、计算机网络\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"通信协议\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#通信协议\"}},[t._v(\"#\")]),t._v(\" 通信协议\")]),t._v(\" \"),_(\"p\",[t._v(\"通信协议（communications protocol）是指双方实体完成通信或服务所必须遵循的规则和约定。通过通信信道和设备互连起来的多个不同地理位置的数据通信系统，要使其能协同工作实现信息交换和资源共享，它们之间必须具有共同的语言。交流什么、怎样交流及何时交流，都必须遵循某种互相都能接受的规则。这个规则就是通信协议。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"网络模型\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网络模型\"}},[t._v(\"#\")]),t._v(\" 网络模型\")]),t._v(\" \"),_(\"p\",[t._v(\"随着技术的发展，计算机的应用越来越广泛，计算机之间的通信开始了百花齐放的状态，每个具有独立计算服务体系的信息技术公司都会建立自己的计算机通信规则，而这种情况会导致异构计算机之间无法通信，极大的阻碍了网络通信的发展，至此为了解决这个问题，国际标准化组织（ISO）制定了 OSI 模型，该模型定义了不同计算机互联的标准，OSI 模型把网络通信的工作分为 7 层，分别是\"),_(\"strong\",[t._v(\"物理层、数据链路层、网络层、传输层、会话层、表示层和应用层\")]),t._v(\"。\")]),t._v(\" \"),_(\"p\",[t._v(\"这七层模型是设计层面的概念，每一层都有固定要完成的职责和功能，分层的好处在于清晰和功能独立性，但分层过多会使层次变的更加复杂，虽然不需要实现本层的功能，但是也需要构造本层的上下文，空耗系统资源，所以在落地实施网络通信模型的时候将这七层模型简化合并为四层模型分别是\"),_(\"strong\",[t._v(\"应用层、传输层、网络层、网络接口层\")]),t._v(\"（各层之间的模型、协议统称为：\"),_(\"strong\",[t._v(\"TCP/IP协议簇\")]),t._v(\"）。\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds66rxwnaj30ku0dr0tn.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"p\",[t._v(\"从上图可以看到，TCP/IP 模型合并了 OSI 模型的应用层、表示层和会话层，将 OSI 模型的数据链路层和物理层合并为网络访问层。\")]),t._v(\" \"),_(\"p\",[t._v(\"上图还列出了各层模型对应  TCP/IP 协议栈中的协议以及各层协议之间的关系。比如 DNS 协议是建立在 TCP 和 UDP 协议的基础上，FTP、HTTP、TELNET 协议建立在 TCP 协议的基础上，NTP、TFTP、SNMP建立在UDP协议的基础上，而 TCP、UDP 协议又建立在 IP 协议的基础上，以此类推….\")]),t._v(\" \"),_(\"table\",[_(\"thead\",[_(\"tr\",[_(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"OSI中的层\")]),t._v(\" \"),_(\"th\",[t._v(\"功能\")]),t._v(\" \"),_(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"TCP/IP协议族\")])])]),t._v(\" \"),_(\"tbody\",[_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[_(\"strong\",[t._v(\"应用层\")])]),t._v(\" \"),_(\"td\",[t._v(\"文件传输，电子邮件，文件服务，虚拟终端\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"TFTP，HTTP，SNMP，FTP，SMTP，DNS，RIP，Telnet\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[_(\"strong\",[t._v(\"表示层\")])]),t._v(\" \"),_(\"td\",[t._v(\"数据格式化，代码转换，数据加密\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"无\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[_(\"strong\",[t._v(\"会话层\")])]),t._v(\" \"),_(\"td\",[t._v(\"控制应用程序之间会话能力；如不同软件数据分发给不同软件\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"ASAP、TLS、SSH、ISO 8327 / CCITT X.225、RPC、NetBIOS、ASP、Winsock、BSD sockets\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[_(\"strong\",[t._v(\"传输层\")])]),t._v(\" \"),_(\"td\",[t._v(\"端到端传输数据的基本功能\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"TCP、UDP\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[_(\"strong\",[t._v(\"网络层\")])]),t._v(\" \"),_(\"td\",[t._v(\"定义IP编址，定义路由功能；如不同设备的数据转发\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"IP，ICMP，RIP，OSPF，BGP，IGMP\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[_(\"strong\",[t._v(\"数据链路层\")])]),t._v(\" \"),_(\"td\",[t._v(\"定义数据的基本格式，如何传输，如何标识\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"SLIP，CSLIP，PPP，ARP，RARP，MTU\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[_(\"strong\",[t._v(\"物理层\")])]),t._v(\" \"),_(\"td\",[t._v(\"以\"),_(\"strong\",[t._v(\"二进制\")]),t._v(\"数据形式在物理媒体上传输数据\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"ISO2110，IEEE802\")])])])]),t._v(\" \"),_(\"p\",[t._v(\"当我们某一个网站上不去的时候。通常会 ping 一下这个网站\")]),t._v(\" \"),_(\"p\",[_(\"code\",[t._v(\"ping\")]),t._v(\" 可以说是 ICMP 的最著名的应用，是 TCP/IP 协议的一部分。利用 \"),_(\"code\",[t._v(\"ping\")]),t._v(\" 命令可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障。\")]),t._v(\" \"),_(\"h2\",{attrs:{id:\"二、tcp-ip\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、tcp-ip\"}},[t._v(\"#\")]),t._v(\" 二、TCP/IP\")]),t._v(\" \"),_(\"p\",[t._v(\"数据在网络中传输最终一定是通过物理介质传输。物理介质就是把电脑连接起来的物理手段，常见的有光纤、双绞线，以及无线电波，它决定了电信号(0和1)的传输方式，物理介质的不同决定了电信号的传输带宽、速率、传输距离以及抗干扰性等等。网络数据传输就像快递邮寄，数据就是快件。只有路打通了，你的”快递”才能送到，因此物理介质是网络通信的基石。\")]),t._v(\" \"),_(\"p\",[t._v(\"寄快递首先得称重、确认体积(确认数据大小)，贵重物品还得层层包裹填充物确保安全，封装，然后填写发件地址(源主机地址)和收件地址(目标主机地址)，确认快递方式。对于偏远地区，快递不能直达，还需要中途转发。网络通信也是一样的道理，只不过把这些步骤都规定成了各种协议。\")]),t._v(\" \"),_(\"p\",[t._v(\"TCP/IP 的模型的每一层都需要下一层所提供的协议来完成自己的目的。我们来看下数据是怎么通过 TCP/IP 协议模型从一台主机发送到另一台主机的。\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds66lxjnqj30i00f6t9b.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"p\",[t._v(\"当用户通过HTTP协议发起一个请求，应用层、传输层、网络互联层和网络访问层的相关协议依次对该请求进行包装并携带对应的首部，最终在网络访问层生成以太网数据包，以太网数据包通过物理介质传输给对方主机，对方接收到数据包以后，然后再一层一层采用对应的协议进行拆包，最后把应用层数据交给应用程序处理。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"tcp-ip-与-http\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-ip-与-http\"}},[t._v(\"#\")]),t._v(\" TCP/IP 与 HTTP\")]),t._v(\" \"),_(\"p\",[t._v(\"TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP 协议不仅仅指的是 TCP  和 IP 两个协议，而是指一个由 FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以被称为TCP/IP协议。\")]),t._v(\" \"),_(\"p\",[_(\"strong\",[t._v(\"而HTTP是应用层协议，主要解决如何包装数据。\")])]),t._v(\" \"),_(\"p\",[t._v(\"“IP”代表网际协议，TCP 和 UDP 使用该协议从一个网络传送数据包到另一个网络。把\"),_(\"strong\",[t._v(\"IP想像成一种高速公路\")]),t._v(\"，它允许其它协议在上面行驶并找到到其它电脑的出口。\"),_(\"strong\",[t._v(\"TCP和UDP是高速公路上的“卡车”，它们携带的货物就是像HTTP\")]),t._v(\"，文件传输协议FTP这样的协议等。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"tcp-与-udp\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-与-udp\"}},[t._v(\"#\")]),t._v(\" TCP 与 UDP\")]),t._v(\" \"),_(\"p\",[t._v(\"都属于传输层协议。\")]),t._v(\" \"),_(\"p\",[t._v(\"TCP（Transmission Control Protocol，传输控制协议）是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。一个 TCP 连接必须有三次握手、四次挥手。\")]),t._v(\" \"),_(\"p\",[t._v(\"UDP（User Data Protocol，用户数据报协议）是一个非连接的协议，传输数据之前源端和终端不建立连接， 当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上\")]),t._v(\" \"),_(\"table\",[_(\"thead\",[_(\"tr\",[_(\"th\",{staticStyle:{\"text-align\":\"left\"}}),t._v(\" \"),_(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"TCP\")]),t._v(\" \"),_(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"UDP\")])])]),t._v(\" \"),_(\"tbody\",[_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"连接性\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"面向连接\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"面向非连接\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"传输可靠性\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"可靠\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"不可靠\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"报文\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"面向字节流\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"面向报文\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"效率\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"传输效率低\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"传输效率高\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"流量控制\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"滑动窗口\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"无\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"拥塞控制\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"慢开始、拥塞避免、快重传、快恢复\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"无\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"传输速度\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"慢\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"快\")])]),t._v(\" \"),_(\"tr\",[_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"应用场合\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"对效率要求低，对准确性要求高或要求有连接的场景\")]),t._v(\" \"),_(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"对效率要求高，对准确性要求低\")])])])]),t._v(\" \"),_(\"p\",[t._v(\"TCP 和 UDP 协议的一些应用\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds67b566dj30yw0r6gza.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"h3\",{attrs:{id:\"tcp连接的建立与终止\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp连接的建立与终止\"}},[t._v(\"#\")]),t._v(\" TCP连接的建立与终止\")]),t._v(\" \"),_(\"p\",[t._v(\"TCP虽然是面向字节流的，但TCP传送的数据单元却是报文段。一个TCP报文段分为首部和数据两部分，而TCP的全部功能体现在它首部中的各字段的作用。\")]),t._v(\" \"),_(\"p\",[t._v(\"TCP报文段首部的前20个字节是固定的（下图），后面有 4n 字节是根据需要而增加的选项（n是整数）。因此TCP首部的最小长度是20字节。\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdr6e2kp1lj30u60jsdhn.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"h4\",{attrs:{id:\"tcp报文首部\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp报文首部\"}},[t._v(\"#\")]),t._v(\" TCP报文首部\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[t._v(\"源端口和目的端口，各占2个字节，分别写入源端口和目的端口；\")]),t._v(\" \"),_(\"li\",[_(\"strong\",[t._v(\"序列号\")]),t._v(\"（Sequence number），占4字节。序号范围是【0，2^32 - 1】，共2^32个序号。序号增加到 2^32-1后，下一个序号就又回到 0。TCP是面向字节流的。在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的起始序号必须在连接建立时设置。首部中的序号字段值则是指的是本报文段所发送的数据的第一个字节的序号。例如，一报文段的序号是301，而接待的数据共有100字节。这就表明：本报文段的数据的第一个字节的序号是301，最后一个字节的序号是400。显然，下一个报文段（如果还有的话）的数据序号应当从401开始，即下一个报文段的序号字段值应为401。这个字段的序号也叫“报文段序号”;\")]),t._v(\" \"),_(\"li\",[_(\"strong\",[t._v(\"确认号\")]),t._v(\"（Acknowledge number），占4个字节，是期望收到对方下一个报文的第一个数据字节的序号。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，这表明B正确的收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701；\")]),t._v(\" \"),_(\"li\",[t._v(\"数据偏移，占4位，它指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。\")]),t._v(\" \"),_(\"li\",[t._v(\"保留，占6位，保留为今后使用，但目前应置为0；\")]),t._v(\" \"),_(\"li\",[t._v(\"紧急URG（URGent），当URG=1，表明紧急指针字段有效。告诉系统此报文段中有紧急数据；\")]),t._v(\" \"),_(\"li\",[t._v(\"确认ACK（ACKnowledgment），仅当ACK=1时，确认号字段才有效。\"),_(\"strong\",[t._v(\"TCP规定，在连接建立后所有报文的传输都必须把ACK置1\")]),t._v(\"；\")]),t._v(\" \"),_(\"li\",[t._v(\"推送PSH（PuSH） ，当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将PSH=1；\")]),t._v(\" \"),_(\"li\",[t._v(\"复位RST（ReSeT），当RST=1，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接；\")]),t._v(\" \"),_(\"li\",[t._v(\"同步SYN（SYNchronization），在连接建立时用来同步序号。\"),_(\"strong\",[t._v(\"当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1\")]),t._v(\"；\")]),t._v(\" \"),_(\"li\",[t._v(\"终止FIN（FINis），用来释放连接。\"),_(\"strong\",[t._v(\"当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放\")]),t._v(\"；\\n\"),_(\"ul\",[_(\"li\",[t._v(\"窗口，占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受；\")])])]),t._v(\" \"),_(\"li\",[t._v(\"检验和，占2字节，校验首部和数据这两部分；\")]),t._v(\" \"),_(\"li\",[t._v(\"紧急指针，占2字节，指出本报文段中的紧急数据的字节数；\")]),t._v(\" \"),_(\"li\",[t._v(\"选项，长度可变，定义一些其他的可选的参数\")])]),t._v(\" \"),_(\"p\",[t._v(\"TCP是一种面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接。所谓的“连接”，其实是客户端和服务器的内存里保存的一份关于对方的信息，如ip地址、端口号等。\")]),t._v(\" \"),_(\"h4\",{attrs:{id:\"tcp-三次握手\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-三次握手\"}},[t._v(\"#\")]),t._v(\" TCP  三次握手\")]),t._v(\" \"),_(\"p\",[t._v(\"所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。\")]),t._v(\" \"),_(\"p\",[t._v(\"三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds67rwlvsj30ra0e9n07.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"第一次握手\")]),t._v(\"(SYN=1, seq=x)\")]),t._v(\" \"),_(\"p\",[t._v(\"建立连接。客户端发送连接请求报文段，这是报文首部中的同步位SYN=1，同时选择一个初始序列号 seq=x ，此时，客户端进程进入了 SYN-SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"第二次握手\")]),t._v(\"(SYN=1, ACK=1, seq=y, ACKnum=x+1)\")]),t._v(\" \"),_(\"p\",[t._v(\"服务器收到客户端的SYN报文段，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号ACKnum=x+1，同时，自己还要发送SYN请求信息，SYN=1，为自己初始化一个序列号 seq=y，服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。这个报文也不能携带数据，但是同样要消耗一个序号\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"第三次握手\")]),t._v(\"(ACK=1，ACKnum=y+1)\")]),t._v(\" \"),_(\"p\",[t._v(\"客户端收到服务器的SYN+ACK报文段，再次发送确认包(ACK)，\"),_(\"strong\",[t._v(\"SYN 标志位为0\")]),t._v(\"，ACK 标志位为1，确认号 ACKnum = y+1，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED（已建立连接）状态，完成TCP三次握手。\")])])]),t._v(\" \"),_(\"blockquote\",[_(\"p\",[t._v(\"为什么需要三次握手呢？两次不行吗？\")])]),t._v(\" \"),_(\"p\",[t._v(\"为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。\")]),t._v(\" \"),_(\"p\",[t._v(\"具体例子：“已失效的连接请求报文段”的产生在这样一种情况下：client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”\")]),t._v(\" \"),_(\"h4\",{attrs:{id:\"tcp-四次挥手\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-四次挥手\"}},[t._v(\"#\")]),t._v(\" TCP  四次挥手\")]),t._v(\" \"),_(\"p\",[t._v(\"TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。\"),_(\"strong\",[t._v(\"客户端或服务器均可主动发起挥手动作\")]),t._v(\"。\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds6835mzjj30qw0g4dit.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"p\",[t._v(\"第一次挥手(FIN=1，seq=x)\")]),t._v(\" \"),_(\"p\",[t._v(\"主机1（可以使客户端，也可以是服务器端），设置seq=x，向主机2发送一个FIN报文段；此时，主机1进入\"),_(\"code\",[t._v(\"FIN_WAIT_1\")]),t._v(\"状态；这表示主机1没有数据要发送给主机2了；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"第二次挥手(ACK=1，ACKnum=x+1)\")]),t._v(\" \"),_(\"p\",[t._v(\"主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknum=x+1，主机1进入\"),_(\"code\",[t._v(\"FIN_WAIT_2\")]),t._v(\"状态；主机2告诉主机1，我“同意”你的关闭请求；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"第三次挥手(FIN=1，seq=y)\")]),t._v(\" \"),_(\"p\",[t._v(\"主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入\"),_(\"code\",[t._v(\"LAST_ACK\")]),t._v(\" 状态\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"第四次挥手(ACK=1，ACKnum=y+1)\")]),t._v(\" \"),_(\"p\",[t._v(\"主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入\"),_(\"code\",[t._v(\"TIME_WAIT\")]),t._v(\"状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，\"),_(\"strong\",[t._v(\"主机1等待2MSL后依然没有收到回复\")]),t._v(\"，则证明Server端已正常关闭，那好，主机1也可以关闭连接了，进入 \"),_(\"code\",[t._v(\"CLOSED\")]),t._v(\" 状态。\")])])]),t._v(\" \"),_(\"blockquote\",[_(\"p\",[_(\"strong\",[t._v(\"第一个消息：A发FIN\")])]),t._v(\" \"),_(\"p\",[t._v(\"第二个消息：B回复ACK\")]),t._v(\" \"),_(\"p\",[_(\"strong\",[t._v(\"第三个消息：B发出FIN\")])]),t._v(\" \"),_(\"p\",[t._v(\"此时此刻：B单方面认为自己与A达成了共识，即双方都同意关闭连接。\")]),t._v(\" \"),_(\"p\",[t._v(\"此时，B能释放这个TCP连接占用的内存资源吗？\"),_(\"strong\",[t._v(\"不能，B一定要确保A收到自己的ACK、FIN。\")])]),t._v(\" \"),_(\"p\",[t._v(\"所以B需要静静地等待A的第四个消息的到来：\")]),t._v(\" \"),_(\"p\",[_(\"strong\",[t._v(\"第四个消息：A发出ACK，用于确认收到B的FIN\")])])]),t._v(\" \"),_(\"p\",[t._v(\"主机 1 等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 \"),_(\"code\",[t._v(\"CLOSED\")]),t._v(\" 状态。\")]),t._v(\" \"),_(\"p\",[t._v(\"MSL 是Maximum Segment Lifetime英文的缩写，中文可以译为“报文最大生存时间”，他是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。\")]),t._v(\" \"),_(\"p\",[t._v(\"在 Linux 系统里 \"),_(\"code\",[t._v(\"2MSL\")]),t._v(\" 默认是 \"),_(\"code\",[t._v(\"60\")]),t._v(\" 秒，那么一个 \"),_(\"code\",[t._v(\"MSL\")]),t._v(\" 也就是 \"),_(\"code\",[t._v(\"30\")]),t._v(\" 秒。\"),_(\"strong\",[t._v(\"Linux 系统停留在 TIME_WAIT 的时间为固定的 60 秒\")]),t._v(\"。\")]),t._v(\" \"),_(\"blockquote\",[_(\"p\",[t._v(\"为什么连接的时候是三次握手，关闭的时候却是四次握手？\")])]),t._v(\" \"),_(\"p\",[t._v('因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，\"你发的FIN报文我收到了\"。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。')]),t._v(\" \"),_(\"p\",[t._v(\"由于 TCP 协议是全双工的，也就是说客户端和服务端都可以发起断开连接。两边各发起一次断开连接的申请，加上各自的两次确认，看起来就像执行了四次挥手。\")]),t._v(\" \"),_(\"blockquote\",[_(\"p\",[_(\"strong\",[t._v(\"为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？\")])])]),t._v(\" \"),_(\"p\",[t._v(\"虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。\")]),t._v(\" \"),_(\"p\",[t._v(\"还有一个原因，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"tcp协议如何来保证传输的可靠性\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp协议如何来保证传输的可靠性\"}},[t._v(\"#\")]),t._v(\" TCP协议如何来保证传输的可靠性\")]),t._v(\" \"),_(\"p\",[t._v(\"对于可靠性，TCP 通过以下方式进行保证：\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"p\",[t._v(\"数据包校验：目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时TCP发送数据端超时后会重发数据；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"对失序数据包重排序：既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。TCP将对失序数据进行重新排序，然后才交给应用层；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"丢弃重复数据：对于重复数据，能够丢弃重复数据；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"应答机制：当TCP收到发自TCP连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"超时重发：当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"流量控制：TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。TCP使用的流量控制协议是可变大小的滑动窗口协议。\")])])]),t._v(\" \"),_(\"blockquote\",[_(\"p\",[t._v(\"详细讲一下TCP的滑动窗口\")])]),t._v(\" \"),_(\"h3\",{attrs:{id:\"滑动窗口机制\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#滑动窗口机制\"}},[t._v(\"#\")]),t._v(\" 滑动窗口机制\")]),t._v(\" \"),_(\"p\",[t._v(\"如果发送方把数据发送得过快，接收方可能会来不及接收，这就会造成数据的丢失。\"),_(\"code\",[t._v(\"所谓流量控制就是让发送方的发送速率不要太快\")]),t._v(\"，要让接收方来得及接收。\")]),t._v(\" \"),_(\"p\",[t._v(\"利用\"),_(\"strong\",[t._v(\"滑动窗口机制\")]),t._v(\"可以很方便地在 TCP 连接上实现对发送方的流量控制。\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds6d75md5j30si0ermyk.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"p\",[t._v(\"从上面的图可以看到滑动窗口左边的是已发送并且被确认的分组，滑动窗口右边是还没有轮到的分组。滑动窗口里面也分为两块，一块是已经发送但是未被确认的分组，另一块是窗口内等待发送的分组。随着已发送的分组不断被确认，窗口内等待发送的分组也会不断被发送。整个窗口就会往右移动，让还没轮到的分组进入窗口内。\")]),t._v(\" \"),_(\"p\",[t._v(\"可以看到滑动窗口起到了一个限流的作用，也就是说当前滑动窗口的大小决定了当前 TCP 发送包的速率，而滑动窗口的大小取决于拥塞控制窗口和流量控制窗口的两者间的最小值。\")]),t._v(\" \"),_(\"h4\",{attrs:{id:\"流量控制\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#流量控制\"}},[t._v(\"#\")]),t._v(\" 流量控制\")]),t._v(\" \"),_(\"p\",[t._v(\"TCP 是全双工的，客户端和服务器均可作为发送方或接收方，我们现在假设一个发送方向接收方发送数据的场景来讲解流量控制。首先我们的接收方有一块接收缓存，当数据来到时会先把数据放到缓存中，上层应用等缓存中有数据时就会到缓存中取数据。假如发送方没有限制地不断地向接收方发送数据，接收方的应用程序又没有及时把接收缓存中的数据读走，就会出现缓存溢出，数据丢失的现象，为了解决这个问题，我们引入流量控制窗口。\")]),t._v(\" \"),_(\"p\",[t._v(\"假设应用程序最后读走的数据序号是 lastByteRead，接收缓存中接收到的最后一个数据序号是 lastByteRcv，接收缓存的大小为 RcvSize，那么必须要满足 \"),_(\"code\",[t._v(\"lastByteRcv - lastByteRead <= RcvSize\")]),t._v(\" 才能保证接收缓存不会溢出，所以我们定义流量窗口为接收缓存剩余的空间，也就是 \"),_(\"code\",[t._v(\"Rcv = RcvSize - (lastByteRcv - lastByteRead)\")]),t._v(\"。只要接收方在响应 ACK 的时候把这个窗口的值带给发送方，发送方就能知道接收方的接收缓存还有多大的空间，进而设置滑动窗口的大小。\")]),t._v(\" \"),_(\"h4\",{attrs:{id:\"拥塞控制\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#拥塞控制\"}},[t._v(\"#\")]),t._v(\" 拥塞控制\")]),t._v(\" \"),_(\"p\",[t._v(\"拥塞控制是指发送方先设置一个小的窗口值作为发送速率，当成功发包并接收到 ACK 时，便以指数速率增大发送窗口的大小，直到遇到丢包（超时/三个冗余ACK），才停止并调整窗口的大小。这么做能最大限度地利用带宽，又不至于让网络环境变得太过拥挤。\")]),t._v(\" \"),_(\"p\",[t._v(\"最终滑动窗口的值将设置为流量控制窗口和拥塞控制窗口中的较小值。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"tcp的拥塞处理\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp的拥塞处理\"}},[t._v(\"#\")]),t._v(\" TCP的拥塞处理\")]),t._v(\" \"),_(\"p\",[t._v(\"计算机网络中的带宽、交换结点中的缓存及处理机等都是网络的资源。在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就会变坏，这种情况就叫做拥塞。拥塞控制就是防止过多的数据注入网络中，这样可以使网络中的路由器或链路不致过载。注意，拥塞控制和流量控制不同，前者是一个全局性的过程，而后者指点对点通信量的控制。拥塞控制的方法主要有以下四种：\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"慢启动：不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小;\")]),t._v(\" \"),_(\"li\",[t._v(\"拥塞避免：拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加1，而不是加倍，这样拥塞窗口按线性规律缓慢增长。\")]),t._v(\" \"),_(\"li\",[t._v(\"快重传：快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。\")]),t._v(\" \"),_(\"li\",[t._v(\"快恢复：快重传配合使用的还有快恢复算法，当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh 门限减半，但是接下去并不执行慢开始算法：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将 cwnd 设置为ssthresh 的大小，然后执行拥塞避免算法。\")])]),t._v(\" \"),_(\"h3\",{attrs:{id:\"服务器出现了大量close-wait状态如何解决\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#服务器出现了大量close-wait状态如何解决\"}},[t._v(\"#\")]),t._v(\" 服务器出现了大量CLOSE_WAIT状态如何解决\")]),t._v(\" \"),_(\"p\",[t._v(\"大量 CLOSE_WAIT 表示程序出现了问题，对方的 socket 已经关闭连接，而我方忙于读或写没有及时关闭连接，需要检查代码，特别是释放资源的代码，或者是处理请求的线程配置。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"讲一讲syn超时-洪泛攻击-以及解决策略\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#讲一讲syn超时-洪泛攻击-以及解决策略\"}},[t._v(\"#\")]),t._v(\" 讲一讲SYN超时，洪泛攻击，以及解决策略\")]),t._v(\" \"),_(\"p\",[t._v(\"什么 SYN 是洪泛攻击？ 在 TCP 的三次握手机制的第一步中，客户端会向服务器发送 SYN 报文段。服务器接收到 SYN 报文段后会为该 TCP 分配缓存和变量，如果攻击分子大量地往服务器发送 SYN 报文段，服务器的连接资源终将被耗尽，导致内存溢出无法继续服务。\")]),t._v(\" \"),_(\"p\",[t._v(\"解决策略： 当服务器接受到 SYN 报文段时，不直接为该 TCP 分配资源，而只是打开一个半开的套接字。接着会使用 SYN 报文段的源 Id，目的 Id，端口号以及只有服务器自己知道的一个秘密函数生成一个 cookie，并把 cookie 作为序列号响应给客户端。\")]),t._v(\" \"),_(\"p\",[t._v(\"如果客户端是正常建立连接，将会返回一个确认字段为 cookie + 1 的报文段。接下来服务器会根据确认报文的源Id，目的 Id，端口号以及秘密函数计算出一个结果，如果结果的值 +1等于确认字段的值，则证明是刚刚请求连接的客户端，这时候才为该 TCP 分配资源\")]),t._v(\" \"),_(\"p\",[t._v(\"这样一来就不会为恶意攻击的 SYN 报文段分配资源空间，避免了攻击。\")]),t._v(\" \"),_(\"h2\",{attrs:{id:\"三、http\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、http\"}},[t._v(\"#\")]),t._v(\" 三、HTTP\")]),t._v(\" \"),_(\"blockquote\",[_(\"p\",[t._v(\"HTTP1.0、HTTP1.1、HTTP2.0 的区别\")]),t._v(\" \"),_(\"p\",[t._v(\"post 和 get 的区别\")])]),t._v(\" \"),_(\"p\",[t._v(\"HTTP 全称是 HyperText Transfer Protocal，即：超文本传输协议。是互联网上应用最为广泛的一种\"),_(\"strong\",[t._v(\"网络通信协议\")]),t._v(\"，它允许将超文本标记语言（HTML）文档从 Web 服务器传送到客户端的浏览器。目前我们使用的是\"),_(\"strong\",[t._v(\"HTTP/1.1 版本\")]),t._v(\"。所有的 WWW 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。1960 年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext），这成为了HTTP超文本传输协议标准架构的发展根基。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"uri-和-url\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#uri-和-url\"}},[t._v(\"#\")]),t._v(\" URI 和 URL\")]),t._v(\" \"),_(\"p\",[t._v(\"每个Web 服务器资源都有一个名字，这样客户端就可以说明他们感兴趣的资源是什么了，服务器资源名被称为统一资源标识符（Uniform Resource Identifier,URI）。URI 就像因特网上的邮政地址一样，在世界范围内唯一标识并定位信息资源。\")]),t._v(\" \"),_(\"p\",[t._v(\"统一资源定位符（URL）是资源标识符最常见的形式。 URL 描述了一台特定服务器上某资源的特定位置。\")]),t._v(\" \"),_(\"p\",[t._v(\"现在几乎所有的 URI 都是 URL。\")]),t._v(\" \"),_(\"p\",[t._v(\"URI 的第二种形式就是统一资源名（URN）。URN 是作为特定内容的唯一名称使用的，与目前的资源所在地无关。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"http消息的结构\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http消息的结构\"}},[t._v(\"#\")]),t._v(\" HTTP消息的结构\")]),t._v(\" \"),_(\"p\",[_(\"strong\",[t._v(\"事务和报文\")])]),t._v(\" \"),_(\"p\",[t._v(\"客户端是怎样通过 HTTP 与 Web 服务器及其资源进行事务处理的呢？一个 \"),_(\"strong\",[t._v(\"HTTP 事务\")]),t._v(\"由一条请求命令（从客户端发往服务器）和一个响应（从服务器发回客户端）结果组成。这种通信是通过名为\"),_(\"strong\",[t._v(\"HTTP报文\")]),t._v(\"（HTTP Message）的格式化数据块进行的。\")]),t._v(\" \"),_(\"h4\",{attrs:{id:\"http事务\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http事务\"}},[t._v(\"#\")]),t._v(\" HTTP事务：\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds68n7iduj30jx08caag.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"h4\",{attrs:{id:\"报文\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#报文\"}},[t._v(\"#\")]),t._v(\" 报文：\")]),t._v(\" \"),_(\"p\",[t._v(\"HTTP 报文是纯文本，不是二进制代码。从 Web 客户端发往 Web 服务器的 HTTP 报文称为请求报文（request message）。从服务器发往客户端的报文称为响应报文。\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdpnh0qepnj30p006eacq.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"p\",[t._v(\"HTTP 报文包括三部分：\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[t._v(\"起始行\")]),t._v(\" \"),_(\"li\",[t._v(\"首部字段\")]),t._v(\" \"),_(\"li\",[t._v(\"主体\")])]),t._v(\" \"),_(\"h4\",{attrs:{id:\"常见http-首部字段\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常见http-首部字段\"}},[t._v(\"#\")]),t._v(\" 常见HTTP 首部字段：\")]),t._v(\" \"),_(\"p\",[_(\"strong\",[t._v(\"a、通用首部字段\")]),t._v(\"（请求报文与响应报文都会使用的首部字段）\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[t._v(\"Date：创建报文时间\")]),t._v(\" \"),_(\"li\",[t._v(\"Connection：连接的管理\")]),t._v(\" \"),_(\"li\",[t._v(\"Cache-Control：缓存的控制\")]),t._v(\" \"),_(\"li\",[t._v(\"Transfer-Encoding：报文主体的传输编码方式\")])]),t._v(\" \"),_(\"p\",[_(\"strong\",[t._v(\"b、请求首部字段\")]),t._v(\"（请求报文会使用的首部字段）\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[t._v(\"Host：请求资源所在服务器\")]),t._v(\" \"),_(\"li\",[t._v(\"Accept：可处理的媒体类型\")]),t._v(\" \"),_(\"li\",[t._v(\"Accept-Charset：可接收的字符集\")]),t._v(\" \"),_(\"li\",[t._v(\"Accept-Encoding：可接受的内容编码\")]),t._v(\" \"),_(\"li\",[t._v(\"Accept-Language：可接受的自然语言\")])]),t._v(\" \"),_(\"p\",[t._v(\"**c、响应首部字段（**响应报文会使用的首部字段）\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[t._v(\"Accept-Ranges：可接受的字节范围\")]),t._v(\" \"),_(\"li\",[t._v(\"Location：令客户端重新定向到的URI\")]),t._v(\" \"),_(\"li\",[t._v(\"Server：HTTP服务器的安装信息\")])]),t._v(\" \"),_(\"p\",[_(\"strong\",[t._v(\"d、实体首部字段\")]),t._v(\"（请求报文与响应报文的的实体部分使用的首部字段）\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[t._v(\"Allow：资源可支持的HTTP方法\")]),t._v(\" \"),_(\"li\",[t._v(\"Content-Type：实体主类的类型\")]),t._v(\" \"),_(\"li\",[t._v(\"Content-Encoding：实体主体适用的编码方式\")]),t._v(\" \"),_(\"li\",[t._v(\"Content-Language：实体主体的自然语言\")]),t._v(\" \"),_(\"li\",[t._v(\"Content-Length：实体主体的的字节数\")]),t._v(\" \"),_(\"li\",[t._v(\"Content-Range：实体主体的位置范围，一般用于发出部分请求时使用\")])]),t._v(\" \"),_(\"h3\",{attrs:{id:\"方法\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方法\"}},[t._v(\"#\")]),t._v(\" 方法\")]),t._v(\" \"),_(\"p\",[t._v(\"Http 协议定义了很多与服务器交互的方法，最基本的有 4 种，分别是 \"),_(\"strong\",[t._v(\"GET,POST,PUT,DELETE\")]),t._v(\". 一个 URL 地址用于描述一个网络上的资源，而 HTTP 中的 GET, POST, PUT, DELETE 就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是 GET 和 POST 了。GET 一般用于获取/查询资源信息，而 POST 一般用于更新资源信息。\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[t._v(\"GET\")]),t._v(\" \"),_(\"li\",[t._v(\"HEAD\")]),t._v(\" \"),_(\"li\",[t._v(\"PUT\")]),t._v(\" \"),_(\"li\",[t._v(\"POST\")]),t._v(\" \"),_(\"li\",[t._v(\"TRACE\")]),t._v(\" \"),_(\"li\",[t._v(\"OPTIONS\")]),t._v(\" \"),_(\"li\",[t._v(\"DELETE\")])]),t._v(\" \"),_(\"h3\",{attrs:{id:\"get与post的区别\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#get与post的区别\"}},[t._v(\"#\")]),t._v(\" GET与POST的区别\")]),t._v(\" \"),_(\"p\",[t._v(\"GET与POST是我们常用的两种HTTP Method，二者之间的区别主要包括如下五个方面：\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"从功能上讲，GET一般用来从服务器上获取资源，POST一般用来更新服务器上的资源；\")]),t._v(\" \"),_(\"li\",[t._v(\"从REST服务角度上说，GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；\")]),t._v(\" \"),_(\"li\",[t._v(\"从请求参数形式上看，GET请求的数据会附在URL之后，即将请求数据放置在HTTP报文的请求头中，以 ? 分割URL和传输数据，参数之间以 & 相连。特别地，如果数据是英文字母/数字，原样发送；否则，会将其编码为 application/x-www-form-urlencoded MIME 字符串(如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII)；而POST请求会把提交的数据则放置在是HTTP请求报文的 请求体 中。\")]),t._v(\" \"),_(\"li\",[t._v(\"就安全性而言，POST的安全性要比GET的安全性高，因为GET请求提交的数据将明文出现在URL上，而且POST请求参数则被包装到请求体中，相对更安全。\")]),t._v(\" \"),_(\"li\",[t._v(\"从请求的大小看，GET请求的长度受限于浏览器或服务器对URL长度的限制，允许发送的数据量比较小，而POST请求则是没有大小限制的。\")])]),t._v(\" \"),_(\"p\",[t._v(\"HTTP请求结构： 请求方式 + 请求URI + 协议及其版本\")]),t._v(\" \"),_(\"p\",[t._v(\"HTTP响应结构： 状态码 + 原因短语 + 协议及其版本\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"状态码\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#状态码\"}},[t._v(\"#\")]),t._v(\" 状态码\")]),t._v(\" \"),_(\"p\",[t._v(\"每条HTTP响应报文返回时都会携带一个状态码。状态码是一个三位数字的代码，告知客户端请求是否成功，或者是都需要采取其他动作。\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"p\",[t._v(\"1xx：表明服务端接收了客户端请求，客户端继续发送请求；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"2xx：客户端发送的请求被服务端成功接收并成功进行了处理；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"3xx：服务端给客户端返回用于重定向的信息；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"4xx：客户端的请求有非法内容；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"5xx：服务端未能正常处理客户端的请求而出现意外错误。\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"200 OK\")]),t._v(\"：表示从客户端发送给服务器的请求被正常处理并返回；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"204 No Content\")]),t._v(\"：表示客户端发送给客户端的请求得到了成功处理，但在返回的响应报文中不含实体的主体部分（没有资源可以返回）\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"206 Patial Content\")]),t._v(\"：表示客户端进行了范围请求，并且服务器成功执行了这部分的GET请求，响应报文中包含由Content-Range指定范围的实体内容。\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"301 Moved Permanently\")]),t._v(\"：永久性重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"302 Found\")]),t._v(\"：临时性重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"303 See Other\")]),t._v(\"：表示请求的资源被分配了新的URL，应使用GET方法定向获取请求的资源\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"304 Not Modified：表示客户端发送附带条件（是指采用GET方法的请求报文中包含if-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部）的请求时，服务器端允许访问资源，但是请求为满足条件的情况下返回改状态码；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"400 Bad Request\")]),t._v(\":表示请求报文中存在语法错误；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"401 Unauthorized\")]),t._v(\"：未经许可，需要通过 HTTP 认证；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"403 Forbidden\")]),t._v(\"：服务器拒绝该次访问（访问权限出现问题）\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"404 Not Found\")]),t._v(\"：表示服务器上无法找到请求的资源，除此之外，也可以在服务器拒绝请求但不想给拒绝原因时使用；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"500 Inter Server Error\")]),t._v(\"：表示服务器在执行请求时发生了错误，也有可能是web应用存在的bug或某些临时的错误时；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"502（错误网关）：服务器作为网关或代理，从上游服务器收到无效响应。\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"503 Server Unavailable\")]),t._v(\"：表示服务器暂时处于超负载或正在进行停机维护，无法处理请求；\")])])]),t._v(\" \"),_(\"p\",[t._v(\"HTTP 是个应用层协议。HTTP 无需操心网络通信的具体细节，而是把这些细节都交给了通用可靠的因特网传输协议 TCP/IP。\")]),t._v(\" \"),_(\"p\",[t._v(\"在 HTTP 客户端向服务器发送报文之前，需要用网络协议（Internet Protocol，IP）地址和端口号在客户端和服务器之间建立一条 TCP/IP 协议。而 IP 地址就是通过 URL 提供的，像 \"),_(\"code\",[t._v(\"http://207.200.21.11:80/index.html\")]),t._v(\"，还有使用域名服务（Domain Name Services，DNS）的 \"),_(\"code\",[t._v(\"http://www.lazyegg.net\")]),t._v(\"。\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdpo1kf1lhj30rq0p8k4t.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"h3\",{attrs:{id:\"协议版本\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#协议版本\"}},[t._v(\"#\")]),t._v(\" 协议版本\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"HTTP/0.9\")])]),t._v(\" \"),_(\"p\",[t._v(\"HTTP协议的最初版本，功能简陋，仅支持 GET 方法，并且仅能请求访问 HTML 格式的资源\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"HTTP/1.0\")])]),t._v(\" \"),_(\"ul\",[_(\"li\",[t._v(\"增加了请求方式 POST 和 HEAD\")]),t._v(\" \"),_(\"li\",[t._v(\"不再局限于0.9版本的HTML格式，根据Content-Type可以支持多种数据格式，即MIME多用途互联网邮件扩展，例如text/html、image/jpeg等\")]),t._v(\" \"),_(\"li\",[t._v(\"同时也开始支持 cache，就是当客户端在规定时间内访问统一网站，直接访问cache即可\")]),t._v(\" \"),_(\"li\",[t._v(\"HTTP请求和回应的格式也变了。除了数据部分，每次通信都必须包括头信息（HTTP header），用来描述一些元数据。其他的新增功能还包括状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等\")]),t._v(\" \"),_(\"li\",[t._v(\"但是1.0版本的工作方式是每次TCP连接只能发送一个请求，当服务器响应后就会关闭这次连接，下一个请求需要再次建立TCP连接，就是不支持keepalive\")])])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"HTTP/1.0+\")])]),t._v(\" \"),_(\"p\",[t._v(\"在20世纪90年代中叶，为满足飞快发展的万维网，很多流行的 Web 客户端和服务器飞快的向 HTTP 中添加各种特性，包括持久的 keep-alive 连接、虚拟主机支持，以及代理连接支持都被假如到 HTTP 中，并称为非官方的事实标准。这种非正式的 HTTP 扩展版本通常称为 HTTP/1.0+\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"HTTP/1.1\")])]),t._v(\" \"),_(\"ul\",[_(\"li\",[t._v(\"http1.1是目前最为主流的http协议版本，从1997年发布至今，仍是主流的http协议版本。\")]),t._v(\" \"),_(\"li\",[t._v(\"引入了持久连接，或叫长连接（ persistent connection），即TCP连接默认不关闭，可以被多个请求复用，不用声明Connection: keep-alive。\")]),t._v(\" \"),_(\"li\",[t._v(\"引入了管道机制（ pipelining），即在同一个TCP连接里，客户端可以同时发送多个请求，进一步改进了HTTP协议的效率。\")]),t._v(\" \"),_(\"li\",[t._v(\"新增方法：PUT、 PATCH、 OPTIONS、 DELETE。\")]),t._v(\" \"),_(\"li\",[t._v(\"http协议不带有状态，每次请求都必须附上所有信息。请求的很多字段都是重复的，浪费带宽，影响速度。\")])])]),t._v(\" \"),_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"HTTP/2.0（又名 HTTP-NG）\")])]),t._v(\" \"),_(\"ul\",[_(\"li\",[t._v(\"http/2发布于2015年，目前应用还比较少。\")]),t._v(\" \"),_(\"li\",[t._v('http/2是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为\"帧\"（frame）：头信息帧和数据帧。')]),t._v(\" \"),_(\"li\",[t._v(\"复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，且不用按顺序一一对应，避免了队头堵塞的问题，此双向的实时通信称为多工（ Multiplexing）。\")]),t._v(\" \"),_(\"li\",[t._v(\"HTTP/2 允许服务器未经请求，主动向客户端发送资源，即服务器推送。\")]),t._v(\" \"),_(\"li\",[t._v(\"引入头信息压缩机制（ header compression） ,头信息使用gzip或compress压缩后再发送。\")])])])]),t._v(\" \"),_(\"h2\",{attrs:{id:\"四、https\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四、https\"}},[t._v(\"#\")]),t._v(\" 四、HTTPS\")]),t._v(\" \"),_(\"p\",[t._v(\"HTTP 缺点：\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"通信使用明文不对数据进行加密（内容容易被窃听）\")]),t._v(\" \"),_(\"li\",[t._v(\"不验证通信方身份（容易伪装）\")]),t._v(\" \"),_(\"li\",[t._v(\"无法确定报文完整性（内容易被篡改）\")])]),t._v(\" \"),_(\"p\",[t._v(\"因此，HTTP 协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。\")]),t._v(\" \"),_(\"p\",[t._v(\"为了解决 HTTP 协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议 HTTPS，为了数据传输的安全，HTTPS 在 HTTP 的基础上加入了 SSL（安全套接层）协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。\")]),t._v(\" \"),_(\"p\",[_(\"strong\",[t._v(\"与 SSL（安全套接层）组合使用的 HTTP 就是 HTTPS\")])]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdrb5imj5uj30ro0aqq6q.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds4ejm6cuj30r60cm40n.jpg\",alt:\"img\"}})]),t._v(\" \"),_(\"h3\",{attrs:{id:\"http-和-https-对比\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-和-https-对比\"}},[t._v(\"#\")]),t._v(\" HTTP 和 HTTPS 对比\")]),t._v(\" \"),_(\"p\",[t._v(\"HTTP 协议传输的数据都是未加密的，也就是明文的，因此使用 HTTP 协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了 SSL（Secure Sockets Layer）协议用于对 HTTP 协议传输的数据进行加密，从而就诞生了 HTTPS。简单来说，HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 HTTP 协议安全。\")]),t._v(\" \"),_(\"p\",[t._v(\"HTTPS 和 HTTP 的区别主要如下：\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。\")]),t._v(\" \"),_(\"li\",[t._v(\"http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。\")]),t._v(\" \"),_(\"li\",[t._v(\"http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\")]),t._v(\" \"),_(\"li\",[t._v(\"http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。\")])]),t._v(\" \"),_(\"h3\",{attrs:{id:\"对称加密与非对称加密\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对称加密与非对称加密\"}},[t._v(\"#\")]),t._v(\" 对称加密与非对称加密\")]),t._v(\" \"),_(\"p\",[t._v(\"主要的加密方法分为两种：一种是共享密钥加密（对称密钥加密），一种是公开密钥加密（非对称密钥加密）\")]),t._v(\" \"),_(\"h4\",{attrs:{id:\"共享密钥加密-对称秘钥加密\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#共享密钥加密-对称秘钥加密\"}},[t._v(\"#\")]),t._v(\" 共享密钥加密(对称秘钥加密)\")]),t._v(\" \"),_(\"p\",[t._v(\"加密与解密使用同一个密钥，常见的对称加密算法：DES，AES，3DES等。\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds4ee4n2nj30pd0fhgoc.jpg\",alt:\"img\"}})]),t._v(\" \"),_(\"p\",[t._v(\"也就是说在加密的同时，也会把密钥发送给对方。在发送密钥过程中可能会造成密钥被窃取，那么如何解决这一问题呢？\")]),t._v(\" \"),_(\"h4\",{attrs:{id:\"公开密钥-非对称密钥\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#公开密钥-非对称密钥\"}},[t._v(\"#\")]),t._v(\" 公开密钥（非对称密钥）\")]),t._v(\" \"),_(\"p\",[t._v(\"公开密钥使用一对非对称密钥。一把叫私有密钥，另一把叫公开密钥。私有密钥不让任何人知道，公有密钥随意发送。公钥加密的信息，只有私钥才能解密。常见的非对称加密算法：RSA，ECC等。\")]),t._v(\" \"),_(\"p\",[t._v(\"也就是说，发送密文方使用对方的公开密钥进行加密，对方接受到信息后，使用私有密钥进行解密。\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds4ewaqefj30ff0bpjtq.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"p\",[t._v(\"对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。\")]),t._v(\" \"),_(\"p\",[t._v(\"非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。\")]),t._v(\" \"),_(\"p\",[t._v(\"为了解决这一问题，https 采用对称加密与非对称加密的混合加密方式。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"ssl-tsl\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ssl-tsl\"}},[t._v(\"#\")]),t._v(\" SSL/TSL\")]),t._v(\" \"),_(\"p\",[t._v(\"SSL（Secure Sockets Layer），中文叫做“安全套接层”。它是在上世纪90年代中期，由网景公司设计的。\")]),t._v(\" \"),_(\"p\",[t._v(\"SSL 协议就是用来解决 HTTP 传输过程的不安全问题，到了1999年，SSL 因为应用广泛，已经成为互联网上的事实标准。IETF 就在那年把 SSL 标准化。标准化之后的名称改为 TLS（是“Transport Layer Security”的缩写），中文叫做“传输层安全协议”。\")]),t._v(\" \"),_(\"p\",[t._v(\"很多相关的文章都把这两者并列称呼（SSL/TLS），因为这两者可以视作同一个东西的不同阶段。\")]),t._v(\" \"),_(\"p\",[t._v(\"SSL/TLS协议的基本思路是采用\"),_(\"a\",{attrs:{href:\"http://en.wikipedia.org/wiki/Public-key_cryptography\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"公钥加密法\"),_(\"OutboundLink\")],1),t._v(\"，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。\")]),t._v(\" \"),_(\"p\",[t._v(\"但是，这里有两个问题。\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[t._v(\"如何保证公钥不被篡改？\")])])]),t._v(\" \"),_(\"p\",[t._v(\"​\\t解决方法：将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"p\",[_(\"strong\",[t._v(\"公钥加密计算量太大，如何减少耗用的时间？\")])]),t._v(\" \"),_(\"p\",[t._v('每一次对话（session），客户端和服务器端都生成一个\"对话密钥\"（session key），用它来加密信息。由于\"对话密钥\"是对称加密，所以运算速度非常快，而服务器公钥只用于加密\"对话密钥\"本身，这样就减少了加密运算的消耗时间。')])])]),t._v(\" \"),_(\"p\",[t._v(\"因此，SSL/TLS协议的基本过程是这样的：\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[_(\"p\",[t._v(\"服务端将非对称加密的公钥发送给客户端；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"客户端拿着服务端发来的公钥，对对称加密的key做加密并发给服务端；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"服务端拿着自己的私钥对发来的密文解密，从而获取到对称加密的key；\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"二者利用对称加密的key对需要传输的消息做加解密传输。\")])])]),t._v(\" \"),_(\"p\",[t._v(\"HTTPS 相比 HTTP，在请求前多了一个「握手」的环节。\")]),t._v(\" \"),_(\"p\",[t._v(\"握手过程中确定了数据加密的密码。在握手过程中，网站会向浏览器发送 SSL 证书，SSL 证书和我们日常用的身份证类似，是一个支持 HTTPS 网站的身份证明，SSL 证书里面包含了网站的域名，证书有效期，证书的颁发机构以及用于加密传输密码的公钥等信息，由于公钥加密的密码只能被在申请证书时生成的私钥解密，因此浏览器在生成密码之前需要先核对当前访问的域名与证书上绑定的域名是否一致，同时还要对证书的颁发机构进行验证，如果验证失败浏览器会给出证书错误的提示。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"证书\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#证书\"}},[t._v(\"#\")]),t._v(\" 证书\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds4f2pq0cj30bc0d2dg2.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"p\",[t._v(\"实际上，我们使用的证书分很多种类型，SSL证书只是其中的一种。证书的格式是由 X.509 标准定义。SSL 证书负责传输公钥，是一种PKI（Public Key Infrastructure，公钥基础结构）证书。\")]),t._v(\" \"),_(\"p\",[t._v(\"我们常见的证书根据用途不同大致有以下几种：\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"SSL证书，用于加密HTTP协议，也就是HTTPS。\")]),t._v(\" \"),_(\"li\",[t._v(\"代码签名证书，用于签名二进制文件，比如Windows内核驱动，Firefox插件，Java代码签名等等。\")]),t._v(\" \"),_(\"li\",[t._v(\"客户端证书，用于加密邮件。\")]),t._v(\" \"),_(\"li\",[t._v(\"双因素证书，网银专业版使用的USB Key里面用的就是这种类型的证书。\")])]),t._v(\" \"),_(\"p\",[t._v(\"这些证书都是由受认证的证书颁发机构——我们称之为CA（Certificate Authority）机构来颁发，针对企业与个人的不同，可申请的证书的类型也不同，价格也不同。CA机构颁发的证书都是受信任的证书，对于 SSL 证书来说，如果访问的网站与证书绑定的网站一致就可以通过浏览器的验证而不会提示错误。\")]),t._v(\" \"),_(\"p\",[_(\"strong\",[t._v(\"为什么服务端要发送证书给客户端\")])]),t._v(\" \"),_(\"p\",[t._v(\"互联网有太多的服务需要使用证书来验证身份，以至于客户端(操作系统或浏览器等)无法内置所有证书，需要通过服务端将证书发送给客户端。\")]),t._v(\" \"),_(\"p\",[_(\"strong\",[t._v(\"客户端为什么要验证接收到的证书\")])]),t._v(\" \"),_(\"p\",[t._v(\"中间人攻击\")]),t._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[t._v(\"客户端<------------攻击者<------------服务端\\n        伪造证书            拦截请求\\n\")])])]),_(\"p\",[_(\"strong\",[t._v(\"客户端如何验证接收到的证书\")])]),t._v(\" \"),_(\"p\",[t._v(\"为了回答这个问题，需要引入数字签名(Digital Signature)。\")]),t._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[t._v(\"+---------------------+\\n| A digital signature |\\n|(not to be confused  |\\n|with a digital       |\\n|certificate)         |            +---------+              +--------+\\n| is a mathematical   |----哈希---\\x3e| 消息摘要  |---私钥加密---\\x3e| 数字签名 |\\n|technique used       |            +---------+              +--------+\\n|to validate the      |\\n|authenticity and     |\\n|integrity of a       |\\n|message, software    |\\n|or digital document. |\\n+---------------------+\\n\")])])]),_(\"p\",[t._v(\"将一段文本通过哈希（hash）和私钥加密处理后生成数字签名。\")]),t._v(\" \"),_(\"p\",[t._v(\"假设消息传递在Bob，Susan和Pat三人之间发生。Susan将消息连同数字签名一起发送给Bob，Bob接收到消息后，可以这样验证接收到的消息就是Susan发送的\")]),t._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[t._v(\"+---------------------+\\n| A digital signature |\\n|(not to be confused  |\\n|with a digital       |\\n|certificate)         |            +---------+\\n| is a mathematical   |----哈希---\\x3e|  消息摘要 |\\n|technique used       |            +---------+\\n|to validate the      |                 |\\n|authenticity and     |                 |\\n|integrity of a       |                 |\\n|message, software    |                 对\\n|or digital document. |                 比\\n+---------------------+                 |\\n                                        |\\n                                        |\\n          +--------+               +---------+\\n          | 数字签名 |---公钥解密---\\x3e|  消息摘要 |\\n          +--------+               +---------+\\n\")])])]),_(\"p\",[t._v(\"当然，这个前提是Bob知道Susan的公钥。更重要的是，和消息本身一样，公钥不能在不安全的网络中直接发送给Bob。此时就引入了\"),_(\"a\",{attrs:{href:\"https://en.wikipedia.org/wiki/Certificate_authority\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"证书颁发机构\"),_(\"OutboundLink\")],1),t._v(\"（Certificate Authority，简称CA），CA数量并不多，Bob客户端内置了所有受信任CA的证书。CA对Susan的公钥（和其他信息）数字签名后生成证书。\")]),t._v(\" \"),_(\"p\",[t._v(\"Susan将证书发送给Bob后，Bob通过CA证书的公钥验证证书签名。\")]),t._v(\" \"),_(\"p\",[t._v(\"Bob信任CA，CA信任Susan 使得 Bob信任Susan，\"),_(\"a\",{attrs:{href:\"https://en.wikipedia.org/wiki/Chain_of_trust\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"信任链\"),_(\"OutboundLink\")],1),t._v(\"（Chain Of Trust）就是这样形成的。\")]),t._v(\" \"),_(\"p\",[t._v(\"事实上，Bob客户端内置的是CA的根证书(Root Certificate)，HTTPS协议中服务器会发送证书链（Certificate Chain）给客户端。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"https的工作原理\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#https的工作原理\"}},[t._v(\"#\")]),t._v(\" HTTPS的工作原理\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"Client 使用 https 的 URL 访问 Server，要求与 Server 建立 SSL 连接\")]),t._v(\" \"),_(\"li\",[t._v(\"Server 把事先配置好的公钥证书返回给客户端。\")]),t._v(\" \"),_(\"li\",[t._v(\"Client 验证公钥证书：比如是否在有效期内，证书的用途是不是匹配 Client 请求的站点，是不是在 CRL 吊销列表里面，它的上一级证书是否有效，这是一个递归的过程，直到验证到根证书（操作系统内置的Root证书或者Client内置的Root证书）。如果验证通过则继续，不通过则显示警告信息。\")]),t._v(\" \"),_(\"li\",[t._v(\"Client 使用伪随机数生成器生成加密所使用的对称密钥，然后用证书的公钥加密这个对称密钥，发给Server。\")]),t._v(\" \"),_(\"li\",[t._v(\"Server使用自己的私钥（private key）解密这个消息，得到对称密钥。至此，Client和Server双方都持有了相同的对称密钥。\")]),t._v(\" \"),_(\"li\",[t._v(\"Server使用对称密钥加密“明文内容A”，发送给Client。\")]),t._v(\" \"),_(\"li\",[t._v(\"Client使用对称密钥解密响应的密文，得到“明文内容A”。\")]),t._v(\" \"),_(\"li\",[t._v(\"Client再次发起HTTPS的请求，使用对称密钥加密请求的“明文内容B”，然后Server使用对称密钥解密密文，得到“明文内容B”。\")])]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdqyp5t210j31ey0u0n0y.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"h3\",{attrs:{id:\"https的优点\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#https的优点\"}},[t._v(\"#\")]),t._v(\" HTTPS的优点\")]),t._v(\" \"),_(\"p\",[t._v(\"尽管 HTTPS 并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但 HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；\")]),t._v(\" \"),_(\"li\",[t._v(\"HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。\")]),t._v(\" \"),_(\"li\",[t._v(\"HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。\")]),t._v(\" \"),_(\"li\",[t._v(\"谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。\")])]),t._v(\" \"),_(\"h3\",{attrs:{id:\"https的缺点\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#https的缺点\"}},[t._v(\"#\")]),t._v(\" HTTPS的缺点\")]),t._v(\" \"),_(\"p\",[t._v(\"虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；\")]),t._v(\" \"),_(\"li\",[t._v(\"HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；\")]),t._v(\" \"),_(\"li\",[t._v(\"SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。\")]),t._v(\" \"),_(\"li\",[t._v(\"SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。\")]),t._v(\" \"),_(\"li\",[t._v(\"HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。\")])]),t._v(\" \"),_(\"h3\",{attrs:{id:\"http-切换到-https\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-切换到-https\"}},[t._v(\"#\")]),t._v(\" HTTP 切换到 HTTPS\")]),t._v(\" \"),_(\"p\",[t._v(\"如果需要将网站从http切换到https到底该如何实现呢？\")]),t._v(\" \"),_(\"p\",[t._v(\"这里需要将页面中所有的链接，例如js，css，图片等等链接都由http改为https。例如：http://www.baidu.com改为https://www.baidu.com\")]),t._v(\" \"),_(\"p\",[t._v(\"BTW，这里虽然将http切换为了https，还是建议保留http。所以我们在切换的时候可以做http和https的兼容，具体实现方式是，去掉页面链接中的http头部，这样可以自动匹配http头和https头。例如：将http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即使https的。\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"什么是cookie-cookie的使用过程是怎么样的\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是cookie-cookie的使用过程是怎么样的\"}},[t._v(\"#\")]),t._v(\" 什么是Cookie，Cookie的使用过程是怎么样的？\")]),t._v(\" \"),_(\"p\",[t._v(\"由于 http 协议是无状态协议，如果客户通过浏览器访问 web 应用时没有一个保存用户访问状态的机制，那么将不能持续跟踪应用的操作。比如当用户往购物车中添加了商品，web 应用必须在用户浏览别的商品的时候仍保存购物车的状态，以便用户继续往购物车中添加商品。\")]),t._v(\" \"),_(\"p\",[t._v(\"cookie 是浏览器的一种缓存机制，它可用于维持客户端与服务器端之间的会话。由于下面一题会讲到 session，所以这里要强调cookie会将会话保存在客户端（session则是把会话保存在服务端）\")]),t._v(\" \"),_(\"p\",[t._v(\"这里以最常见的登陆案例讲解cookie的使用过程：\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"首先用户在客户端浏览器向服务器发起登陆请求\")]),t._v(\" \"),_(\"li\",[t._v(\"登陆成功后，服务端会把登陆的用户信息设置 cookie 中，返回给客户端浏览器\")]),t._v(\" \"),_(\"li\",[t._v(\"客户端浏览器接收到 cookie 请求后，会把 cookie 保存到本地（可能是内存，也可能是磁盘，看具体使用情况而定）\")]),t._v(\" \"),_(\"li\",[t._v(\"以后再次访问该 web 应用时，客户端浏览器就会把本地的 cookie 带上，这样服务端就能根据 cookie 获得用户信息了\")])]),t._v(\" \"),_(\"h3\",{attrs:{id:\"什么是session-有哪些实现session的机制\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是session-有哪些实现session的机制\"}},[t._v(\"#\")]),t._v(\" 什么是session，有哪些实现session的机制？\")]),t._v(\" \"),_(\"p\",[t._v(\"session 是一种维持客户端与服务器端会话的机制。但是与 \"),_(\"strong\",[t._v(\"cookie 把会话信息保存在客户端本地不一样，session 把会话保留在浏览器端。\")])]),t._v(\" \"),_(\"p\",[t._v(\"我们同样以登陆案例为例子讲解 session 的使用过程：\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"首先用户在客户端浏览器发起登陆请求\")]),t._v(\" \"),_(\"li\",[t._v(\"登陆成功后，服务端会把用户信息保存在服务端，并返回一个唯一的 session 标识给客户端浏览器。\")]),t._v(\" \"),_(\"li\",[t._v(\"客户端浏览器会把这个唯一的 session 标识保存在起来\")]),t._v(\" \"),_(\"li\",[t._v(\"以后再次访问 web 应用时，客户端浏览器会把这个唯一的 session 标识带上，这样服务端就能根据这个唯一标识找到用户信息。\")])]),t._v(\" \"),_(\"p\",[t._v(\"看到这里可能会引起疑问：把唯一的 session 标识返回给客户端浏览器，然后保存起来，以后访问时带上，这难道不是 cookie 吗？\")]),t._v(\" \"),_(\"p\",[t._v(\"没错，s\"),_(\"strong\",[t._v(\"ession 只是一种会话机制，在许多 web 应用中，session 机制就是通过 cookie 来实现的\")]),t._v(\"。也就是说它只是使用了 cookie 的功能，并不是使用 cookie 完成会话保存。与 cookie 在保存客户端保存会话的机制相反，session 通过 cookie 的功能把会话信息保存到了服务端。\")]),t._v(\" \"),_(\"p\",[t._v(\"进一步地说，session 是一种维持服务端与客户端之间会话的机制，它可以有不同的实现。以现在比较流行的小程序为例，阐述一个 session 的实现方案：\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"首先用户登陆后，需要把用户登陆信息保存在服务端，这里我们可以采用 redis。比如说给用户生成一个 userToken，然后以 userId 作为键，以 userToken 作为值保存到 redis 中，并在返回时把 userToken 带回给小程序端。\")]),t._v(\" \"),_(\"li\",[t._v(\"小程序端接收到 userToken 后把它缓存起来，以后每当访问后端服务时就把 userToken 带上。\")]),t._v(\" \"),_(\"li\",[t._v(\"在后续的服务中服务端只要拿着小程序端带来的 userToken 和 redis 中的 userToken 进行比对，就能确定用户的登陆状态了。\")])]),t._v(\" \"),_(\"h3\",{attrs:{id:\"session和cookie有什么区别\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#session和cookie有什么区别\"}},[t._v(\"#\")]),t._v(\" session和cookie有什么区别\")]),t._v(\" \"),_(\"p\",[t._v(\"经过上面两道题的阐述，这道题就很清晰了\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"cookie 是浏览器提供的一种缓存机制，它可以用于维持客户端与服务端之间的会话\")]),t._v(\" \"),_(\"li\",[t._v(\"session 指的是维持客户端与服务端会话的一种机制，它可以通过 cookie 实现，也可以通过别的手段实现。\")]),t._v(\" \"),_(\"li\",[t._v(\"如果用 cookie 实现会话，那么会话会保存在客户端浏览器中\")]),t._v(\" \"),_(\"li\",[t._v(\"而 session 机制提供的会话是保存在服务端的。\")])]),t._v(\" \"),_(\"h2\",{attrs:{id:\"other-faq\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#other-faq\"}},[t._v(\"#\")]),t._v(\" Other FAQ\")]),t._v(\" \"),_(\"h3\",{attrs:{id:\"从输入网址到获得页面的过程\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#从输入网址到获得页面的过程\"}},[t._v(\"#\")]),t._v(\" 从输入网址到获得页面的过程\")]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"浏览器查询 DNS，获取域名对应的 IP 地址：具体过程包括浏览器搜索自身的DNS缓存、搜索操作系统的DNS缓存、读取本地的Host文件和向本地DNS服务器进行查询等。对于向本地DNS服务器进行查询，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析(此解析具有权威性)；如果要查询的域名不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析（此解析不具有权威性）。如果本地域名服务器并未缓存该网址映射关系，那么将根据其设置发起递归查询或者迭代查询；\")]),t._v(\" \"),_(\"li\",[t._v(\"浏览器获得域名对应的 IP 地址以后，浏览器向服务器请求建立链接，发起三次握手；\")]),t._v(\" \"),_(\"li\",[t._v(\"TCP/IP 链接建立起来后，浏览器向服务器发送 HTTP 请求；\")]),t._v(\" \"),_(\"li\",[t._v(\"服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；\")]),t._v(\" \"),_(\"li\",[t._v(\"浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；\")]),t._v(\" \"),_(\"li\",[t._v(\"浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。\")])]),t._v(\" \"),_(\"p\",[_(\"strong\",[t._v(\"简单版\")])]),t._v(\" \"),_(\"ol\",[_(\"li\",[t._v(\"DNS解析\")]),t._v(\" \"),_(\"li\",[t._v(\"TCP连接\")]),t._v(\" \"),_(\"li\",[t._v(\"发送HTTP请求\")]),t._v(\" \"),_(\"li\",[t._v(\"服务器处理请求并返回HTTP报文\")]),t._v(\" \"),_(\"li\",[t._v(\"浏览器解析渲染页面\")]),t._v(\" \"),_(\"li\",[t._v(\"连接结束\")])]),t._v(\" \"),_(\"h3\",{attrs:{id:\"xss-攻击\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#xss-攻击\"}},[t._v(\"#\")]),t._v(\" XSS 攻击\")]),t._v(\" \"),_(\"p\",[t._v(\"XSS 是一种经常出现在web应用中的计算机安全漏洞，与 SQL 注入一起成为 web 中最主流的攻击方式。XSS 是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些脚本代码嵌入到 web页面中去，使别的用户访问都会执行相应的嵌入代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。\")]),t._v(\" \"),_(\"p\"),t._v(\" \"),_(\"h3\",{attrs:{id:\"ip地址的分类\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ip地址的分类\"}},[t._v(\"#\")]),t._v(\" IP地址的分类\")]),t._v(\" \"),_(\"p\",[t._v(\"IP 地址是指互联网协议地址，是 IP 协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。IP地址编址方案将IP地址空间划分为A、B、C、D、E五类，其中A、B、C是基本类，D、E类作为多播和保留使用，为特殊地址。\")]),t._v(\" \"),_(\"p\",[t._v(\"每个IP地址包括两个标识码（ID），即网络ID和主机ID。同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机（包括网络上工作站，服务器和路由器等）有一个主机ID与其对应。A~E类地址的特点如下：\")]),t._v(\" \"),_(\"p\",[t._v(\"A类地址：以0开头，第一个字节范围：0~127；\")]),t._v(\" \"),_(\"p\",[t._v(\"B类地址：以10开头，第一个字节范围：128~191；\")]),t._v(\" \"),_(\"p\",[t._v(\"C类地址：以110开头，第一个字节范围：192~223；\")]),t._v(\" \"),_(\"p\",[t._v(\"D类地址：以1110开头，第一个字节范围为224~239；\")]),t._v(\" \"),_(\"p\",[t._v(\"E类地址：以1111开头，保留地址\")]),t._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gds4m1xeinj30ee0apdkh.jpg\",alt:\"\"}})]),t._v(\" \"),_(\"h2\",{attrs:{id:\"参考与感谢\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考与感谢\"}},[t._v(\"#\")]),t._v(\" 参考与感谢\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[t._v(\"《HTTP 权威指南》\")]),t._v(\" \"),_(\"li\",[t._v(\"https://arch-long.cn/articles/network/OSI模型TCPIP协议栈.html\")]),t._v(\" \"),_(\"li\",[t._v(\"https://blog.csdn.net/qq_32998153/article/details/79680704\")])])])}),[],!1,null,null,null);v.default=a.exports}}]);","extractedComments":[]}