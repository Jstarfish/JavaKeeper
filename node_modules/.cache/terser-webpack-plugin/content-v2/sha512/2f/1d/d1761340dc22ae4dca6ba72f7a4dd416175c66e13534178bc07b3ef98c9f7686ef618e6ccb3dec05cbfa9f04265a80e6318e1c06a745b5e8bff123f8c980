{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[279],{833:function(t,s,a){\"use strict\";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"单元测试\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单元测试\"}},[t._v(\"#\")]),t._v(\" 单元测试\")]),t._v(\" \"),a(\"p\",[t._v(\"[TOC]\")]),t._v(\" \"),a(\"h1\",{attrs:{id:\"一、什么是单元测试\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、什么是单元测试\"}},[t._v(\"#\")]),t._v(\" 一、什么是单元测试\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_1-1-定义\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-定义\"}},[t._v(\"#\")]),t._v(\" 1.1 定义\")]),t._v(\" \"),a(\"p\",[t._v(\"维基百科的解释：\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"单元测试（英语：Unit Testing）又称为模块测试，是针对程序模块)（软件设计的最小单位）来进行正确性检验的测试工作\")]),t._v(\" \"),a(\"p\",[t._v(\"指由开发人员对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义，如C语言中单元指一个函数，Java里单元指一个方法，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。在Java中单元测试的最小单元是方法。\")]),t._v(\" \"),a(\"li\",[t._v(\"单元测试是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。执行单元测试，就是为了证明这段代码的行为和我们期望是否一致。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_1-2-好处\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-好处\"}},[t._v(\"#\")]),t._v(\" 1.2 好处\")]),t._v(\" \"),a(\"p\",[t._v(\"测试是开发的一个非常重要的方面，可以在很大程度上决定一个应用程序的命运。良好的测试可以在早期捕获导致应用程序崩溃的问题，但较差的测试往往总是导致故障和停机。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi9mQ3BkMWNmOGlhY2FMcVVseWZTQ1JWTHdKQ2dhNUNCc1drR2FmVGlhd1k4TThqejFCRW9TeTEzaWJ1OUVVcktCV2ljRWdkYVZZaWI1dUpiQWE2aWIzcklmSEtnUS82NDA?x-oss-process=image/format,png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"单元测试的好处包括但不限于：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"提升软件质量\")]),t._v(\"\\n优质的单元测试可以保障开发质量和程序的鲁棒性。越早发现的缺陷，其修复的成本越低。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"促进代码优化\")]),t._v(\"\\n单元测试的编写者和维护者都是开发工程师，在这个过程当中开发人员会不断去审视自己的代码，从而（潜意识）去优化自己的代码。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"提升研发效率\")]),t._v(\"\\n编写单元测试，表面上是占用了项目研发时间，但是在后续的联调、集成、回归测试阶段，单测覆盖率高的代码缺陷少、问题已修复，有助于提升整体的研发效率。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"增加重构自信\")]),t._v(\"\\n代码的重构一般会涉及较为底层的改动，比如修改底层的数据结构等，上层服务经常会受到影响；在有单元测试的保障下，我们对重构出来的代码会多一份底气。\")])])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_1-3-目的\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-目的\"}},[t._v(\"#\")]),t._v(\" 1.3 目的\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"异-che-常-huo-场-xian-景-chang\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异-che-常-huo-场-xian-景-chang\"}},[t._v(\"#\")]),t._v(\" 异（che）常（huo）场（xian）景（chang）\")]),t._v(\" \"),a(\"p\",[t._v(\"相信大家肯定遇到过以下几种情况：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"测试环境没问题，线上怎么就不行。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"所有异常捕获，一切尽在掌控（你以为你以为的是你以为的）。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"祖传代码，改个小功能（只有上帝知道）。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\".....\")])])]),t._v(\" \"),a(\"p\",[t._v(\"要想故障出的少，还得单测好好搞。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"写单元测试的两个动机\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#写单元测试的两个动机\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"写单元测试的两个动机\")]),t._v(\"：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"保证或验证实现功能。\")]),t._v(\" \"),a(\"li\",[t._v(\"保护已经实现的功能不被破坏。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"为什么要写单测\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要写单测\"}},[t._v(\"#\")]),t._v(\" 为什么要写单测：\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"提高代码正确性\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"流程判读符合预期，按照步骤运行，逻辑正确。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"执行结果符合预期，代码执行后，结果正确。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"异常输出符合预期，执行异常或者错误，超越程序边界，保护自身。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"代码质量符合预期，效率，响应时间，资源消耗等。\")])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"发现设计问题\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"代码可测性差\")]),t._v(\" \"),a(\"li\",[t._v(\"方法封装不合理\")]),t._v(\" \"),a(\"li\",[t._v(\"流程不合理\")]),t._v(\" \"),a(\"li\",[t._v(\"设计漏洞等\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"提升代码可读性\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"易写单测的方法一定是简单好理解的，可读性是高的，反之难写的单测代码是复杂的，可读性差的。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"顺便微重构\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"如设计不合理可微重构，保证代码的可读性以及健壮性。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"提升开发人员自信心\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"经过单元测试，能让程序员对自己的代码质量更有信心，对实现方式记忆更深。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"启动速度，提升效率\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"不用重复启动容器，浪费大量时间在容器启动上，方便逻辑验证。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"场景保存（多场景）\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"在HSF控制台中只能保存一套参数，而单测可保存多套参数，覆盖各个场景，多条分支，就是一个个测试用例。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"CodeReview时作为重点CR的地方\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"好的单测可作为指导文档，方便使用者使用及阅读\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"写起来，相信你会发现更多单测带来的价值。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_1-4-基本原则\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-4-基本原则\"}},[t._v(\"#\")]),t._v(\" 1.4 基本原则\")]),t._v(\" \"),a(\"p\",[t._v(\"宏观上，单元测试要符合 AIR 原则：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"A: Automatic（自动化）\")]),t._v(\" \"),a(\"li\",[t._v(\"I: Independent（独立性）\")]),t._v(\" \"),a(\"li\",[t._v(\"R: Repeatable（可重复）\")])]),t._v(\" \"),a(\"p\",[t._v(\"微观上，单元测试代码层面要符合 BCDE 原则：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"B: Border，边界性测试，包括循环边界、特殊取值、特殊时间点、数据顺序等\")]),t._v(\" \"),a(\"li\",[t._v(\"C: Correct，正确的输入，并且得到预期的结果\")]),t._v(\" \"),a(\"li\",[t._v(\"D: Design，与设计文档相符合，来编写单元测试\")]),t._v(\" \"),a(\"li\",[t._v(\"E: Error，单元测试的目的是为了证明程序有错，而不是证明程序无错。\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"为了发现代码中潜藏的错误，我们需要在编写测试用例时有一些强制的错误输入（如非法数据、异常流程、非业务允许输入等）来得到预期的错误结果。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_1-5-单元测试的常见场景\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-5-单元测试的常见场景\"}},[t._v(\"#\")]),t._v(\" 1.5 单元测试的常见场景\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"开发前写单元测试，通过测试描述需求，由测试驱动开发。\")]),t._v(\" \"),a(\"li\",[t._v(\"在开发过程中及时得到反馈，提前发现问题。\")]),t._v(\" \"),a(\"li\",[t._v(\"应用于自动化构建或持续集成流程，对每次代码修改做回归测试。（CI/CD 质量保障）\")]),t._v(\" \"),a(\"li\",[t._v(\"作为重构的基础，验证重构是否可靠。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_1-6-容易混淆的概念\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-6-容易混淆的概念\"}},[t._v(\"#\")]),t._v(\" 1.6 容易混淆的概念\")]),t._v(\" \"),a(\"p\",[t._v(\"单元测试和集成测试的界线对于大部分开发来说界线不是那么不清晰。\")]),t._v(\" \"),a(\"p\",[t._v(\"单测说是最小单元？但这个太抽象，具体的可以对应，一个类的方法，最大也可以作为一个类。\")]),t._v(\" \"),a(\"p\",[t._v(\"一般认为，单元测试不应该包含外部依赖，反之就是集成测试了。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"本地其他的service\")]),t._v(\" \"),a(\"li\",[t._v(\"dao调用（查数据库）\")]),t._v(\" \"),a(\"li\",[t._v(\"外部缓存\")]),t._v(\" \"),a(\"li\",[t._v(\"rpc调用、消息中间件\")]),t._v(\" \"),a(\"li\",[t._v(\"微服务调用\")]),t._v(\" \"),a(\"li\",[t._v(\"http-Restful、网络服务\")]),t._v(\" \"),a(\"li\",[t._v(\"文件系统等等外部基础设施\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"如果有这些依赖，还想当做单元测试，就应该用测试替身（Mockito这样的库可以替你生成测试替身）替换掉所有的外部依赖。\")])]),t._v(\" \"),a(\"p\",[t._v(\"除了容易混淆的单测和集成测试，三种主要的软件测试还包括功能测试， 下面简单比较下这三种测试。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-6-1-单测-vs-集成测试-vs-功能测试\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-6-1-单测-vs-集成测试-vs-功能测试\"}},[t._v(\"#\")]),t._v(\" 1.6.1 单测 VS 集成测试 VS 功能测试\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"单元测试\")]),t._v(\"：用于测试各个代码组件，并确保代码按照预期的方式工作。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"单元测试由\"),a(\"strong\",[t._v(\"开发人员编写和执行\")]),t._v(\"。\")]),t._v(\" \"),a(\"li\",[t._v(\"大多数情况下，使用\"),a(\"strong\",[t._v(\"JUnit 或 TestNG\")]),t._v(\"之类的测试框架。\")]),t._v(\" \"),a(\"li\",[t._v(\"测试用例\"),a(\"strong\",[t._v(\"通常是在方法级别\")]),t._v(\"写入并通过自动化执行。\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"集成测试\")]),t._v(\"：检查系统是否作为一个整体而工作。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"集成测试也由\"),a(\"strong\",[t._v(\"开发人员完成\")]),t._v(\"，但不是测试单个组件，而是旨在跨组件测试。\")]),t._v(\" \"),a(\"li\",[t._v(\"系统由许多单独的组件组成，如代码，数据库，Web服务器等。\")]),t._v(\" \"),a(\"li\",[t._v(\"集成测试能够发现如组件布线，网络访问，数据库问题等问题。\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"功能测试\")]),t._v(\"：通过将给定输入的结果与规范进行比较来检查每个功能是否正确实现。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"通常，这不是在开发人员级别的。\")]),t._v(\" \"),a(\"li\",[t._v(\"功能测试由单独的测试团队执行。\")]),t._v(\" \"),a(\"li\",[t._v(\"测试用例基于规范编写，并且实际结果与预期结果进行比较。\")]),t._v(\" \"),a(\"li\",[t._v(\"有若干\"),a(\"strong\",[t._v(\"工具可用于自动化\")]),t._v(\"的\"),a(\"strong\",[t._v(\"功能\")]),t._v(\"测试，如\"),a(\"strong\",[t._v(\"Selenium和QTP\")]),t._v(\"。\")])])])]),t._v(\" \"),a(\"hr\"),t._v(\" \"),a(\"p\",[t._v(\"从\"),a(\"strong\",[t._v(\"服务端的角度\")]),t._v(\"把这三层稍微改一下：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"契约测试\")]),t._v(\"：测试服务与服务之间的契约，接口保证。代价最高，测试速度最慢。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"集成测试\")]),t._v(\"（Integration）：集成当前spring容器、中间件等，对服务内的接口，或者其他依赖于环境的方法的测试。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 加载spring环境\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@RunWith\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SpringBootRunner\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@DelegateTo\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SpringJUnit4ClassRunner\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@SpringBootTest\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"classes \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Application\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ApiServiceTest\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Autowired\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ApiService\")]),t._v(\" apiService\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//do some test\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"单元测试\")]),t._v(\"（Unit Test）：\"),a(\"strong\",[t._v(\"纯函数，方法的测试\")]),t._v(\"，不依赖于spring容器，也不依赖于其他的环境。\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-6-2-单元测试与集成测试的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-6-2-单元测试与集成测试的区别\"}},[t._v(\"#\")]),t._v(\" 1.6.2 单元测试与集成测试的区别\")]),t._v(\" \"),a(\"p\",[t._v(\"在实际工作中，不少同学用集成测试代替了单元测试，或者认为集成测试就是单元测试。这里，总结为了单元测试与集成测试的区别：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"测试对象不同\")]),t._v(\"：单元测试对象是实现了具体功能的程序单元，集成测试对象是概要设计规划中的模块及模块间的组合。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"测试方法不同\")]),t._v(\"：单元测试中的主要方法是基于代码的白盒测试，集成测试中主要使用基于功能的黑盒测试。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"测试时间不同\")]),t._v(\"：集成测试要晚于单元测试。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"测试内容不同\")]),t._v(\"：单元测试主要是模块内程序的逻辑、功能、参数传递、变量引用、出错处理及需求和设计中具体要求方面的测试；而集成测试主要验证各个接口、接口之间的数据传递关系，及模块组合后能否达到预期效果。\")])])]),t._v(\" \"),a(\"h1\",{attrs:{id:\"二、-单元测试的常见痛点\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、-单元测试的常见痛点\"}},[t._v(\"#\")]),t._v(\" 二、 单元测试的常见痛点\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_2-1-为什么大部分开发不喜欢写单测\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-为什么大部分开发不喜欢写单测\"}},[t._v(\"#\")]),t._v(\" 2.1 \"),a(\"strong\",[t._v(\"为什么大部分开发不喜欢写单测？\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"产品经理天天催进度，没有有时间写UT。 单测的成本很高，特别是系统化、自动化的单测，而排期一般不会考虑进去，导致没有时间写。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"自测能测出bug嘛？代码和测试代码都是基于自身思维，就像考试做完第一遍，第二遍检查一样，基本检查不出什么东西\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"UT维护成本太高,投入产出比太低。 对于单测的作用理解和认识不足。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"集成测试由很多单元组成，直接集成测试不就可以了？ 而集成测试是服务于功能的，现在一键部署这么方便，直接部署后页面点点点，进行功能测试，没问题就万事大吉，有问题，远程debug就好了。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"不会写UT。 或者说些的UT都很简单，体现不出UT的作用，十分鸡肋。\")])])]),t._v(\" \"),a(\"p\",[t._v(\"总之有无数种理由不想写UT，其实很多“UT”都只是最基本的集成测试，应该称之为“验证”更合适，\"),a(\"strong\",[t._v(\"验证不等于测试\")]),t._v(\"。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[a(\"strong\",[t._v(\"验证\")]),t._v(\"往往只写主逻辑是否通过，且就一个\"),a(\"code\",[t._v(\"Case\")]),t._v(\"，且没有\"),a(\"code\",[t._v(\"Assert\")]),t._v(\"，有的是\"),a(\"code\",[t._v(\"System.out\")]),t._v(\"。\\n比如RPC的服务端，因为RPC的服务端没有页面可以功能测试，部署到测试环境测试太麻烦，只能写UT了。\")])]),t._v(\" \"),a(\"p\",[t._v(\"有个\"),a(\"strong\",[t._v(\"测试模型图\")]),t._v(\", 图的意思就是：\"),a(\"strong\",[t._v(\"越底层\")]),t._v(\"做的\"),a(\"strong\",[t._v(\"测试效果越好\")]),t._v(\"，越往上则越差。也就是说大部分公司现在做的\"),a(\"strong\",[t._v(\"功能测试\")]),t._v(\"（即UI测试）其实是效果最差的一种测试方式。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://bbs-img.huaweicloud.com/blogs/img/1614221444691083141.png\",alt:\"img\"}})]),t._v(\" \"),a(\"h1\",{attrs:{id:\"三、怎么写好单测\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、怎么写好单测\"}},[t._v(\"#\")]),t._v(\" 三、怎么写好单测\")]),t._v(\" \"),a(\"p\",[t._v(\"即便我们知道单测的好处，且确定下决心要好好写单测了，但单测并不是那么好些的，\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"首先，我们需要知道些单测会遇到的坎、痛点？\")]),t._v(\" \"),a(\"li\",[t._v(\"然后，学习一些写单测的技巧，常用的框架？\")]),t._v(\" \"),a(\"li\",[t._v(\"最后，比较业内一些最佳实践，结合咱们的实际情况，选择一种进行尝试验证。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_3-1-写单测的痛点和难点\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-写单测的痛点和难点\"}},[t._v(\"#\")]),t._v(\" 3.1 写单测的痛点和难点\")]),t._v(\" \"),a(\"p\",[t._v(\"下列痛点是日常开发中可能会遇到的，\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"测试上下文依赖外部服务（如数据库服务）\")]),t._v(\" \"),a(\"li\",[t._v(\"测试上下文存在代码依赖（如框架等）\")]),t._v(\" \"),a(\"li\",[t._v(\"单元测试难以维护和理解（语义不清）\")]),t._v(\" \"),a(\"li\",[t._v(\"对于多场景不同输入输出的函数，单元测试代码量会很多\")]),t._v(\" \"),a(\"li\",[t._v(\"需要连接一些微服务\\n...\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_3-2-写好单测的技巧\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-写好单测的技巧\"}},[t._v(\"#\")]),t._v(\" 3.2 写好单测的技巧\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3-2-1-一些基本的建议\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-1-一些基本的建议\"}},[t._v(\"#\")]),t._v(\" 3.2.1 一些基本的建议\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"您可以在编写代码后使用『单元测试』来检查代码的质量，同时也可以使用该功能来改进开发过程。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"建议您一边开发一边编写测试，而不是在完成应用的开发之后才编写测试。这样做有助于您设计出可维护、可重复使用的小型代码单元，也方便您迅速而彻底地测试您的代码。\")])])])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"使用断言而不是Print语句\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"许多开发人员习惯于在每行代码之后编写\"),a(\"code\",[t._v(\"System.out.println\")]),t._v(\"语句来验证代码是否正确执行。 这种做法常常扩展到单元测试，从而导致\"),a(\"strong\",[t._v(\"测试代码变得杂乱\")]),t._v(\"。除了混乱，这需要开发人员\"),a(\"strong\",[t._v(\"手动干预去验证控制台上打印的输出\")]),t._v(\"，以检查测试是否成功运行。更好的方法是\"),a(\"strong\",[t._v(\"使用自动指示测试结果的断言\")]),t._v(\"。\")])]),t._v(\" \"),a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[a(\"p\",[t._v(\"构建具有确定性结果的测试\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"除了正面情景外，还要测试负面情景和边缘情况\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"单测要有覆盖度\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"单测要稳定\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3-2-2-写可测性好的代码\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-2-写可测性好的代码\"}},[t._v(\"#\")]),t._v(\" 3.2.2 写可测性好的代码\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"单测难写很多时候是因为——代码结构有问题。\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"保持测试代码的紧凑和可读性\")]),t._v(\" \"),a(\"li\",[t._v(\"避免编写重复累赘的断言\")]),t._v(\" \"),a(\"li\",[t._v(\"覆盖尽可能多的范围，包括正面情况，以及（甚至更重要的）出错的代码路径。\")]),t._v(\" \"),a(\"li\",[t._v(\"不要Mock你不拥有的类型！\\n\"),a(\"ul\",[a(\"li\",[t._v(\"这不是一个硬界限，但越过这条线很可能会产生反作用力！\")]),t._v(\" \"),a(\"li\",[t._v(\"TDD是关于设计的，也是关于测试的，两者一样重要，在模拟外部API时，测试不能用于驱动设计，API属于第三方；这个第三方可以，并且实际上也经常会更改API的签名和行为。\")]),t._v(\" \"),a(\"li\",[t._v(\"另一个问题是第三方库可能很复杂，需要大量的Mock才能正常工作。这导致过度指定的测试和复杂的测试辅助装置，这本身就损害了紧凑和可读的目标。或者由于模拟外部系统过于复杂，从而导致测试代码对生产代码的覆盖不足。\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"5、不要Mock一切，这是一种反模式\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3-2-3-单测规约\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-3-单测规约\"}},[t._v(\"#\")]),t._v(\" 3.2.3 单测规约\")]),t._v(\" \"),a(\"p\",[t._v(\"《\"),a(\"strong\",[t._v(\"阿里java 开发规范\")]),t._v(\" —— \"),a(\"strong\",[t._v(\"单测部分\")]),t._v(\"》：\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"1.【强制】好的单元测试必须遵守AIR原则。\")]),t._v(\" \"),a(\"p\",[t._v(\"说明：单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"A：Automatic（自动化）\")]),t._v(\" \"),a(\"li\",[t._v(\"I：Independent（独立性）\")]),t._v(\" \"),a(\"li\",[t._v(\"R：Repeatable（可重复）\")])]),t._v(\" \"),a(\"p\",[t._v(\"2.【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用System.out来进行人肉验证，必须使用assert来验证。\")]),t._v(\" \"),a(\"p\",[t._v(\"3.【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。 反例：method2需要依赖method1的执行，将执行结果做为method2的参数输入。\")]),t._v(\" \"),a(\"p\",[t._v(\"4.【强制】单元测试是可以重复执行的，不能受到外界环境的影响。 说明：单元测试通常会被放到持续集成中，每次有代码check in时单元测试都会被执行。如果单测对外部环境(网络、服务、中间件等)有依赖，容易导致持续集成机制的不可用。 正例：为了不受外界环境影响，要求设计代码时就把SUT的依赖改成注入，在测试时用spring 这样的DI框架注入一个本地（内存）实现或者Mock实现。\")]),t._v(\" \"),a(\"p\",[t._v(\"5.【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。 说明：只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。\")]),t._v(\" \"),a(\"p\",[t._v(\"6.【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。 说明：新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。\")]),t._v(\" \"),a(\"p\",[t._v(\"7.【强制】单元测试代码必须写在如下工程目录：src/test/java，不允许写在业务代码目录下。 说明：源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。\")]),t._v(\" \"),a(\"p\",[t._v(\"8.【推荐】单元测试的基本目标：语句覆盖率达到70%；核心模块的语句覆盖率和分支覆盖率都要达到100% 说明：在工程规约>应用分层中提到的DAO层，Manager层，可重用度高的Service，都应该进行单元测试。\")]),t._v(\" \"),a(\"p\",[t._v(\"9.【推荐】编写单元测试代码遵守BCDE原则，以保证被测试模块的交付质量。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。\")]),t._v(\" \"),a(\"li\",[t._v(\"C：Correct，正确的输入，并得到预期的结果。\")]),t._v(\" \"),a(\"li\",[t._v(\"D：Design，与设计文档相结合，来编写单元测试。\")]),t._v(\" \"),a(\"li\",[t._v(\"E：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。\")])]),t._v(\" \"),a(\"p\",[t._v(\"10.【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。 反例：删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则，导致测试结果异常。\")]),t._v(\" \"),a(\"p\",[t._v(\"11.【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。 正例：在Aone内部单元测试中，使用AONE_UNIT_TEST_的前缀标识数据。\")]),t._v(\" \"),a(\"p\",[t._v(\"12.【推荐】对于不可测的代码在适当时机做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。\")]),t._v(\" \"),a(\"p\",[t._v(\"13.【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（UC）。\")]),t._v(\" \"),a(\"p\",[t._v(\"14.【推荐】单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，在项目提测前完成单元测试。\")]),t._v(\" \"),a(\"p\",[t._v(\"15.【参考】为了更方便地进行单元测试，业务代码应避免以下情况：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"构造方法中做的事情过多。\")]),t._v(\" \"),a(\"li\",[t._v(\"存在过多的全局变量和静态方法。\")]),t._v(\" \"),a(\"li\",[t._v(\"存在过多的外部依赖。\")]),t._v(\" \"),a(\"li\",[t._v(\"存在过多的条件语句。\")])]),t._v(\" \"),a(\"p\",[t._v(\"说明：多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。\")]),t._v(\" \"),a(\"p\",[t._v(\"16.【参考】不要对单元测试存在如下误解：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"那是测试同学干的事情。本文是开发规约，凡是本文出现的内容都是与开发同学强相关的。\")]),t._v(\" \"),a(\"li\",[t._v(\"单元测试代码是多余的。软件系统的整体功能是否正常，与各单元部件的测试正常与否是强相关的。\")]),t._v(\" \"),a(\"li\",[t._v(\"单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。\")]),t._v(\" \"),a(\"li\",[t._v(\"单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。\")])])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_3-3-单测框架-java\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-单测框架-java\"}},[t._v(\"#\")]),t._v(\" 3.3 单测框架(Java)\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1、junit\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、junit\"}},[t._v(\"#\")]),t._v(\" 1、JUnit\")]),t._v(\" \"),a(\"p\",[t._v(\"JUnit是一个开放源代码的Java测试框架，用于编写和运行可重复的测试，也是我们 Javer 最常见的单测框架\")]),t._v(\" \"),a(\"p\",[t._v(\"现在主流的 Junit 有使用 4 和 5（需要JDK8及以上）\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"特征\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"JUNIT 4\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"JUNIT 5\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"声明一种测试方法\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Test\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Test\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"在当前类中的所有测试方法之前执行\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@BeforeClass\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@BeforeAll\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"在当前类中的所有测试方法之后执行\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@AfterClass\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@AfterAll\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"在每个测试方法之前执行\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Before\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@BeforeEach\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"每种测试方法后执行\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@After\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@AfterEach\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"禁用测试方法/类\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Ignore\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Disabled\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"测试工厂进行动态测试\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"NA\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@TestFactory\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"嵌套测试\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"NA\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Nested\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"标记和过滤\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Category\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Tag\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"注册自定义扩展\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"NA\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@ExtendWith\")])])])])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"JUnit 5利用了Java 8或更高版本的特性，例如lambda函数，使测试更强大，更容易维护。\")]),t._v(\" \"),a(\"li\",[t._v(\"JUnit 5为描述、组织和执行测试添加了一些非常有用的新功能。例如，测试得到了更好的显示名称，并且可以分层组织。\")]),t._v(\" \"),a(\"li\",[t._v(\"JUnit 5被组织成多个库，所以只将你需要的功能导入到你的项目中。通过Maven和Gradle等构建系统，包含合适的库很容易。\")]),t._v(\" \"),a(\"li\",[t._v(\"JUnit 5可以同时使用多个扩展，这是JUnit 4无法做到的（一次只能使用一个runner）。这意味着你可以轻松地将Spring扩展与其他扩展（如你自己的自定义扩展）结合起来。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2、testng\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、testng\"}},[t._v(\"#\")]),t._v(\" 2、TestNG\")]),t._v(\" \"),a(\"p\",[t._v(\"TestNG类似于JUnit，但是它配置了特殊的注释和高级功能(JUnit不支持)。\")]),t._v(\" \"),a(\"p\",[t._v(\"TestNG中的NG表示“下一代”。TestNG可以覆盖几乎所有类型的软件测试，包括\"),a(\"strong\",[t._v(\"端到端、单元、集成和功能\")]),t._v(\"测试。TestNG和JUnit都是基于java的框架，允许你编写测试和检查最终结果。如果测试成功，你将看到绿色条，否则将看到红色条。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"TestNG的优点和缺点\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"1. 优点：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"该框架使您能够在多个代码片段上运行并行测试。\")]),t._v(\" \"),a(\"li\",[t._v(\"在测试用例执行期间，您可以生成HTML报告。\")]),t._v(\" \"),a(\"li\",[t._v(\"可以根据优先级对测试用例进行分组和排列\")]),t._v(\" \"),a(\"li\",[t._v(\"可以参数化数据并使用注释来轻松设置优先级。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"2. 缺点\")]),t._v(\"：取决于您的要求，此外，设置TestNG需要一点时间。\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://developer.aliyun.com/article/572271\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"《关于testNG和JUnit的对比》\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3、spock\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、spock\"}},[t._v(\"#\")]),t._v(\" 3、Spock\")]),t._v(\" \"),a(\"p\",[t._v(\"Spock 由 Gradleware首席工程师 于 2008 年创建。虽然灵感来自于 JUnit，Spock 的特性不仅仅是 JUnit 的扩展：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"测试代码使用 Groovy 语言编写，而被测代码可以由 Java 编写。\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"内置 mock 框架以减少引入第三方框架\")]),t._v(\"。\")]),t._v(\" \"),a(\"li\",[t._v(\"可支持自定义测试件名称。\")]),t._v(\" \"),a(\"li\",[t._v(\"为创建测试代码预定义了行为驱动块（given:、when:、then:、expect: 等）。\")]),t._v(\" \"),a(\"li\",[t._v(\"使用数据表格以减少数据结构的使用需求。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_4、jbehave\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4、jbehave\"}},[t._v(\"#\")]),t._v(\" 4、JBehave\")]),t._v(\" \"),a(\"p\",[t._v(\"Behave是一种令人难以置信的、支持BDD(行为驱动开发)的最佳Java测试框架之一。BDD是TDD(测试驱动开发)和ATDD(\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//www.zmtests.com/%3Fpk_campaign%3Dzhihu-w\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"验收测试\"),a(\"OutboundLink\")],1),t._v(\"驱动开发)的演变。\")]),t._v(\" \"),a(\"p\",[t._v(\"Java提供了若干用于单元测试的框架。TestNG和JUnit是最流行的测试框架。JUnit和TestNG的一些重要功能：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"易于设置和运行。\")]),t._v(\" \"),a(\"li\",[t._v(\"支持注释。\")]),t._v(\" \"),a(\"li\",[t._v(\"允许忽略或分组并一起执行某些测试。\")]),t._v(\" \"),a(\"li\",[t._v(\"支持参数化测试，即通过在运行时指定不同的值来运行单元测试。\")]),t._v(\" \"),a(\"li\",[t._v(\"通过与构建工具，如Ant，Maven和Gradle集成来支持自动化的测试执行。\")])]),t._v(\" \"),a(\"p\",[t._v(\"缺点：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"需要具备基本的 Groovy 语言知识\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_5、spring-test\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5、spring-test\"}},[t._v(\"#\")]),t._v(\" 5、Spring Test\")]),t._v(\" \"),a(\"p\",[t._v(\"Spring Test 是 Spring MVC 自带了一个测试框架\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_6、selenide\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6、selenide\"}},[t._v(\"#\")]),t._v(\" 6、Selenide\")]),t._v(\" \"),a(\"p\",[t._v(\"Selenide是一个流行的开源Java测试框架，它是由Selenium WebDriver提供支持。它是为Java应用程序编写精确的、交流的、稳定的UI测试用例的工具。它扩展了WebDriver和JUnit功能。\")]),t._v(\" \"),a(\"p\",[t._v(\"WebDriver是一个非常受欢迎的用户界面测试工具，但是它缺乏处理超时的特性。例如，对Ajax等web技术的测试。Selenide框架管理所有这些问题在一个简单的方式。此外，它更容易安装和学习。你只需要把注意力集中在逻辑上，Selenide就会完成剩下的工作。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"特性\")])]),t._v(\" \"),a(\"p\",[t._v(\"（1）开箱即用，并设置使用框架；\")]),t._v(\" \"),a(\"p\",[t._v(\"（2）编写更少的自动化代码；\")]),t._v(\" \"),a(\"p\",[t._v(\"（3）节省大量的时间；\")]),t._v(\" \"),a(\"p\",[t._v(\"（4）配置理想的CI工具，如Jenkins。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_7、jwebunit\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7、jwebunit\"}},[t._v(\"#\")]),t._v(\" 7、JWebUnit\")]),t._v(\" \"),a(\"p\",[t._v(\"JWebUnit是一个基于java的测试框架，是用于集成、回归和功能测试的首选JUnit扩展之一。它用一个简单的测试界面包装了当前的活动框架，如HTMLUnit和Selenium。因此，你可以立即测试web应用程序的准确性。\")]),t._v(\" \"),a(\"p\",[t._v(\"JWebUnit可用于执行屏幕导航测试。该框架还提供了一个高级Java应用程序编程接口，用于使用一组断言导航web应用程序，以检查应用程序的准确性。它计算通过链接的导航、表单入口和提交、表内容的调整以及其他常见的业务web应用程序特征。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_3-4-mock-框架\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-4-mock-框架\"}},[t._v(\"#\")]),t._v(\" 3.4 Mock 框架\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"什么是Mock?\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"在面向对象的程序设计中，模拟对象（英语：mock object）是以可控的方式模拟真实对象行为的假对象。在编程过程中，通常通过模拟一些输入数据，来验证程序是否达到预期结果。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"为什么使用Mock对象？\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"使用模拟对象，可以模拟复杂的、真实的对象行为。如果在单元测试中无法使用真实对象，可采用模拟对象进行替代。\")])]),t._v(\" \"),a(\"p\",[t._v(\"Mock测试就是在测试过程中，对那些当前测试不关心的，不容易构建的对象，用一个虚拟对象来代替测试的情形。\")]),t._v(\" \"),a(\"p\",[t._v(\"说白了：就是解耦(虚拟化)要测试的目标方法中调用的其它方法，例如：Service的方法调用Mapper类的方法，这时候就要把Mapper类Mock掉（产生一个虚拟对象），这样我们可以自由的控制这个Mapper类中的方法，让它们返回想要的结果、抛出指定异常、验证方法的调用次数等等。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"Mock可以用来解除外部服务依赖，从而保证了测试用例的独立性\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"Mock可以减少全链路测试数据准备，从而提高了编写测试用例的速度\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"Mock可以模拟一些非正常的流程，从而保证了测试用例的代码覆盖率\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"Mock可以不用加载项目环境配置，从而保证了测试用例的执行速度\")])])]),t._v(\" \"),a(\"p\",[t._v(\"单元测试不应该依赖数据，依赖外部服务或组件等，会对其他数据产生影响的情况。启动Spring容器，一般比较慢，可能会启动消息监听消费消息，定时任务的执行等，对数据产生影响。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"easymock\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#easymock\"}},[t._v(\"#\")]),t._v(\" EasyMock\")]),t._v(\" \"),a(\"p\",[t._v(\"EasyMock 是早期比较流行的MocK测试框架。它提供对接口的模拟，能够通过录制、回放、检查三步来完成大体的测试过程，可以验证方法的调用种类、次数、顺序，可以令 Mock 对象返回指定的值或抛出指定异常。通过 EasyMock，我们可以方便的构造 Mock 对象从而使单元测试顺利进行。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"mockito\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mockito\"}},[t._v(\"#\")]),t._v(\" Mockito\")]),t._v(\" \"),a(\"p\",[t._v(\"EasyMock之后流行的mock工具。相对EasyMock学习成本低，而且具有非常简洁的API，测试代码的可读性很高。\")]),t._v(\" \"),a(\"p\",[t._v(\"Spring-boot-starter-test 内置框架\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"MockMvc是由spring-test包提供，实现了对Http请求的模拟，能够直接使用网络的形式，转换到Controller的调用，使得测试速度快、不依赖网络环境。同时提供了一套验证的工具，结果的验证十分方便。\")]),t._v(\" \"),a(\"li\",[t._v(\"接口MockMvcBuilder，提供一个唯一的build方法，用来构造MockMvc。主要有两个实现：StandaloneMockMvcBuilder和DefaultMockMvcBuilder。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"powermock\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#powermock\"}},[t._v(\"#\")]),t._v(\" PowerMock\")]),t._v(\" \"),a(\"p\",[t._v(\"这个工具是在EasyMock和Mockito上扩展出来的，目的是为了解决EasyMock和Mockito不能解决的问题，比如对static, final, private方法均不能mock。其实测试架构设计良好的代码，一般并不需要这些功能，但如果是在已有项目上增加单元测试，老代码有问题且不能改时，就不得不使用这些功能了。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"jmockit\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jmockit\"}},[t._v(\"#\")]),t._v(\" Jmockit\")]),t._v(\" \"),a(\"p\",[t._v(\"JMockit 是一个轻量级的mock框架是用以帮助开发人员编写测试程序的一组工具和API，该项目完全基于 Java 5 SE 的 java.lang.instrument 包开发，内部使用 ASM 库来修改Java的Bytecode。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"testablemock\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#testablemock\"}},[t._v(\"#\")]),t._v(\" TestableMock\")]),t._v(\" \"),a(\"p\",[t._v(\"阿里开源的一款 mock 工具，让Mock的定义和置换干净利落\")]),t._v(\" \"),a(\"p\",[t._v(\"https://github.com/alibaba/testable-mock\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"五、-测试的实践-初步方案\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五、-测试的实践-初步方案\"}},[t._v(\"#\")]),t._v(\" 五、 测试的实践&初步方案\")]),t._v(\" \"),a(\"p\",[t._v(\"PS：都有一点学习成本\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"本地集成测试\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#本地集成测试\"}},[t._v(\"#\")]),t._v(\" 本地集成测试\")]),t._v(\" \"),a(\"p\",[t._v(\"测试主要包含三块内容：\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"数据准备\")]),t._v(\" \"),a(\"li\",[t._v(\"执行逻辑\")]),t._v(\" \"),a(\"li\",[t._v(\"输出验证。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"第一步：数据准备\")]),t._v(\"\\n在本地集成测试里，数据来源基本上来自于dao，dao来自于sql。也就是在执行一个case之前，执行一些sql脚本，数据库则使用h2这类memory database， 切记不要依赖公司测试环境的db。可以在case执行之前准备我们所需要的各种数据， 另外在执行完case之后，执行clean.sql脚本来清理脏数据。这里也说明一个case的执行环境是完全独立的，case之间互不干扰，这很重要。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"第二步：执行逻辑\")])]),t._v(\" \"),a(\"p\",[t._v(\"最简单，就是调用一下我们测试的方法即可\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"第三步：验证\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"数据库访问测试\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据库访问测试\"}},[t._v(\"#\")]),t._v(\" 数据库访问测试\")]),t._v(\" \"),a(\"p\",[t._v(\"数据库测试多用在DAO中，DAO对数据库的操作依赖于mybatis的sql mapper 文件，这些sql mapper多是手工写的，在单测中验证所有sql mapper的正确性非常重要，在DAO层有足够的覆盖度和强度后，Service层的单测才能仅仅关注自身的业务逻辑\")]),t._v(\" \"),a(\"p\",[t._v(\"为了验证sql mapper，我们需要一个能实际运行的数据库。为了提高速度和减少依赖，可以使用内存数据库。内存数据库和目标数据库(MySQL,TDDL)在具体函数上有微小差别，不过只要使用标准的SQL 92，两者都是兼容的。\")]),t._v(\" \"),a(\"p\",[t._v(\"使用 \"),a(\"a\",{attrs:{href:\"http://www.h2database.com/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"H2\"),a(\"OutboundLink\")],1),t._v(\" 作为单测数据库\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"不要使用共享数据库，要使用本地数据库，最好是内存数据库\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"使用共享数据库的根本问题是：别的开发者也会操作这个数据库，从而导致你的测试结果是不确定的。\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"实际情况共同开发者不多时，可以用共享数据库。\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"通过网络访问远程数据库的速度肯定不如访问本机数据库快。如果远程数据库由于维护需要而停机了，或者由于各种原因网络中断了，都会导致测试无法进行。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"如果有可能，请安装和使用内存数据库。如果你的产品是针对某一种特定类型的数据库的（例如MySQL），就寻找这种数据库的内存版本。如果你的产品是数据库中立的，最好是选择不同种类的内存数据库（例如H2）。 内存数据库一方面是更快，另一方面是不需要在测试后清理数据。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"如果换用本地数据库，是不是需要修改数据库配置？答案是：通常不需要。一般而言，你会把数据库访问的url等信息抽取出来，放在类似jdbc.properties这样的文本文件中，由Java代码读取这个文件来获取数据库连接信息。你可以分别为产品和测试准备一个不同的jdbc.properties。产品连接到正式的数据库，测试连接到本地/内存数据库。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"这里我们部门都有开发、测试、线上数据库，所以问题不大。\")])])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"增删改查单元测试顺序问题\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"好的测试必须是独立的，不依赖于其他测试的执行\")]),t._v(\" \"),a(\"li\",[t._v(\"我们应该在query测试中通过其他手段插入样例数据到数据库中，然后才执行query。可以使用DBUnit或者类似的工具，将XML或JSON格式的样例数据插入数据库。Spring也提供了这样的手段。注意：要保证这些工具的数据处理逻辑是替换而不是添加。就是不管原来的数据表中有没有内容，都整体清空，用数据文件中的数据代替。这样才能保证测试条件是确定的。\")]),t._v(\" \"),a(\"li\",[t._v(\"无论如何，要将准备测试数据这样的工作作为测试的一部分自动执行，不应该进行手工插入。测试应该是全自动的，既不需要手工准备测试数据，也不需要手工验证测试结果。\")])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"其它外部依赖\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#其它外部依赖\"}},[t._v(\"#\")]),t._v(\" 其它外部依赖\")]),t._v(\" \"),a(\"p\",[t._v(\"对于除数据库以外的依赖，包括各种中间件以及外部的HSF/HTTP服务，在单测中全部采用Mock进行解耦。\")]),t._v(\" \"),a(\"p\",[t._v(\"junit + mockito\")]),t._v(\" \"),a(\"p\",[t._v(\"与spring结合性感觉更强，可以充分兼容spring的各种注解，能较完美接近项目启动后实际运行情况。可以用来做一定的业务自动化回归测试，但可能超出了ut的范围\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"mock模板化\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mock模板化\"}},[t._v(\"#\")]),t._v(\" Mock模板化\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"一个类里面测试太多怎么办？\")]),t._v(\" \"),a(\"li\",[t._v(\"不知道别人mock了哪些数据怎么办？\")]),t._v(\" \"),a(\"li\",[t._v(\"测试结构太复杂？\")]),t._v(\" \"),a(\"li\",[t._v(\"测试莫名奇妙起不来？\")])]),t._v(\" \"),a(\"p\",[t._v(\"FSC（Fixture-Scenario-Case）是一种组织测试代码的方法，目标是尽量将一些MOCK信息在不同的测试中共享。其结构如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJkibdPicqyKZw3IFlzLsRSickr20z2q3xU5FuicZJotzc422ffkPOPkGeZnQvjeKRWZykXXNz24ricgkQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\",alt:\"图片\"}})]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"通过组合Fixture（固定设施），来构造一个Scenario（场景）。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"通过组合Scenario（场景）+ Fixture（固定设施），构造一个case（用例）。\")])])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJkibdPicqyKZw3IFlzLsRSickTibss6iaBqKojTpJicFBuOia22Jl45xB33SlSbgOl6MQicMWO5sxtjMClrw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\",alt:\"图片\"}})]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"Case：当用户正常登录后，获取当前登录信息时，应该返回正确的用户信息。这是一个简单的用户登录的case，这个case里面总共有两个动作、场景，一个是用户正常登录，一个是获取用户信息，演化为两个scenario。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"Scenario：用户正常登录，肯定需要登录参数，如：手机号、验证码等，另外隐含着数据库中应该有一个对应的用户，如果登录时需要与第三方系统进行交互，还需要对第三方系统进行mock或者stub。获取用户信息时，肯定需要上一阶段颁发的凭证信息，另外该凭证可能是存储于一些缓存系统的，所以还需要对中间件进行mock或者stub。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"Fixture\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"利用Builder模式构造请求参数。\")]),t._v(\" \"),a(\"li\",[t._v(\"利用DataFile来存储构造用户的信息，例如DB transaction进行数据的存储和隔离。\")]),t._v(\" \"),a(\"li\",[t._v(\"利用Mockito进行三方系统、中间件的Mock。\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"当这样组织测试时，如果另外一个Case中需要用户登录，则可以直接复用用户登录的Scenario。也可以通过复用Fixture来减少数据的Mock。下面我们来详细解释看一下每一层如何实现，show the code。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"六、单测示例-尝试\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#六、单测示例-尝试\"}},[t._v(\"#\")]),t._v(\" 六、单测示例&尝试\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-xml extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- https://mvnrepository.com/artifact/org.mockito/mockito-core --\\x3e\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"dependency\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"groupId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"org.mockito\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"groupId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"artifactId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"mockito-core\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"artifactId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"version\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"3.3.3\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"version\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"scope\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"test\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"scope\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"dependency\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter --\\x3e\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"dependency\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"groupId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"org.junit.jupiter\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"groupId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"artifactId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"junit-jupiter\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"artifactId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"version\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"5.7.1\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"version\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"scope\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"test\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"scope\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"dependency\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"org\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"mockito\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"runners\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"MockitoJUnitRunner\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@RunWith\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"MockitoJUnitRunner\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IndustryFieldTest\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//自动注入Mock类（fieldDao）到被测试类（IndustryFieldServiceImpl），作为一个属性\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@InjectMocks\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IndustryFieldServiceImpl\")]),t._v(\" industryFieldService\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Mock\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IndustryFieldDao\")]),t._v(\" fieldDao\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Test\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"testListIndustryFields\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"List\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IndustryField\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" fields \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ArrayList\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IndustryField\")]),t._v(\" locField \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IndustryField\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        locField\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1L\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        locField\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setFieldKey\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"loc\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        locField\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setRequired\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        locField\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setFieldKeyCn\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"商品移动端url\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IndustryField\")]),t._v(\" nameField \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IndustryField\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        nameField\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2L\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        nameField\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setFieldKey\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"name\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        nameField\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setRequired\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        nameField\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setFieldKeyCn\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"商品名称\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        fields\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"add\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"locField\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        fields\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"add\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"nameField\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Mockito\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"when\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fieldDao\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"listIndustryFields\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"thenReturn\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fields\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//测试service 方法\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"List\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IndustryFieldDto\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" fieldDtos \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" industryFieldService\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"listIndustryFields\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Assert\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"assertNotNull\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fieldDtos\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Assert\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"assertEquals\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fieldDtos\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getFieldKey\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"loc1\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"工具篇\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#工具篇\"}},[t._v(\"#\")]),t._v(\" 工具篇\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"Squaretest\")])]),t._v(\" \"),a(\"p\",[t._v(\"自动生成单测框架\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"Fast-tester\")])]),t._v(\" \"),a(\"p\",[t._v(\"阿里提供的 fast_tester，只需要启动应用一次（tip: 添加注解及测试方法需要重新启动应用），支持测试代码热更新，后续可随意编写测试方法\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"JUnitGenerator\")])]),t._v(\" \"),a(\"p\",[t._v(\"idea 插件，自动生成单测方法体\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"参考\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考\"}},[t._v(\"#\")]),t._v(\" 参考\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"《SpringBoot - 單元測試工具 Mockito》https://kucw.github.io/blog/2020/2/spring-unit-test-mockito/\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"https://cloud.tencent.com/developer/article/1338791\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"《写有价值的单元测试》https://developer.aliyun.com/article/54478\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"《Mockito.mock() vs @Mock vs @MockBean》https://www.baeldung.com/java-spring-mockito-mock-mockbean\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"《Mock服务插件在接口测试中的设计与应用》 https://tech.youzan.com/mock/\")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}