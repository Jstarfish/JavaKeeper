{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{540:function(t,e,a){\"use strict\";a.r(e);var i=a(6),l=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h3\",{attrs:{id:\"runtime\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#runtime\"}},[t._v(\"#\")]),t._v(\" Runtime\")]),t._v(\" \"),a(\"p\",[t._v(\"每个JVM只有一个Runtime实例，即为运行时环境，相当于内存结构的中间的那个框框：运行时环境\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"线程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程\"}},[t._v(\"#\")]),t._v(\" 线程\")]),t._v(\" \"),a(\"p\",[t._v(\"线程是一个程序里的运行单元。JVM允许一个应用有多个线程并行的执行。\")]),t._v(\" \"),a(\"p\",[t._v(\"在Hotspot JVM里，每个线程都与操作系统的本地线程直接映射。当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java线程执行终止后，本地线程也会回收。\")]),t._v(\" \"),a(\"p\",[t._v(\"操作系统负责所有线程的安排调度到任何一个可用的CPU上，一旦本地线程初始化成功，它就会调用Java线程中的run()方法。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"如果你使用jconsole或者是任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调动\"),a(\"code\",[t._v(\"public static void main(String[] args)\")]),t._v(\"的main线程以及所有这个main线程自己创建的线程\")]),t._v(\" \"),a(\"li\",[t._v(\"这些主要的后台系统线程在Hotspot JVM里主要是以下几个：\\n\"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"虚拟机线程\")]),t._v(\"：这种线程的操作是需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行类型包括”stop-the-world“的垃圾收集，线程栈收集，线程挂起一起偏向所撤销\")]),t._v(\" \"),a(\"li\",[t._v(\"周期任务线程：这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行\")]),t._v(\" \"),a(\"li\",[t._v(\"GC线程：这种线程对JVM里不同种类的垃圾收集行为提供了支持\")]),t._v(\" \"),a(\"li\",[t._v(\"编译线程：这种线程在运行时会将字节码编译成本地代码\")]),t._v(\" \"),a(\"li\",[t._v(\"信号调度线程：这种线程接收信号并发送给JVM，在它内部通过调用适当的方法进行处理\")])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"堆内存参数调整-调优关键\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#堆内存参数调整-调优关键\"}},[t._v(\"#\")]),t._v(\" 堆内存参数调整（调优关键）\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"实际上每一块子内存区中都会存在有一部分的可变伸缩区\")]),t._v(\" \"),a(\"li\",[t._v(\"如果空间不足时，则在可变范围之内扩大内存空间\")]),t._v(\" \"),a(\"li\",[t._v(\"当一段时间后，内存空间有余，再将可变空间进行释放\")])]),t._v(\" \"),a(\"p\",[t._v(\"JVM所有操作：https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"VM Switch\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"VM Switch Description\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-Xms\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"设置初始分配大小，默认为物理内存的1/64\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-Xmx\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"最大分配内存，默认为物理内存的1/4\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-Xmn\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"For setting the size of the Young Generation, rest of the space goes for Old Generation.\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-XX:PermGen\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"For setting the initial size of the Permanent Generation memory\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-XX:MaxPermGen\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"For setting the maximum size of Perm Gen\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-XX:SurvivorRatio\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"For providing ratio of Eden space and Survivor Space, for example if Young Generation size is 10m and VM switch is -XX:SurvivorRatio=2 then 5m will be reserved for Eden Space and 2.5m each for both the Survivor spaces. The default value is 8.\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-XX:NewRatio\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"For providing ratio of old/new generation sizes. The default value is 2.\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-XX:+PrintGCDetails\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"输出详细的GC处理日志\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-XX:+PrintGCTimeStamps\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"输出GC的时间戳信息\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-XX:+PrintGCDateStamps\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"输出GC的时间戳信息（以日期的形式）\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-XX:+PrintHeapAtGC\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"在GC进行处理的前后打印堆内存信息\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"-Xloggc:(SavePath)\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"设置日志信息保存文件\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}}),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}})])])])])}),[],!1,null,null,null);e.default=l.exports}}]);","extractedComments":[]}