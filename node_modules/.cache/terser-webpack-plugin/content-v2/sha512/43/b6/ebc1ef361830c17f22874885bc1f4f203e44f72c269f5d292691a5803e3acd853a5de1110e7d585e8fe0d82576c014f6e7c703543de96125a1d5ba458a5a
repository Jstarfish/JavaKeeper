{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{629:function(_,v,t){\"use strict\";t.r(v);var s=t(6),a=Object(s.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":_.$parent.slotKey}},[t(\"p\",[t(\"img\",{attrs:{src:\"http://ww1.sinaimg.cn/large/9b9f09a9ly1g9yp975bslj211c0fq75c.jpg\",alt:\"nosql-index.jpg\"}})]),_._v(\" \"),t(\"h1\",{attrs:{id:\"nosql的前世今生\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nosql的前世今生\"}},[_._v(\"#\")]),_._v(\" NoSQL的前世今生\")]),_._v(\" \"),t(\"h3\",{attrs:{id:\"啥玩意\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#啥玩意\"}},[_._v(\"#\")]),_._v(\" 啥玩意：\")]),_._v(\" \"),t(\"p\",[_._v(\"NoSQL(NoSQL = Not Only SQL )，“不仅仅是SQL”，泛指\"),t(\"strong\",[_._v(\"非关系型的数据库\")]),_._v(\"。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。\")]),_._v(\" \"),t(\"h3\",{attrs:{id:\"互联网时代背景下-数据库的发展以及为什么要用nosql\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#互联网时代背景下-数据库的发展以及为什么要用nosql\"}},[_._v(\"#\")]),_._v(\" 互联网时代背景下，数据库的发展以及为什么要用nosql\")]),_._v(\" \"),t(\"h4\",{attrs:{id:\"_1-单机mysql的美好年代\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-单机mysql的美好年代\"}},[_._v(\"#\")]),_._v(\" 1. 单机MySQL的美好年代\")]),_._v(\" \"),t(\"p\",[_._v(\"​\\t\\t在以前，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付。在那个时候，更多的都是静态网页，动态交互类型的网站不多。上述架构下，我们来看看数据存储的瓶颈是什么？\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"数据量的总大小 一个机器放不下时\")]),_._v(\" \"),t(\"li\",[_._v(\"数据的索引（B+ Tree）一个机器的内存放不下时\")]),_._v(\" \"),t(\"li\",[_._v(\"访问量(读写混合)一个实例不能承受\")])]),_._v(\" \"),t(\"h4\",{attrs:{id:\"_2-memcached-缓存-mysql-垂直拆分\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-memcached-缓存-mysql-垂直拆分\"}},[_._v(\"#\")]),_._v(\" 2. Memcached(缓存)+MySQL+垂直拆分\")]),_._v(\" \"),t(\"p\",[_._v(\"​       后来，随着访问量的上升，几乎大部分使用MySQL架构的网站在数据库上都开始出现了性能问题，web程序不再仅仅专注在功能上，同时也在追求性能。程序员们开始大量的使用\"),t(\"strong\",[_._v(\"缓存技术\")]),_._v(\"来缓解数据库的压力，优化数据库的结构和索引。开始比较流行的是通过\"),t(\"strong\",[_._v(\"文件缓存\")]),_._v(\"来缓解数据库压力，但是当访问量继续增大的时候，多台web机器通过文件缓存不能共享，大量的小文件缓存也带了了比较高的IO压力。在这个时候，Memcached就自然的成为一个非常时尚的技术产品。\")]),_._v(\" \"),t(\"p\",[_._v(\"​\\t\\tMemcached作为一个\"),t(\"strong\",[_._v(\"独立的分布式的缓存服务器\")]),_._v(\"，为多个web服务器提供了一个共享的高性能缓存服务，在Memcached服务器上，又发展了根据hash算法来进行多台Memcached缓存服务的扩展，然后又出现了一致性hash来解决增加或减少缓存服务器导致重新hash带来的大量缓存失效的弊端\")]),_._v(\" \"),t(\"h4\",{attrs:{id:\"_3-mysql主从读写分离\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-mysql主从读写分离\"}},[_._v(\"#\")]),_._v(\" 3. Mysql主从读写分离\")]),_._v(\" \"),t(\"p\",[_._v(\"​\\t\\t由于数据库的写入压力增加，Memcached只能缓解数据库的读取压力。读写集中在一个数据库上让数据库不堪重负，大部分网站开始\"),t(\"strong\",[_._v(\"使用主从复制技术来达到读写分离，以提高读写性能和读库的可扩展性\")]),_._v(\"。\"),t(\"strong\",[_._v(\"Mysql的master-slave模式\")]),_._v(\"成为这个时候的网站标配了。\")]),_._v(\" \"),t(\"h4\",{attrs:{id:\"_4-分表分库-水平拆分-mysql集群\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-分表分库-水平拆分-mysql集群\"}},[_._v(\"#\")]),_._v(\" 4. 分表分库+水平拆分+mysql集群\")]),_._v(\" \"),t(\"p\",[_._v(\"​\\t\\t在Memcached的高速缓存，MySQL的主从复制，读写分离的基础之上，这时MySQL主库的写压力开始出现瓶颈，而数据量的持续猛增，由于\"),t(\"strong\",[_._v(\"MyISAM\")]),_._v(\"使用\"),t(\"strong\",[_._v(\"表锁\")]),_._v(\"，在高并发下会出现严重的锁问题，大量的高并发MySQL应用开始使用\"),t(\"strong\",[_._v(\"InnoDB\")]),_._v(\"引擎代替MyISAM。\")]),_._v(\" \"),t(\"p\",[_._v(\"​\\t\\t同时，开始流行\"),t(\"strong\",[_._v(\"使用分表分库来缓解写压力和数据增长的扩展问题\")]),_._v(\"。这个时候，分表分库成了一个热门技术，是面试的热门问题也是业界讨论的热门技术问题。也就在这个时候，MySQL推出了还不太稳定的表分区，这也给技术实力一般的公司带来了希望。虽然MySQL推出了MySQL Cluster集群，但性能也不能很好满足互联网的要求，只是在高可靠性上提供了非常大的保证。\")]),_._v(\" \"),t(\"h4\",{attrs:{id:\"_5-mysql的扩展性瓶颈\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-mysql的扩展性瓶颈\"}},[_._v(\"#\")]),_._v(\" 5. MySQL的扩展性瓶颈\")]),_._v(\" \"),t(\"p\",[_._v(\"​\\t\\tMySQL数据库也经常存储一些大文本字段，导致数据库表非常的大，在做数据库恢复的时候就导致非常的慢，不容易快速恢复数据库。比如1000万4KB大小的文本就接近40GB的大小，如果能把这些数据从MySQL省去，MySQL将变得非常的小。关系数据库很强大，但是它并不能很好的应付所有的应用场景。MySQL的扩展性差（需要复杂的技术来实现），大数据下IO压力大，表结构更改困难，正是当前使用MySQL的开发人员面临的问题。\")]),_._v(\" \"),t(\"h4\",{attrs:{id:\"_6-为什么用nosql\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-为什么用nosql\"}},[_._v(\"#\")]),_._v(\" 6. 为什么用NoSQL\")]),_._v(\" \"),t(\"p\",[_._v(\"​\\t\\t今天我们可以通过第三方平台（如：Google,Facebook等）可以很容易的\"),t(\"strong\",[_._v(\"访问和抓取数据\")]),_._v(\"（爬虫私密信息有风险哈）。用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加。我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了, NoSQL数据库的发展也不能很好的处理这些大的数据。\")]),_._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://i.loli.net/2019/11/17/WvJC95bHnUjGuF2.png\",alt:\"\"}})]),_._v(\" \"),t(\"h3\",{attrs:{id:\"nosql的优缺点\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nosql的优缺点\"}},[_._v(\"#\")]),_._v(\" NoSql的优缺点\")]),_._v(\" \"),t(\"h5\",{attrs:{id:\"优点\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#优点\"}},[_._v(\"#\")]),_._v(\" 优点\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[_._v(\"易扩展\")]),_._v(\" ： NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。也无形之间，在架构的层面上带来了可扩展的能力。\")]),_._v(\" \"),t(\"li\",[t(\"strong\",[_._v(\"大数据量高性能\")]),_._v(\"：NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。一般MySQL使用Query Cache，每次表的更新Cache就失效，是一种大粒度的Cache，在针对web2.0的交互频繁的应用，Cache性能不高。而NoSQL的Cache是记录级的，是一种细粒度的Cache，所以NoSQL在这个层面上来说就要性能高很多了\")]),_._v(\" \"),t(\"li\",[t(\"strong\",[_._v(\"多样灵活的数据模型\")]),_._v(\"：NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦\")])]),_._v(\" \"),t(\"h5\",{attrs:{id:\"缺点\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缺点\"}},[_._v(\"#\")]),_._v(\" 缺点\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"没有标准化\")]),_._v(\" \"),t(\"li\",[_._v(\"有限的查询功能（到目前为止）\")]),_._v(\" \"),t(\"li\",[_._v(\"最终一致是不直观的程序\")])]),_._v(\" \"),t(\"h3\",{attrs:{id:\"传统rdbms-vs-nosql\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#传统rdbms-vs-nosql\"}},[_._v(\"#\")]),_._v(\" 传统\"),t(\"strong\",[_._v(\"RDBMS\")]),_._v(\" \"),t(\"em\",[_._v(\"VS\")]),_._v(\" \"),t(\"strong\",[_._v(\"NOSQL\")]),_._v(\"：\")]),_._v(\" \"),t(\"h4\",{attrs:{id:\"rdbms\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rdbms\"}},[_._v(\"#\")]),_._v(\" RDBMS\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"高度组织化结构化数据\")]),_._v(\" \"),t(\"li\",[_._v(\"结构化查询语言（SQL）\")]),_._v(\" \"),t(\"li\",[_._v(\"数据和关系都存储在单独的表中。\")]),_._v(\" \"),t(\"li\",[_._v(\"数据操纵语言，数据定义语言\")]),_._v(\" \"),t(\"li\",[_._v(\"严格的一致性\")]),_._v(\" \"),t(\"li\",[_._v(\"基础事务\")])]),_._v(\" \"),t(\"h4\",{attrs:{id:\"nosql\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nosql\"}},[_._v(\"#\")]),_._v(\" NoSQL\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"代表着不仅仅是SQL\")]),_._v(\" \"),t(\"li\",[_._v(\"没有声明性查询语言\")]),_._v(\" \"),t(\"li\",[_._v(\"没有预定义的模式\")]),_._v(\" \"),t(\"li\",[_._v(\"键 - 值对存储，列存储，文档存储，图形数据库\")]),_._v(\" \"),t(\"li\",[_._v(\"最终一致性，而非ACID属性\")]),_._v(\" \"),t(\"li\",[_._v(\"非结构化和不可预知的数据\")]),_._v(\" \"),t(\"li\",[_._v(\"CAP定理\")]),_._v(\" \"),t(\"li\",[_._v(\"高性能，高可用性和可伸缩性\")])]),_._v(\" \"),t(\"h4\",{attrs:{id:\"_3v-3高\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3v-3高\"}},[_._v(\"#\")]),_._v(\" \"),t(\"strong\",[_._v(\"3V+3高\")])]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"大数据时代的3V（海量Volume、多样Variety、实时Velocity）\")]),_._v(\" \"),t(\"li\",[_._v(\"互联网需求的3高（高并发、高可扩、高性能）\")])]),_._v(\" \"),t(\"h3\",{attrs:{id:\"nosql数据模型简介\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nosql数据模型简介\"}},[_._v(\"#\")]),_._v(\" NoSQL数据模型简介\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"聚合模型\")])]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"KV键值\")]),_._v(\" \"),t(\"li\",[_._v(\"bson：BSON（）是一种类json的一种二进制形式的存储格式，简称Binary JSON，它和JSON一样，支持内嵌的文档对象和数组对象\")]),_._v(\" \"),t(\"li\",[_._v(\"列族：顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。\")]),_._v(\" \"),t(\"li\",[_._v(\"图形：\")])]),_._v(\" \"),t(\"h3\",{attrs:{id:\"nosql数据库的四大分类\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nosql数据库的四大分类\"}},[_._v(\"#\")]),_._v(\" NoSQL数据库的四大分类\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"KV键值：\")])]),_._v(\" \"),t(\"p\",[_._v(\"​    新浪：BerkeleyDB+redis\")]),_._v(\" \"),t(\"p\",[_._v(\"​    美团：redis+tair\")]),_._v(\" \"),t(\"p\",[_._v(\"​    阿里、百度：memcache+redis\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"文档型数据库(bson格式比较多)\")]),_._v(\"：\")]),_._v(\" \"),t(\"p\",[_._v(\"CouchDB\")]),_._v(\" \"),t(\"p\",[_._v(\"MongoDB：MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"列存储数据库\")])]),_._v(\" \"),t(\"p\",[_._v(\"Cassandra, HBase\")]),_._v(\" \"),t(\"p\",[_._v(\"分布式文件系统\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"图关系数据库\")])]),_._v(\" \"),t(\"p\",[_._v(\"它不是放图形的，放的是关系比如:朋友圈社交网络、广告推荐系统、社交网络，推荐系统等。专注于构建关系图谱\")]),_._v(\" \"),t(\"p\",[_._v(\"Neo4J, InfoGrid\")]),_._v(\" \"),t(\"h4\",{attrs:{id:\"四者对比\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四者对比\"}},[_._v(\"#\")]),_._v(\" 四者对比\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"在分布式数据库中CAP原理CAP+BASE\")])]),_._v(\" \"),t(\"p\",[_._v(\"传统的\"),t(\"strong\",[_._v(\"ACID\")])]),_._v(\" \"),t(\"p\",[t(\"font\",{attrs:{color:\"red\"}},[_._v(\"A (Atomicity) 原子性\")])],1),_._v(\" \"),t(\"p\",[t(\"font\",{attrs:{color:\"red\"}},[_._v(\"C (Consistency) 一致性\")])],1),_._v(\" \"),t(\"p\",[t(\"font\",{attrs:{color:\"red\"}},[_._v(\"I (Isolation) 独立性\")])],1),_._v(\" \"),t(\"p\",[t(\"font\",{attrs:{color:\"red\"}},[_._v(\"D (Durability) 持久性\")])],1),_._v(\" \"),t(\"h3\",{attrs:{id:\"cap\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cap\"}},[_._v(\"#\")]),_._v(\" \"),t(\"strong\",[_._v(\"CAP\")])]),_._v(\" \"),t(\"p\",[t(\"font\",{attrs:{color:\"red\"}},[t(\"strong\",[_._v(\"C (Consistency) 强一致性——所有节点在同一时间具有相同的数据\")])])],1),_._v(\" \"),t(\"p\",[t(\"font\",{attrs:{color:\"red\"}},[t(\"strong\",[_._v(\"A (Availability)  可用性——保证每个请求不管成功或者失败都有响应\")])])],1),_._v(\" \"),t(\"p\",[t(\"font\",{attrs:{color:\"red\"}},[t(\"strong\",[_._v(\"P (Partition tolerance)  分区容错性——系统中任意信息的丢失或失败不会影响系统的继续运作\")])])],1),_._v(\" \"),t(\"p\",[_._v(\"CAP理论的核心是：\"),t(\"mark\",[t(\"strong\",[_._v(\"一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个\")])]),_._v(\"。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以\"),t(\"strong\",[_._v(\"分区容忍性是我们必须需要实现的\")]),_._v(\"。我们称之为**CAP的3进2，**所以我们只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点。\")]),_._v(\" \"),t(\"p\",[_._v(\"因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三大类：\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。传统Oracle数据库\")]),_._v(\" \"),t(\"li\",[_._v(\"CP - 满足一致性，分区容忍性的系统，通常性能不是特别高。Redis、Mongodb\")]),_._v(\" \"),t(\"li\",[_._v(\"AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。大多数网站架构的选择\")])]),_._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://i.loli.net/2019/11/17/uHBSrYPEdyFxmZj.png\",alt:\"redis-cap.png\"}})]),_._v(\" \"),t(\"p\",[_._v(\"?> 注意\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"分布式架构的时候必须做出取舍\")]),_._v(\"：一致性和可用性之间取一个平衡。多余大多数web应用，其实并不需要强一致性。因此牺牲C换取P，这是目前分布式数据库产品的方向\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"一致性与可用性的决择\")]),_._v(\"：对于web2.0网站来说，关系数据库的很多主要特性却往往无用武之地\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"数据库事务一致性需求\")]),_._v(\" ：很多web实时系统并不要求严格的数据库事务，对读一致性的要求很低， 有些场合对写一致性要求并不高。允许实现最终一致性。\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"数据库的写实时性和读实时性需求\")]),_._v(\"：对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出来这条数据的，但是对于很多web应用来说，并不要求这么高的实时性，比方说发一条消息之 后，过几秒乃至十几秒之后，我的订阅者才看到这条动态是完全可以接受的。\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"对复杂的SQL查询，特别是多表关联查询的需求\")]),_._v(\" ：任何大数据量的web系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的报表查询，特别是SNS类型的网站，从需求以及产品设计角度，就避免了这种情况的产生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL的功能被极大的弱化了。\")]),_._v(\" \"),t(\"h3\",{attrs:{id:\"base是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#base是什么\"}},[_._v(\"#\")]),_._v(\" BASE是什么\")]),_._v(\" \"),t(\"p\",[_._v(\"BASE就是为了解决关系数据库强一致性引起的的可用性降低问题而提出的方案。\")]),_._v(\" \"),t(\"p\",[_._v(\"BASE其实是下面三个术语的缩写：\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[_._v(\"基本可用（Basically Available）\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"软状态（Soft state）\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"最终一致（Eventually consistent）\")])])]),_._v(\" \"),t(\"p\",[_._v(\"它的思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。为什么这么说呢，缘由就在于大型系统往往由于地域分布和极高性能的要求，不可能采用分布式事务来完成这些指标，要想获得这些指标，我们必须采用另外一种方式来完成，这里BASE就是解决这个问题的办法\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"分布式+集群简介\")])]),_._v(\" \"),t(\"p\",[_._v(\"分布式系统（distributed system）\")]),_._v(\" \"),t(\"p\",[_._v(\"由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成。分布式系统是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。因此，网络和分布式系统之间的区别更多的在于高层软件（特别是操作系统），而不是硬件。分布式系统可以应用在在不同的平台上如：PC、工作站、局域网和广域网上等。\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"分布式计算的优点\")])]),_._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"可靠性（容错）\")]),_._v(\" ：分布式计算系统中的一个重要的优点是可靠性。一台服务器的系统崩溃并不影响到其余的服务器。\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"可扩展性\")]),_._v(\"：在分布式计算系统可以根据需要增加更多的机器。\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"资源共享\")]),_._v(\"：共享数据是必不可少的应用，如银行，预订系统。\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"灵活性\")]),_._v(\"：由于该系统是非常灵活的，它很容易安装，实施和调试新的服务。\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"更快的速度\")]),_._v(\"：分布式计算系统可以有多台计算机的计算能力，使得它比其他系统有更快的处理速度。\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"开放系统\")]),_._v(\"：由于它是开放的系统，本地或者远程都可以访问到该服务。\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"更高的性能\")]),_._v(\"：相较于集中式计算机网络集群可以提供更高的性能（及更好的性价比）。\")])])]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"分布式计算的缺点\")])]),_._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"故障排除\")]),_._v(\"：故障排除和诊断问题。\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"软件\")]),_._v(\"：更少的软件支持是分布式计算系统的主要缺点。\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"网络\")]),_._v(\"：网络基础设施的问题，包括：传输问题，高负载，信息丢失等。\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"安全性\")]),_._v(\"：开发系统的特性让分布式计算系统存在着数据的安全性和共享的风险等问题。\")])])])])}),[],!1,null,null,null);v.default=a.exports}}]);","extractedComments":[]}