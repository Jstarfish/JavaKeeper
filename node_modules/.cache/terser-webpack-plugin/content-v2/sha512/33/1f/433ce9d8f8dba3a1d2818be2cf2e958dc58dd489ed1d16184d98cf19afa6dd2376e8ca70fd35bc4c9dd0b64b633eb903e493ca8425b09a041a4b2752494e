{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[237],{760:function(s,a,t){\"use strict\";t.r(a);var n=t(6),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"类加载子系统\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类加载子系统\"}},[s._v(\"#\")]),s._v(\" 类加载子系统\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"带着问题，尤其是面试问题的学习才是最高效的。加油，奥利给！\")]),s._v(\" \"),t(\"p\",[s._v(\"点赞+收藏 就学会系列，文章收录在 GitHub \"),t(\"a\",{attrs:{href:\"https://github.com/Jstarfish/JavaKeeper\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"JavaKeeper\"),t(\"OutboundLink\")],1),s._v(\" ，N线互联网开发必备技能兵器谱\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"直击面试\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#直击面试\"}},[s._v(\"#\")]),s._v(\" 直击面试\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"看你简历写得熟悉 JVM，那你说说类的加载过程吧？\")]),s._v(\" \"),t(\"li\",[s._v(\"我们可以自定义一个 String 类来使用吗？\")]),s._v(\" \"),t(\"li\",[s._v(\"什么是类加载器，类加载器有哪些？这些类加载器都加载哪些文件？\")]),s._v(\" \"),t(\"li\",[s._v(\"多线程的情况下，类的加载为什么不会出现重复加载的情况？\")]),s._v(\" \"),t(\"li\",[s._v(\"什么是双亲委派机制？它有啥优势？可以打破这种机制吗？\")])]),s._v(\" \"),t(\"hr\"),s._v(\" \"),t(\"h2\",{attrs:{id:\"类加载子系统-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类加载子系统-2\"}},[s._v(\"#\")]),s._v(\" 类加载子系统\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/0082zybply1gbzlnjzayoj30u00wpwn7.jpg\",alt:\"\"}})]),s._v(\" \"),t(\"h2\",{attrs:{id:\"类加载机制概念\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类加载机制概念\"}},[s._v(\"#\")]),s._v(\" 类加载机制概念\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Java 虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是虚拟机的加载机制\")]),s._v(\"。Class 文件由类装载器装载后，在 JVM 中将形成一份描述 Class 结构的元信息对象，通过该元信息对象可以获知 Class 的结构信息：如构造函数，属性和方法等，Java 允许用户借由这个 Class 相关的元信息对象间接调用 Class 对象的功能，这里就是我们经常能见到的 Class 类。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"类加载子系统作用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类加载子系统作用\"}},[s._v(\"#\")]),s._v(\" 类加载子系统作用\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"类加载子系统负责从文件系统或者网络中加载 class 文件，class 文件在文件开头有特定的文件标识（0xCAFEBABE）\")]),s._v(\" \"),t(\"li\",[s._v(\"ClassLoader 只负责 class 文件的加载。至于它是否可以运行，则由 Execution Engine 决定\")]),s._v(\" \"),t(\"li\",[s._v(\"加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是class文件中常量池部分的内存映射）\")]),s._v(\" \"),t(\"li\",[s._v(\"Class 对象是存放在堆区的\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"类加载器-classloader-角色\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类加载器-classloader-角色\"}},[s._v(\"#\")]),s._v(\" 类加载器 ClassLoader 角色\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"class file 存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到 JVM 当中来根据这个文件实例化出 n 个一模一样的实例\")]),s._v(\" \"),t(\"li\",[s._v(\"class file 加载到 JVM 中，被称为 DNA 元数据模板，放在方法区\")]),s._v(\" \"),t(\"li\",[s._v(\"在 .calss 文件 -> JVM -> 最终成为元数据模板，此过程就要一个运输工具（类装载器），扮演一个快递员的角色\")])]),s._v(\" \"),t(\"hr\"),s._v(\" \"),t(\"h2\",{attrs:{id:\"类加载过程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类加载过程\"}},[s._v(\"#\")]),s._v(\" 类加载过程\")]),s._v(\" \"),t(\"p\",[s._v(\"类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：\"),t(\"strong\",[s._v(\"加载、验证、准备、解析、初始化、使用和卸载\")]),s._v(\"七个阶段。(验证、准备和解析又统称为连接，为了支持 Java 语言的\"),t(\"strong\",[s._v(\"运行时绑定\")]),s._v(\"，所以\"),t(\"strong\",[s._v(\"解析阶段也可以是在初始化之后进行的\")]),s._v(\"。以上顺序都只是说开始的顺序，实际过程中是交叉的混合式进行的，加载过程中可能就已经开始验证了)\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/0082zybply1gbnxhplvkrj30yi0d60ty.jpg\",alt:\"jvm-class-load\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_1-加载-loading\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-加载-loading\"}},[s._v(\"#\")]),s._v(\" 1. 加载（Loading）：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"通过一个类的全限定名获取定义此类的二进制字节流（简单点说就是找到文件系统中/jar 包中/或存在于任何地方的“\"),t(\"code\",[s._v(\"class 文件\")]),s._v(\"”。 如果找不到二进制表示形式，则会抛出 \"),t(\"code\",[s._v(\"NoClassDefFound\")]),s._v(\" 错误。）\")]),s._v(\" \"),t(\"li\",[s._v(\"将这个字节流所代表的的静态存储结构转化为方法区的运行时数据结构\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"在内存中生成一个代表这个类的 \"),t(\"code\",[s._v(\"java.lang.Class\")]),s._v(\" 对象\")]),s._v(\"，作为方法区这个类的各种数据的访问入口\")])]),s._v(\" \"),t(\"p\",[s._v(\"加载 \"),t(\"code\",[s._v(\".class\")]),s._v(\" 文件的方式\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"从本地系统中直接加载\")]),s._v(\" \"),t(\"li\",[s._v(\"通过网络获取，典型场景：Web Applet\")]),s._v(\" \"),t(\"li\",[s._v(\"从 zip 压缩文件中读取，成为日后 jar、war 格式的基础\")]),s._v(\" \"),t(\"li\",[s._v(\"运行时计算生成，使用最多的是：动态代理技术\")]),s._v(\" \"),t(\"li\",[s._v(\"由其他文件生成，比如 JSP 应用\")]),s._v(\" \"),t(\"li\",[s._v(\"从专有数据库提取 .class 文件，比较少见\")]),s._v(\" \"),t(\"li\",[s._v(\"从加密文件中获取，典型的防 Class 文件被反编译的保护措施\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_2-连接-linking\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-连接-linking\"}},[s._v(\"#\")]),s._v(\" 2. 连接（Linking）\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"验证-verify\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#验证-verify\"}},[s._v(\"#\")]),s._v(\" 验证（Verify）\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"目的在于确保 Class 文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全\")]),s._v(\" \"),t(\"li\",[s._v(\"主要包括四种验证，\"),t(\"strong\",[s._v(\"文件格式验证，元数据验证，字节码验证，符号引用验证\")])])]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"校验过程检查 classfile 的语义，判断常量池中的符号，并执行类型检查， 主要目的是判断字节码的合法性，比如 magic number, 对版本号进行验证。 这些检查过程中可能会抛出 \"),t(\"code\",[s._v(\"VerifyError\")]),s._v(\"， \"),t(\"code\",[s._v(\"ClassFormatError\")]),s._v(\" 或 \"),t(\"code\",[s._v(\"UnsupportedClassVersionError\")]),s._v(\"。\")]),s._v(\" \"),t(\"p\",[s._v(\"因为 classfile 的验证属是链接阶段的一部分，所以这个过程中可能需要加载其他类，在某个类的加载过程中，JVM 必须加载其所有的超类和接口。\")]),s._v(\" \"),t(\"p\",[s._v(\"如果类层次结构有问题（例如，该类是自己的超类或接口,死循环了），则 JVM 将抛出 \"),t(\"code\",[s._v(\"ClassCircularityError\")]),s._v(\"。 而如果实现的接口并不是一个 interface，或者声明的超类是一个 interface，也会抛出 \"),t(\"code\",[s._v(\"IncompatibleClassChangeError\")]),s._v(\"。\")])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"准备-prepare\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#准备-prepare\"}},[s._v(\"#\")]),s._v(\" 准备（Prepare）\")]),s._v(\" \"),t(\"p\",[s._v(\"然后进入准备阶段，这个阶段将会创建静态字段, 并将其初始化为标准默认值(比如\"),t(\"code\",[s._v(\"null\")]),s._v(\"或者\"),t(\"code\",[s._v(\"0 值\")]),s._v(\")，并分配方法表，即在方法区中分配这些变量所使用的内存空间。\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"为\"),t(\"strong\",[s._v(\"类变量\")]),s._v(\"分配内存并且设置该类变量的默认初始值，即\"),t(\"strong\",[s._v(\"零值\")])]),s._v(\" \"),t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[s._v(\"数据类型\")]),s._v(\" \"),t(\"th\",[s._v(\"零值\")])])]),s._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[s._v(\"int\")]),s._v(\" \"),t(\"td\",[s._v(\"0\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"long\")]),s._v(\" \"),t(\"td\",[s._v(\"0L\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"short\")]),s._v(\" \"),t(\"td\",[s._v(\"(short)0\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"char\")]),s._v(\" \"),t(\"td\",[s._v(\"'\\\\u0000'\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"byte\")]),s._v(\" \"),t(\"td\",[s._v(\"(byte)0\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"boolean\")]),s._v(\" \"),t(\"td\",[s._v(\"false\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"float\")]),s._v(\" \"),t(\"td\",[s._v(\"0.0f\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"double\")]),s._v(\" \"),t(\"td\",[s._v(\"0.0d\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"reference\")]),s._v(\" \"),t(\"td\",[s._v(\"null\")])])])])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"这里不包含用 final 修饰的 static，因为 final 在编译的时候就会分配了，准备阶段会显示初始化\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"这里\"),t(\"strong\",[s._v(\"不会为实例变量分配初始化\")]),s._v(\"，类变量会分配在\"),t(\"strong\",[s._v(\"方法区\")]),s._v(\"中，而实例变量是会在对象实例化时随着对象一起分配到 Java 堆中\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" i \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//变量i在准备阶只会被赋值为0，初始化时才会被赋值为1\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" j \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//这里被final修饰的变量j，直接成为常量，编译时就会被分配为2\")]),s._v(\"\\n\")])])])])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"解析-resolve\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#解析-resolve\"}},[s._v(\"#\")]),s._v(\" 解析（Resolve）\")]),s._v(\" \"),t(\"p\",[s._v(\"然后进入可选的解析符号引用阶段。 也就是解析常量池，主要有以下四种：类或接口的解析、字段解析、类方法解析、接口方法解析。\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"将常量池内的符号引用转换为直接引用的过程\")]),s._v(\" \"),t(\"li\",[s._v(\"事实上，解析操作往往会伴随着 JVM 在执行完初始化之后再执行\")]),s._v(\" \"),t(\"li\",[s._v(\"符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《Java虚拟机规范》的 Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄（如果有了直接引用，那引用的目标必定在堆中存在）\")]),s._v(\" \"),t(\"li\",[s._v(\"解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的\"),t(\"code\",[s._v(\"CONSTANT_Class_info\")]),s._v(\"、\"),t(\"code\",[s._v(\"CONSTANT_Fieldref_info\")]),s._v(\"、\"),t(\"code\",[s._v(\"CONSTANT_Methodref_info\")]),s._v(\"等\")])]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[t(\"a\",{attrs:{href:\"https://www.zhihu.com/question/30300585\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"《JVM里的符号引用如何存储？》\"),t(\"OutboundLink\")],1)])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_3-初始化-initialization\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-初始化-initialization\"}},[s._v(\"#\")]),s._v(\" 3. 初始化（Initialization）\")]),s._v(\" \"),t(\"p\",[s._v(\"JVM 规范明确规定, 必须在类的首次“主动使用”时才能执行类初始化。\")]),s._v(\" \"),t(\"p\",[s._v(\"初始化的过程包括执行：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"类构造器方法\")]),s._v(\" \"),t(\"li\",[s._v(\"static 静态变量赋值语句\")]),s._v(\" \"),t(\"li\",[s._v(\"static 静态代码块\")])]),s._v(\" \"),t(\"p\",[s._v(\"如果是一个子类进行初始化会先对其父类进行初始化，保证其父类在子类之前进行初始化。所以其实在 java 中初始化一个类，那么必然先初始化过 \"),t(\"code\",[s._v(\"java.lang.Object\")]),s._v(\" 类，因为所有的 java 类都继承自 java.lang.Object。\")]),s._v(\" \"),t(\"blockquote\",[t(\"ul\",[t(\"li\",[s._v(\"初始化阶段就是执行\"),t(\"strong\",[s._v(\"类构造器方法\")]),s._v(\" \"),t(\"code\",[s._v(\"<clinit>()\")]),s._v(\" 的过程\")]),s._v(\" \"),t(\"li\",[s._v(\"此方法不需要定义，是 javac 编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来\")]),s._v(\" \"),t(\"li\",[s._v(\"构造器方法中指令按语句在源文件中出现的顺序执行\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"<clinit>()\")]),s._v(\" 不同于类的构造器（构造器是虚拟机视角下的 \"),t(\"code\",[s._v(\"<init>()\")]),s._v(\"）\")]),s._v(\" \"),t(\"li\",[s._v(\"若该类具有父类，JVM 会保证子类的 \"),t(\"code\",[s._v(\"<clinit>()\")]),s._v(\" 执行前，父类的 \"),t(\"code\",[s._v(\"<clinit>()\")]),s._v(\" 已经执行完毕\")]),s._v(\" \"),t(\"li\",[s._v(\"虚拟机必须保证一个类的 \"),t(\"code\",[s._v(\"<clinit>()\")]),s._v(\" 方法在多线程下被同步加锁\")])])]),s._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassInitTest\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" num1 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"30\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    num1 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    num2 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"     \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//num2写在定义变量之前，为什么不会报错呢？？\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"num2\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//這裡直接打印可以吗？ 报错，非法的前向引用，可以赋值，但不可调用\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" num2 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"20\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//num2在准备阶段就被设置了默认初始值0，初始化阶段又将10改为20\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"main\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" args\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"num1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//10\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"num2\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//20\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])])]),t(\"h2\",{attrs:{id:\"类加载时机\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类加载时机\"}},[s._v(\"#\")]),s._v(\" 类加载时机\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"java类何时会被加载\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java类何时会被加载\"}},[s._v(\"#\")]),s._v(\" Java类何时会被加载\")]),s._v(\" \"),t(\"p\",[s._v(\"Java 程序对类的使用方式分为：主动使用和被动使用。虚拟机规范规定\"),t(\"strong\",[s._v(\"有且只有 5 种情况必须立即对类进行“初始化”\")]),s._v(\"，即类的主动使用。\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"创建类的实例、访问某个类或接口的静态变量，或者对该静态变量赋值、调用类的静态方法（即遇到 \"),t(\"code\",[s._v(\"new\")]),s._v(\"、\"),t(\"code\",[s._v(\"getstatic\")]),s._v(\"、\"),t(\"code\",[s._v(\"putstatic\")]),s._v(\"、\"),t(\"code\",[s._v(\"invokestatic\")]),s._v(\" 这四条字节码指令时）\")]),s._v(\" \"),t(\"li\",[s._v(\"反射\")]),s._v(\" \"),t(\"li\",[s._v(\"初始化一个类的子类\")]),s._v(\" \"),t(\"li\",[s._v(\"Java 虚拟机启动时被标明为启动类的类\")]),s._v(\" \"),t(\"li\",[s._v(\"JDK7 开始提供的动态语言支持：\"),t(\"code\",[s._v(\"java.lang.invoke.MethodHandle\")]),s._v(\" 实例的解析结果，\"),t(\"code\",[s._v(\"REF_getStatic\")]),s._v(\"、\"),t(\"code\",[s._v(\"REF_putStatic\")]),s._v(\"、\"),t(\"code\",[s._v(\"REF_invokeStatic\")]),s._v(\" 句柄对应的类没有初始化，则初始化\")])]),s._v(\" \"),t(\"p\",[s._v(\"除以上五种情况，其他使用 Java 类的方式被看作是对\"),t(\"strong\",[s._v(\"类的被动使用\")]),s._v(\"，都不\"),t(\"strong\",[s._v(\"会导致类的初始化\")]),s._v(\"。\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"JVM 规范枚举了下述多种触发情况：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"当虚拟机启动时，初始化用户指定的主类，就是启动执行的 main 方法所在的类；\")]),s._v(\" \"),t(\"li\",[s._v(\"当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类，就是 new 一个类的时候要初始化；\")]),s._v(\" \"),t(\"li\",[s._v(\"当遇到调用静态方法的指令时，初始化该静态方法所在的类；\")]),s._v(\" \"),t(\"li\",[s._v(\"当遇到访问静态字段的指令时，初始化该静态字段所在的类；\")]),s._v(\" \"),t(\"li\",[s._v(\"子类的初始化会触发父类的初始化；\")]),s._v(\" \"),t(\"li\",[s._v(\"如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；\")]),s._v(\" \"),t(\"li\",[s._v(\"使用反射 API 对某个类进行反射调用时，初始化这个类，其实跟前面一样，反射调用要么是已经有实例了，要么是静态方法，都需要初始化；\")]),s._v(\" \"),t(\"li\",[s._v(\"当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。\")])]),s._v(\" \"),t(\"p\",[s._v(\"同时以下几种情况不会执行类初始化：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。\")]),s._v(\" \"),t(\"li\",[s._v(\"定义对象数组，不会触发该类的初始化。\")]),s._v(\" \"),t(\"li\",[s._v(\"常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。\")]),s._v(\" \"),t(\"li\",[s._v(\"通过类名获取 Class 对象，不会触发类的初始化，Hello.class 不会让 Hello 类初始化。\")]),s._v(\" \"),t(\"li\",[s._v(\"通过 Class.forName 加载指定类时，如果指定参数 initialize 为 false 时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。Class.forName(“jvm.Hello”)默认会加载 Hello 类。\")]),s._v(\" \"),t(\"li\",[s._v(\"通过 ClassLoader 默认的 loadClass 方法，也不会触发初始化动作（加载了，但是不初始化）。\")])]),s._v(\" \"),t(\"p\",[s._v(\"示例: 诸如 Class.forName(), classLoader.loadClass() 等 Java API, 反射API, 以及 JNI_FindClass 都可以启动类加载。 JVM 本身也会进行类加载。 比如在 JVM 启动时加载核心类，java.lang.Object, java.lang.Thread 等等。\")])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"eg\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#eg\"}},[s._v(\"#\")]),s._v(\" eg:\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"NotInitialization\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"main\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" args\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" \\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//只输出SupperClass int 123,不会输出SubClass init\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//对于静态字段，只有直接定义这个字段的类才会被初始化\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"SubClass\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"value\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"SuperClass\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"SupperClass init\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" value \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"123\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"SubClass\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"extends\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"SuperClass\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"SubClass init\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])])]),t(\"hr\"),s._v(\" \"),t(\"h2\",{attrs:{id:\"类加载器\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类加载器\"}},[s._v(\"#\")]),s._v(\" 类加载器\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"JVM 支持两种类型的类加载器，分别为\"),t(\"strong\",[s._v(\"引导类加载器\")]),s._v(\"（Bootstrap ClassLoader）和\"),t(\"strong\",[s._v(\"自定义类加载器\")]),s._v(\"（User-Defined ClassLoader）\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是 Java 虚拟机规范却没有这么定义，而是将所有派生于抽象类 ClassLoader 的类加载器都划分为自定义类加载器\")])])]),s._v(\" \"),t(\"p\",[s._v(\"系统自带的类加载器分为三种：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"启动类加载器（BootstrapClassLoader）\")]),s._v(\" \"),t(\"li\",[s._v(\"扩展类加载器（ExtClassLoader）\")]),s._v(\" \"),t(\"li\",[s._v(\"应用类加载器（AppClassLoader）\")])]),s._v(\" \"),t(\"p\",[s._v(\"一般启动类加载器是由 JVM 内部实现的，在 Java 的 API 里无法拿到，但是我们可以侧面看到和影响它。后 2 种类加载器在 Oracle Hotspot JVM 里，都是在中\"),t(\"code\",[s._v(\"sun.misc.Launcher\")]),s._v(\"定义的，扩展类加载器和应用类加载器一般都继承自\"),t(\"code\",[s._v(\"URLClassLoader\")]),s._v(\"类，这个类也默认实现了从各种不同来源加载 class 字节码转换成 Class 的方法。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/e6c9d24ely1h35g2zl2pdj223y0u042i.jpg\",alt:\"classloader\"}})]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"不同类加载器看似是继承(Inheritance)关系，实际是采用组合关系来复用父类加载器的相关代码\")])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"启动类加载器-引导类加载器-bootstrap-classloader\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#启动类加载器-引导类加载器-bootstrap-classloader\"}},[s._v(\"#\")]),s._v(\" 启动类加载器（引导类加载器，Bootstrap ClassLoader）\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"这个类加载使用 C/C++ 语言实现，嵌套在 JVM 内部\")]),s._v(\" \"),t(\"li\",[s._v(\"它用来加载 Java 的核心库（\"),t(\"code\",[s._v(\"JAVA_HOME/jre/lib/rt.jar\")]),s._v(\"、\"),t(\"code\",[s._v(\"resource.jar\")]),s._v(\"或\"),t(\"code\",[s._v(\"sun.boot.class.path\")]),s._v(\"路径下的内容），用于提供 JVM 自身需要的类\")]),s._v(\" \"),t(\"li\",[s._v(\"并不继承自 \"),t(\"code\",[s._v(\"java.lang.ClassLoader\")]),s._v(\"，没有父加载器\")]),s._v(\" \"),t(\"li\",[s._v(\"加载扩展类和应用程序类加载器，并指定为他们的父类加载器\")]),s._v(\" \"),t(\"li\",[s._v(\"出于安全考虑，Bootstrap 启动类加载器只加载名为 java、Javax、sun 等开头的类\")])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"扩展类加载器-extension-classloader\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#扩展类加载器-extension-classloader\"}},[s._v(\"#\")]),s._v(\" 扩展类加载器（Extension ClassLoader）\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"Java 语言编写，由 \"),t(\"code\",[s._v(\"sun.misc.Launcher$ExtClassLoader\")]),s._v(\" 实现\")]),s._v(\" \"),t(\"li\",[s._v(\"派生于 ClassLoader\")]),s._v(\" \"),t(\"li\",[s._v(\"父类加载器为启动类加载器\")]),s._v(\" \"),t(\"li\",[s._v(\"从 \"),t(\"code\",[s._v(\"java.ext.dirs\")]),s._v(\" 系统属性所指定的目录中加载类库，或从 JDK 的安装目录的 \"),t(\"code\",[s._v(\"jre/lib/ext\")]),s._v(\" 子目录（扩展目录）下加载类库。如果用户创建的 JAR 放在此目录下，也会自动由扩展类加载器加载\")])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"应用程序类加载器-也叫系统类加载器-appclassloader\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应用程序类加载器-也叫系统类加载器-appclassloader\"}},[s._v(\"#\")]),s._v(\" 应用程序类加载器（也叫系统类加载器，AppClassLoader）\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"Java 语言编写，由 \"),t(\"code\",[s._v(\"sun.misc.Lanucher$AppClassLoader\")]),s._v(\" 实现\")]),s._v(\" \"),t(\"li\",[s._v(\"派生于 ClassLoader\")]),s._v(\" \"),t(\"li\",[s._v(\"父类加载器为扩展类加载器\")]),s._v(\" \"),t(\"li\",[s._v(\"它负责加载环境变量 \"),t(\"code\",[s._v(\"classpath\")]),s._v(\" 或系统属性 \"),t(\"code\",[s._v(\"java.class.path\")]),s._v(\" 指定路径下的类库\")]),s._v(\" \"),t(\"li\",[s._v(\"该类加载是\"),t(\"strong\",[s._v(\"程序中默认的类加载器\")]),s._v(\"，一般来说，Java 应用的类都是由它来完成加载的\")]),s._v(\" \"),t(\"li\",[s._v(\"通过 \"),t(\"code\",[s._v(\"ClassLoader#getSystemClassLoader()\")]),s._v(\" 方法可以获取到该类加载器\")])]),s._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassLoaderTest\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"main\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" args\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//获取系统类加载器\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassLoader\")]),s._v(\" systemClassLoader \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassLoader\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getSystemClassLoader\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"systemClassLoader\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//sun.misc.Launcher$AppClassLoader@135fbaa4\")]),s._v(\"\\n\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//获取其上层：扩展类加载器\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassLoader\")]),s._v(\" extClassLoader \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" systemClassLoader\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getParent\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"extClassLoader\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//sun.misc.Launcher$ExtClassLoader@2503dbd3\")]),s._v(\"\\n\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//再获取其上层：获取不到引导类加载器\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassLoader\")]),s._v(\" bootstrapClassLoader \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" extClassLoader\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getParent\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"bootstrapClassLoader\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"     \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//null\")]),s._v(\"\\n\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//对于用户自定义类来说，默认使用系统类加载器进行加载，输出和systemClassLoader一样\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassLoader\")]),s._v(\" classLoader \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassLoaderTest\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getClassLoader\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"classLoader\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//sun.misc.Launcher$AppClassLoader@135fbaa4\")]),s._v(\"\\n\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//String 类使用引导类加载器进行加载。Java的核心类库都使用引导类加载器进行加载，所以也获取不到\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassLoader\")]),s._v(\" classLoader1 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getClassLoader\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"classLoader1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//null\")]),s._v(\"\\n\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//获取BootstrapClassLoader可以加载的api的路径\")]),s._v(\"\\n        URL\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" urls \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" sun\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"misc\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Launcher\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getBootstrapClassPath\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getURLs\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"for\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"URL url \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\":\")]),s._v(\" urls\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"url\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"toExternalForm\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])])]),t(\"h4\",{attrs:{id:\"用户自定义类加载器\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用户自定义类加载器\"}},[s._v(\"#\")]),s._v(\" 用户自定义类加载器\")]),s._v(\" \"),t(\"p\",[s._v(\"在 Java 的日常应用程序开发中，类的加载几乎是由 3 种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"如果用户自定义了类加载器，则自定义类加载器都以应用类加载器作为父加载器。应用类加载器的父类加载器为扩展类加载器。这些类加载器是有层次关系的，启动加载器又叫根加载器，是扩展加载器的父加载器，但是直接从 ExClassLoader 里拿不到它的引用，同样会返回 null。\")])]),s._v(\" \"),t(\"h5\",{attrs:{id:\"为什么要自定义类加载器\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要自定义类加载器\"}},[s._v(\"#\")]),s._v(\" 为什么要自定义类加载器？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"隔离加载类\")]),s._v(\" \"),t(\"li\",[s._v(\"修改类加载的方式\")]),s._v(\" \"),t(\"li\",[s._v(\"扩展加载源（可以从数据库、云端等指定来源加载类）\")]),s._v(\" \"),t(\"li\",[s._v(\"防止源码泄露（Java 代码容易被反编译，如果加密后，自定义加载器加载类的时候就可以先解密，再加载）\")])]),s._v(\" \"),t(\"h5\",{attrs:{id:\"用户自定义加载器实现步骤\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用户自定义加载器实现步骤\"}},[s._v(\"#\")]),s._v(\" 用户自定义加载器实现步骤\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"开发人员可以通过继承抽象类 \"),t(\"code\",[s._v(\"java.lang.ClassLoader\")]),s._v(\" 类的方式，实现自己的类加载器，以满足一些特殊的需求\")]),s._v(\" \"),t(\"li\",[s._v(\"在 JDK1.2 之前，在自定义类加载器时，总会去继承 ClassLoader 类并重写 loadClass() 方法，从而实现自定义的类加载类，但是 JDK1.2 之后已经不建议用户去覆盖 \"),t(\"code\",[s._v(\"loadClass()\")]),s._v(\" 方式，而是建议把自定义的类加载逻辑写在 \"),t(\"code\",[s._v(\"findClass()\")]),s._v(\" 方法中\")]),s._v(\" \"),t(\"li\",[s._v(\"编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承 URLClassLoader 类，这样就可以避免自己去编写 findClass() 方法及其获取字节码流的方式，使自定义类加载器编写更加简洁\")])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"eg\")]),s._v(\":\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"比如我们试着实现一个可以用来处理简单加密的字节码的类加载器，用来保护我们的 class 字节码文件不被使用者直接拿来破解\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Hello\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Hello Class Initialized!\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])])]),t(\"p\",[s._v(\"这个 Hello 类非常简单，就是在自己被初始化的时候，打印出来一句“Hello Class Initialized!”。假设这个类的内容非常重要，我们不想把编译到得到的 Hello.class 给别人，但是我们还是想别人可以调用或执行这个类，应该怎么办呢？一个简单的思路是，我们把这个类的 class 文件二进制作为字节流先加密一下，然后尝试通过自定义的类加载器来加载加密后的数据。为了演示简单，我们使用 jdk 自带的 Base64 算法，把字节码加密成一个文本。在下面这个例子里，我们实现一个 HelloClassLoader，它继承自 ClassLoader 类，但是我们希望它通过我们提供的一段 Base64 字符串，来还原出来，并执行我们的 Hello 类里的打印一串字符串的逻辑。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"HelloClassLoader\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"extends\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassLoader\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"main\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" args\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"try\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"HelloClassLoader\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"findClass\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"jvm.Hello\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"newInstance\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 加载并初始化Hello类\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"catch\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassNotFoundException\")]),s._v(\" e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"printStackTrace\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"catch\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"IllegalAccessException\")]),s._v(\" e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"printStackTrace\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"catch\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"InstantiationException\")]),s._v(\" e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"printStackTrace\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Override\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"protected\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Class\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"?\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"findClass\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"throws\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ClassNotFoundException\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" helloBase64 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"yv66vgAAADQAHwoABgARCQASABMIABQKABUAFgcAFwcAGAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQALTGp2bS9IZWxsbzsBAAg8Y2xpbml0PgEAClNvdXJjZUZpbGUBAApIZWxsby5qYXZhDAAHAAgHABkMABoAGwEAGEhlbGxvIENsYXNzIEluaXRpYWxpemVkIQcAHAwAHQAeAQAJanZtL0hlbGxvAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgAAAAAAAgABAAcACAABAAkAAAAvAAEAAQAAAAUqtwABsQAAAAIACgAAAAYAAQAAAAMACwAAAAwAAQAAAAUADAANAAAACAAOAAgAAQAJAAAAJQACAAAAAAAJsgACEgO2AASxAAAAAQAKAAAACgACAAAABgAIAAcAAQAPAAAAAgAQ\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"byte\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" bytes \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"decode\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"helloBase64\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"defineClass\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"bytes\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"bytes\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"length\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"byte\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"decode\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" base64\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Base64\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getDecoder\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"decode\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"base64\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])])]),t(\"p\",[s._v(\"直接执行这个类：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-shell extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[t(\"code\",[s._v(\"$ java jvm.HelloClassLoader Hello Class Initialized\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"!\")]),s._v(\"\\n\")])])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"classloader-常用方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#classloader-常用方法\"}},[s._v(\"#\")]),s._v(\" ClassLoader 常用方法\")]),s._v(\" \"),t(\"p\",[s._v(\"ClassLoader 类，是一个抽象类，其后所有的类加载器都继承自 ClassLoader（不包括启动类加载器）\")]),s._v(\" \"),t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[s._v(\"方法\")]),s._v(\" \"),t(\"th\",[s._v(\"描述\")])])]),s._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[s._v(\"getParent()\")]),s._v(\" \"),t(\"td\",[s._v(\"返回该类加载器的超类加载器\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"loadClass(String name)\")]),s._v(\" \"),t(\"td\",[s._v(\"加载名称为name的类，返回java.lang.Class类的实例\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"findClass(String name)\")]),s._v(\" \"),t(\"td\",[s._v(\"查找名称为name的类，返回java.lang.Class类的实例\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"findLoadedClass(String name)\")]),s._v(\" \"),t(\"td\",[s._v(\"查找名称为name的已经被加载过的类，返回java.lang.Class类的实例\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"defineClass(String name, byte[] b, int off, int len)\")]),s._v(\" \"),t(\"td\",[s._v(\"把字节数组b中内容转换为一个Java类，返回java.lang.Class类的实例\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"resolveClass(Class<?> c)\")]),s._v(\" \"),t(\"td\",[s._v(\"连接指定的一个Java类\")])])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"对类加载器的引用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对类加载器的引用\"}},[s._v(\"#\")]),s._v(\" 对类加载器的引用\")]),s._v(\" \"),t(\"p\",[s._v(\"JVM 必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么 JVM 会\"),t(\"strong\",[s._v(\"将这个类加载器的一个引用作为类型信息的一部分保存在方法区中\")]),s._v(\"。当解析一个类型到另一个类型的引用的时候，JVM 需要保证这两个类型的类加载器是相同的。\")]),s._v(\" \"),t(\"hr\"),s._v(\" \"),t(\"h2\",{attrs:{id:\"双亲委派机制\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#双亲委派机制\"}},[s._v(\"#\")]),s._v(\" 双亲委派机制\")]),s._v(\" \"),t(\"p\",[s._v(\"Java 虚拟机对 class 文件采用的是\"),t(\"mark\",[t(\"strong\",[s._v(\"按需加载\")])]),s._v(\"的方式，也就是说当需要使用该类的时候才会将它的 class 文件加载到内存生成 class 对象。而且加载某个类的 class 文件时，Java 虚拟机采用的是双亲委派模式，即把请求交给父类处理，它是一种任务委派模式。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"工作过程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#工作过程\"}},[s._v(\"#\")]),s._v(\" 工作过程\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；\")]),s._v(\" \"),t(\"li\",[s._v(\"如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；\")]),s._v(\" \"),t(\"li\",[s._v(\"如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/0082zybply1gbo5vegwfuj30rs0lv45n.jpg\",alt:\"\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"优势\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#优势\"}},[s._v(\"#\")]),s._v(\" 优势\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"mark\",[s._v(\"避免类的重复加载\")]),s._v(\"，JVM 中区分不同类，不仅仅是根据类名，相同的 class 文件被不同的 ClassLoader 加载就属于两个不同的类（比如，Java中的Object类，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，如果不采用双亲委派模型，由各个类加载器自己去加载的话，系统中会存在多种不同的 Object 类）\")]),s._v(\" \"),t(\"li\",[t(\"mark\",[s._v(\"保护程序安全，防止核心 API 被随意篡改\")]),s._v(\"，避免用户自己编写的类动态替换 Java 的一些核心类，比如我们自定义类：\"),t(\"code\",[s._v(\"java.lang.String\")])])]),s._v(\" \"),t(\"p\",[s._v(\"在 JVM 中表示两个 class 对象是否为同一个类存在两个必要条件：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"类的完整类名必须一致，包括包名\")]),s._v(\" \"),t(\"li\",[s._v(\"加载这个类的 ClassLoader（指ClassLoader实例对象）必须相同\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"沙箱安全机制\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#沙箱安全机制\"}},[s._v(\"#\")]),s._v(\" 沙箱安全机制\")]),s._v(\" \"),t(\"p\",[s._v(\"如果我们自定义 String 类，但是在加载自定义 String 类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载 jdk 自带的文件（rt.jar包中 \"),t(\"code\",[s._v(\"java\\\\lang\\\\String.class\")]),s._v(\"），报错信息说没有 main 方法就是因为加载的是\"),t(\"code\",[s._v(\"rt.jar\")]),s._v(\"包中的 String 类。这样就可以保证对 java 核心源代码的保护，这就是简单的沙箱安全机制。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"破坏双亲委派模型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#破坏双亲委派模型\"}},[s._v(\"#\")]),s._v(\" 破坏双亲委派模型\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"双亲委派模型并不是一个强制性的约束模型，而是 Java 设计者推荐给开发者的类加载器实现方式，可以“被破坏”，只要我们自定义类加载器，\"),t(\"strong\",[s._v(\"重写 \"),t(\"code\",[s._v(\"loadClass()\")]),s._v(\" 方法\")]),s._v(\"，指定新的加载逻辑就破坏了，重写 \"),t(\"code\",[s._v(\"findClass()\")]),s._v(\" 方法不会破坏双亲委派。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"双亲委派模型有一个问题：顶层 ClassLoader，无法加载底层 ClassLoader 的类。典型例子 JNDI、JDBC，所以加入了线程上下文类加载器（Thread Context ClassLoader），可以通过 \"),t(\"code\",[s._v(\"Thread.setContextClassLoaser()\")]),s._v(\"设置该类加载器，然后顶层 ClassLoader 再使用 \"),t(\"code\",[s._v(\"Thread.getContextClassLoader()\")]),s._v(\" 获得底层的 ClassLoader 进行加载。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"Tomcat 中使用了自定 ClassLoader，并且也破坏了双亲委托机制。每个应用使用 WebAppClassloader 进行单独加载，他首先使用 WebAppClassloader 进行类加载，如果加载不了再委托父加载器去加载，这样可以保证每个应用中的类不冲突。每个 tomcat 中可以部署多个项目，每个项目中存在很多相同的 class 文件（很多相同的jar包），他们加载到 jvm 中可以做到互不干扰。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/e6c9d24ely1h35ghbt9uej20ib0g4abi.jpg\",alt:\"\"}})])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"利用破坏双亲委派来实现\"),t(\"strong\",[s._v(\"代码热替换\")]),s._v(\"（每次修改类文件，不需要重启服务）。因为一个 Class 只能被一个 ClassLoader 加载一次，否则会报 \"),t(\"code\",[s._v(\"java.lang.LinkageError\")]),s._v(\"。当我们想要实现代码热部署时，可以每次都 new 一个自定义的 ClassLoader 来加载新的 Class文件。JSP 的实现动态修改就是使用此特性实现。\")])])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"如何替换-jdk-的类\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何替换-jdk-的类\"}},[s._v(\"#\")]),s._v(\" 如何替换 JDK 的类\")]),s._v(\" \"),t(\"p\",[s._v(\"如何替换 JDK 中的类？比如，我们现在就拿 HashMap为例。\")]),s._v(\" \"),t(\"p\",[s._v(\"当 Java 的原生 API 不能满足需求时，比如我们要修改 HashMap 类，就必须要使用到 Java 的 endorsed 技术。我们需要将自己的 HashMap 类，打包成一个 jar 包，然后放到 -Djava.endorsed.dirs 指定的目录中。注意类名和包名，应该和 JDK 自带的是一样的。但是，java.lang 包下面的类除外，因为这些都是特殊保护的。\")]),s._v(\" \"),t(\"p\",[s._v(\"因为我们上面提到的双亲委派机制，是无法直接在应用中替换 JDK 的原生类的。但是，有时候又不得不进行一下增强、替换，比如你想要调试一段代码，或者比 Java 团队早发现了一个 Bug。所以，Java 提供了 endorsed 技术，用于替换这些类。这个目录下的 jar 包，会比 rt.jar 中的文件，优先级更高，可以被最先加载到。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"references\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#references\"}},[s._v(\"#\")]),s._v(\" References\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"http://blog.itpub.net/31561269/viewspace-2222522/\")])])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}