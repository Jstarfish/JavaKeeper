{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[269],{817:function(t,e,a){\"use strict\";a.r(e);var v=a(6),s=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"测试\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#测试\"}},[t._v(\"#\")]),t._v(\" 测试\")]),t._v(\" \"),a(\"p\",[t._v(\"测试是开发的一个非常重要的方面，可以在很大程度上决定一个应用程序的命运。良好的测试可以在早期捕获导致应用程序崩溃的问题，但较差的测试往往总是导致故障和停机。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi9mQ3BkMWNmOGlhY2FMcVVseWZTQ1JWTHdKQ2dhNUNCc1drR2FmVGlhd1k4TThqejFCRW9TeTEzaWJ1OUVVcktCV2ljRWdkYVZZaWI1dUpiQWE2aWIzcklmSEtnUS82NDA?x-oss-process=image/format,png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"三种主要类型的软件测试：单元测试，功能测试和集成测试\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"单元测试用于测试各个代码组件，并确保代码按照预期的方式工作。单元测试由开发人员编写和执行。大多数情况下，使用JUnit或TestNG之类的测试框架。测试用例通常是在方法级别写入并通过自动化执行。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"集成测试检查系统是否作为一个整体而工作。集成测试也由开发人员完成，但不是测试单个组件，而是旨在跨组件测试。系统由许多单独的组件组成，如代码，数据库，Web服务器等。集成测试能够发现如组件布线，网络访问，数据库问题等问题。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"功能测试通过将给定输入的结果与规范进行比较来检查每个功能是否正确实现。通常，这不是在开发人员级别的。功能测试由单独的测试团队执行。测试用例基于规范编写，并且实际结果与预期结果进行比较。有若干工具可用于自动化的功能测试，如Selenium和QTP。\")])])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://bbs-img.huaweicloud.com/blogs/img/1614221444691083141.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"从服务端的角度把这三层稍微改一下：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"契约测试：测试服务与服务之间的契约，接口保证。代价最高，测试速度最慢。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"集成测试（Integration）：集成当前spring容器、中间件等，对服务内的接口，或者其他依赖于环境的方法的测试。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 加载spring环境\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@RunWith\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SpringBootRunner\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@DelegateTo\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SpringJUnit4ClassRunner\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@SpringBootTest\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"classes \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Application\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ApiServiceTest\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Autowired\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ApiService\")]),t._v(\" apiService\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//do some test\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"单元测试（Unit Test）：纯函数，方法的测试，不依赖于spring容器，也不依赖于其他的环境。\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"单元测试与集成测试的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单元测试与集成测试的区别\"}},[t._v(\"#\")]),t._v(\" 单元测试与集成测试的区别\")]),t._v(\" \"),a(\"p\",[t._v(\"在实际工作中，不少同学用集成测试代替了单元测试，或者认为集成测试就是单元测试。这里，总结为了单元测试与集成测试的区别：\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"测试对象不同\")])]),t._v(\" \"),a(\"p\",[t._v(\"单元测试对象是实现了具体功能的程序单元，集成测试对象是概要设计规划中的模块及模块间的组合。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"测试方法不同\")])]),t._v(\" \"),a(\"p\",[t._v(\"单元测试中的主要方法是基于代码的白盒测试，集成测试中主要使用基于功能的黑盒测试。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"测试时间不同\")])]),t._v(\" \"),a(\"p\",[t._v(\"集成测试要晚于单元测试。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"测试内容不同\")])]),t._v(\" \"),a(\"p\",[t._v(\"单元测试主要是模块内程序的逻辑、功能、参数传递、变量引用、出错处理及需求和设计中具体要求方面的测试；而集成测试主要验证各个接口、接口之间的数据传递关系，及模块组合后能否达到预期效果。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"一、单元测试\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、单元测试\"}},[t._v(\"#\")]),t._v(\" 一、单元测试\")]),t._v(\" \"),a(\"p\",[t._v(\"您可以在编写代码后使用『单元测试』来检查代码的质量，同时也可以使用该功能来改进开发过程。建议您一边开发一边编写测试，而不是在完成应用的开发之后才编写测试。这样做有助于您设计出可维护、可重复使用的小型代码单元，也方便您迅速而彻底地测试您的代码。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"为什么要做单测\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要做单测\"}},[t._v(\"#\")]),t._v(\" 为什么要做单测\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"对产品质量非常重要\")]),t._v(\" \"),a(\"li\",[t._v(\"是唯一一次保证代码覆盖率达到100%的测试\")]),t._v(\" \"),a(\"li\",[t._v(\"修正一个软件错误所需的费用将随着软件生命期的进展而上升\")]),t._v(\" \"),a(\"li\",[t._v(\"代码规范、优化，可测试性的代码\")]),t._v(\" \"),a(\"li\",[t._v(\"放心重构\")]),t._v(\" \"),a(\"li\",[t._v(\"自动化执行，多次执行\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"二、单测框架-java\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、单测框架-java\"}},[t._v(\"#\")]),t._v(\" 二、单测框架(Java)\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1、junit\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、junit\"}},[t._v(\"#\")]),t._v(\" 1、JUnit\")]),t._v(\" \"),a(\"p\",[t._v(\"JUnit是一个开放源代码的Java测试框架，用于编写和运行可重复的测试\")]),t._v(\" \"),a(\"p\",[t._v(\"现在主流的 Junit 有使用 4 和 5（需要JDK8及以上）\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"特征\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"JUNIT 4\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"JUNIT 5\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"声明一种测试方法\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Test\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Test\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"在当前类中的所有测试方法之前执行\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@BeforeClass\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@BeforeAll\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"在当前类中的所有测试方法之后执行\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@AfterClass\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@AfterAll\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"在每个测试方法之前执行\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Before\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@BeforeEach\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"每种测试方法后执行\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@After\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@AfterEach\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"禁用测试方法/类\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Ignore\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Disabled\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"测试工厂进行动态测试\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"NA\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@TestFactory\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"嵌套测试\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"NA\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Nested\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"标记和过滤\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Category\")])]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@Tag\")])])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"注册自定义扩展\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"NA\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"left\"}},[a(\"code\",[t._v(\"@ExtendWith\")])])])])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"JUnit 5利用了Java 8或更高版本的特性，例如lambda函数，使测试更强大，更容易维护。\")]),t._v(\" \"),a(\"li\",[t._v(\"JUnit 5为描述、组织和执行测试添加了一些非常有用的新功能。例如，测试得到了更好的显示名称，并且可以分层组织。\")]),t._v(\" \"),a(\"li\",[t._v(\"JUnit 5被组织成多个库，所以只将你需要的功能导入到你的项目中。通过Maven和Gradle等构建系统，包含合适的库很容易。\")]),t._v(\" \"),a(\"li\",[t._v(\"JUnit 5可以同时使用多个扩展，这是JUnit 4无法做到的（一次只能使用一个runner）。这意味着你可以轻松地将Spring扩展与其他扩展（如你自己的自定义扩展）结合起来。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2、testng\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、testng\"}},[t._v(\"#\")]),t._v(\" 2、TestNG\")]),t._v(\" \"),a(\"p\",[t._v(\"TestNG类似于JUnit，但是它配置了特殊的注释和高级功能(JUnit不支持)。\")]),t._v(\" \"),a(\"p\",[t._v(\"TestNG中的NG表示“下一代”。TestNG可以覆盖几乎所有类型的软件测试，包括\"),a(\"strong\",[t._v(\"端到端、单元、集成和功能\")]),t._v(\"测试。TestNG和JUnit都是基于java的框架，允许你编写测试和检查最终结果。如果测试成功，你将看到绿色条，否则将看到红色条。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"TestNG的优点和缺点\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"1. 优点：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"该框架使您能够在多个代码片段上运行并行测试。\")]),t._v(\" \"),a(\"li\",[t._v(\"在测试用例执行期间，您可以生成HTML报告。\")]),t._v(\" \"),a(\"li\",[t._v(\"可以根据优先级对测试用例进行分组和排列\")]),t._v(\" \"),a(\"li\",[t._v(\"可以参数化数据并使用注释来轻松设置优先级。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"2. 缺点\")]),t._v(\"：取决于您的要求，此外，设置TestNG需要一点时间。\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://developer.aliyun.com/article/572271\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"《关于testNG和JUnit的对比》\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3、spock\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、spock\"}},[t._v(\"#\")]),t._v(\" 3、Spock\")]),t._v(\" \"),a(\"p\",[t._v(\"Spock 由 Gradleware首席工程师 于 2008 年创建。虽然灵感来自于 JUnit，Spock 的特性不仅仅是 JUnit 的扩展：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"测试代码使用 Groovy 语言编写，而被测代码可以由 Java 编写。\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"内置 mock 框架以减少引入第三方框架\")]),t._v(\"。\")]),t._v(\" \"),a(\"li\",[t._v(\"可支持自定义测试件名称。\")]),t._v(\" \"),a(\"li\",[t._v(\"为创建测试代码预定义了行为驱动块（given:、when:、then:、expect: 等）。\")]),t._v(\" \"),a(\"li\",[t._v(\"使用数据表格以减少数据结构的使用需求。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_4、jbehave\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4、jbehave\"}},[t._v(\"#\")]),t._v(\" 4、JBehave\")]),t._v(\" \"),a(\"p\",[t._v(\"Behave是一种令人难以置信的、支持BDD(行为驱动开发)的最佳Java测试框架之一。BDD是TDD(测试驱动开发)和ATDD(\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//www.zmtests.com/%3Fpk_campaign%3Dzhihu-w\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"验收测试\"),a(\"OutboundLink\")],1),t._v(\"驱动开发)的演变。\")]),t._v(\" \"),a(\"p\",[t._v(\"Java提供了若干用于单元测试的框架。TestNG和JUnit是最流行的测试框架。JUnit和TestNG的一些重要功能：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"易于设置和运行。\")]),t._v(\" \"),a(\"li\",[t._v(\"支持注释。\")]),t._v(\" \"),a(\"li\",[t._v(\"允许忽略或分组并一起执行某些测试。\")]),t._v(\" \"),a(\"li\",[t._v(\"支持参数化测试，即通过在运行时指定不同的值来运行单元测试。\")]),t._v(\" \"),a(\"li\",[t._v(\"通过与构建工具，如Ant，Maven和Gradle集成来支持自动化的测试执行。\")])]),t._v(\" \"),a(\"p\",[t._v(\"缺点：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"需要具备基本的 Groovy 语言知识\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_5、spring-test\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5、spring-test\"}},[t._v(\"#\")]),t._v(\" 5、Spring Test\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_6、selenide\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6、selenide\"}},[t._v(\"#\")]),t._v(\" 6、Selenide\")]),t._v(\" \"),a(\"p\",[t._v(\"Selenide是一个流行的开源Java测试框架，它是由Selenium WebDriver提供支持。它是为Java应用程序编写精确的、交流的、稳定的UI测试用例的工具。它扩展了WebDriver和JUnit功能。\")]),t._v(\" \"),a(\"p\",[t._v(\"WebDriver是一个非常受欢迎的用户界面测试工具，但是它缺乏处理超时的特性。例如，对Ajax等web技术的测试。Selenide框架管理所有这些问题在一个简单的方式。此外，它更容易安装和学习。你只需要把注意力集中在逻辑上，Selenide就会完成剩下的工作。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"特性\")])]),t._v(\" \"),a(\"p\",[t._v(\"（1）开箱即用，并设置使用框架；\")]),t._v(\" \"),a(\"p\",[t._v(\"（2）编写更少的自动化代码；\")]),t._v(\" \"),a(\"p\",[t._v(\"（3）节省大量的时间；\")]),t._v(\" \"),a(\"p\",[t._v(\"（4）配置理想的CI工具，如Jenkins。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"安装Selenide的先决条件\")])]),t._v(\" \"),a(\"p\",[t._v(\"由于这个开放源码框架是基于Java的，所以你将需要Java或其他面向对象编程语言方面的经验。在你的工作站，你还将需要\")]),t._v(\" \"),a(\"p\",[t._v(\"（1）JDK 5或更新版本；\")]),t._v(\" \"),a(\"p\",[t._v(\"（2）安装了Maven 3.0或其他版本；\")]),t._v(\" \"),a(\"p\",[t._v(\"（3）集成开发环境(IDE)工具——大多数情况下，Eclipse是所有开发人员的首选，因为Eclipse和Maven的组合使用起来更简单。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_7、jwebunit\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7、jwebunit\"}},[t._v(\"#\")]),t._v(\" 7、JWebUnit\")]),t._v(\" \"),a(\"p\",[t._v(\"JWebUnit是一个基于java的测试框架，是用于集成、回归和功能测试的首选JUnit扩展之一。它用一个简单的测试界面包装了当前的活动框架，如HTMLUnit和Selenium。因此，你可以立即测试web应用程序的准确性。\")]),t._v(\" \"),a(\"p\",[t._v(\"JWebUnit可用于执行屏幕导航测试。该框架还提供了一个高级Java应用程序编程接口，用于使用一组断言导航web应用程序，以检查应用程序的准确性。它计算通过链接的导航、表单入口和提交、表内容的调整以及其他常见的业务web应用程序特征。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"三、mock-框架\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、mock-框架\"}},[t._v(\"#\")]),t._v(\" 三、Mock 框架\")]),t._v(\" \"),a(\"p\",[t._v(\"单元测试不应该依赖数据，依赖外部服务或组件等，会对其他数据产生影响的情况。启动Spring容器，一般比较慢，可能会启动消息监听消费消息，定时任务的执行等，对数据产生影响。\")]),t._v(\" \"),a(\"p\",[t._v(\"Mock测试就是在测试过程中，对那些当前测试不关心的，不容易构建的对象，用一个虚拟对象来代替测试的情形。\")]),t._v(\" \"),a(\"p\",[t._v(\"说白了：就是解耦(虚拟化)要测试的目标方法中调用的其它方法，例如：Service的方法调用Mapper类的方法，这时候就要把Mapper类Mock掉（产生一个虚拟对象），这样我们可以自由的控制这个Mapper类中的方法，让它们返回想要的结果、抛出指定异常、验证方法的调用次数等等。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"Mock可以用来解除外部服务依赖，从而保证了测试用例的独立性\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"Mock可以减少全链路测试数据准备，从而提高了编写测试用例的速度\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"Mock可以模拟一些非正常的流程，从而保证了测试用例的代码覆盖率\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"Mock可以不用加载项目环境配置，从而保证了测试用例的执行速度\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1、easymock\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、easymock\"}},[t._v(\"#\")]),t._v(\" 1、EasyMock\")]),t._v(\" \"),a(\"p\",[t._v(\"EasyMock 是早期比较流行的MocK测试框架。它提供对接口的模拟，能够通过录制、回放、检查三步来完成大体的测试过程，可以验证方法的调用种类、次数、顺序，可以令 Mock 对象返回指定的值或抛出指定异常。通过 EasyMock，我们可以方便的构造 Mock 对象从而使单元测试顺利进行。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2、mockito\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、mockito\"}},[t._v(\"#\")]),t._v(\" 2、Mockito\")]),t._v(\" \"),a(\"p\",[t._v(\"EasyMock之后流行的mock工具。相对EasyMock学习成本低，而且具有非常简洁的API，测试代码的可读性很高。\")]),t._v(\" \"),a(\"p\",[t._v(\"Sprinng-boot-starter-test 内置\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3、powermock\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、powermock\"}},[t._v(\"#\")]),t._v(\" 3、PowerMock\")]),t._v(\" \"),a(\"p\",[t._v(\"这个工具是在EasyMock和Mockito上扩展出来的，目的是为了解决EasyMock和Mockito不能解决的问题，比如对static, final, private方法均不能mock。其实测试架构设计良好的代码，一般并不需要这些功能，但如果是在已有项目上增加单元测试，老代码有问题且不能改时，就不得不使用这些功能了。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_4、jmockit\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4、jmockit\"}},[t._v(\"#\")]),t._v(\" 4、Jmockit\")]),t._v(\" \"),a(\"p\",[t._v(\"JMockit 是一个轻量级的mock框架是用以帮助开发人员编写测试程序的一组工具和API，该项目完全基于 Java 5 SE 的 java.lang.instrument 包开发，内部使用 ASM 库来修改Java的Bytecode。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_5、testablemock\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5、testablemock\"}},[t._v(\"#\")]),t._v(\" 5、TestableMock\")]),t._v(\" \"),a(\"p\",[t._v(\"阿里开源的一款 mock 工具，让Mock的定义和置换干净利落\")]),t._v(\" \"),a(\"p\",[t._v(\"https://github.com/alibaba/testable-mock\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"常见-mock-场景\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常见-mock-场景\"}},[t._v(\"#\")]),t._v(\" 常见 Mock 场景\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"Mock远程服务调用\")]),t._v(\" \"),a(\"li\",[t._v(\"从数据库或文件读取数据\")]),t._v(\" \"),a(\"li\",[t._v(\"跳过检查操作\")]),t._v(\" \"),a(\"li\",[t._v(\"跳过AOP处理\")]),t._v(\" \"),a(\"li\",[t._v(\"检查特定方法是否执行/调用参数\")]),t._v(\" \"),a(\"li\",[t._v(\"禁止特定方法执行\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"四、现状\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四、现状\"}},[t._v(\"#\")]),t._v(\" 四、现状\")]),t._v(\" \"),a(\"p\",[t._v(\"没有单测\")]),t._v(\" \"),a(\"p\",[t._v(\"单元测试起不来\")]),t._v(\" \"),a(\"p\",[t._v(\"单元测试的“单元”太大\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"五、初步方案\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五、初步方案\"}},[t._v(\"#\")]),t._v(\" 五、初步方案\")]),t._v(\" \"),a(\"p\",[t._v(\"都有一定的学习成本\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"数据库测试\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据库测试\"}},[t._v(\"#\")]),t._v(\" 数据库测试\")]),t._v(\" \"),a(\"p\",[t._v(\"数据库测试多用在DAO中，DAO对数据库的操作依赖于mybatis的sql mapper 文件，这些sql mapper多是手工写的，在单测中验证所有sql mapper的正确性非常重要，在DAO层有足够的覆盖度和强度后，Service层的单测才能仅仅关注自身的业务逻辑\")]),t._v(\" \"),a(\"p\",[t._v(\"为了验证sql mapper，我们需要一个能实际运行的数据库。为了提高速度和减少依赖，可以使用内存数据库。内存数据库和目标数据库(MySQL,TDDL)在具体函数上有微小差别，不过只要使用标准的SQL 92，两者都是兼容的。\")]),t._v(\" \"),a(\"p\",[t._v(\"使用 \"),a(\"a\",{attrs:{href:\"http://www.h2database.com/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"H2\"),a(\"OutboundLink\")],1),t._v(\" 作为单测数据库\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"其它外部依赖\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#其它外部依赖\"}},[t._v(\"#\")]),t._v(\" 其它外部依赖\")]),t._v(\" \"),a(\"p\",[t._v(\"对于除数据库以外的依赖，包括各种中间件以及外部的HSF/HTTP服务，在单测中全部采用Mock进行解耦。\")]),t._v(\" \"),a(\"p\",[t._v(\"junit + mockito\")]),t._v(\" \"),a(\"p\",[t._v(\"与spring结合性感觉更强，可以充分兼容spring的各种注解，能较完美接近项目启动后实际运行情况。可以用来做一定的业务自动化回归测试，但可能超出了ut的范围\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"一个类里面测试太多怎么办？\")]),t._v(\" \"),a(\"li\",[t._v(\"不知道别人mock了哪些数据怎么办？\")]),t._v(\" \"),a(\"li\",[t._v(\"测试结构太复杂？\")]),t._v(\" \"),a(\"li\",[t._v(\"测试莫名奇妙起不来？\")])]),t._v(\" \"),a(\"p\",[t._v(\"FSC（Fixture-Scenario-Case）是一种组织测试代码的方法，目标是尽量将一些MOCK信息在不同的测试中共享。其结构如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJkibdPicqyKZw3IFlzLsRSickr20z2q3xU5FuicZJotzc422ffkPOPkGeZnQvjeKRWZykXXNz24ricgkQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\",alt:\"图片\"}})]),t._v(\" \"),a(\"h2\",{attrs:{id:\"六、单测规约\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#六、单测规约\"}},[t._v(\"#\")]),t._v(\" 六、单测规约\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"使用断言而不是print语句\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用断言而不是print语句\"}},[t._v(\"#\")]),t._v(\" 使用断言而不是Print语句\")]),t._v(\" \"),a(\"p\",[t._v(\"许多开发人员习惯于在每行代码之后编写System.out.println语句来验证代码是否正确执行。这种做法常常扩展到单元测试，从而导致测试代码变得杂乱。除了混乱，这需要开发人员手动干预去验证控制台上打印的输出，以检查测试是否成功运行。更好的方法是使用自动指示测试结果的断言。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"构建具有确定性结果的测试\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#构建具有确定性结果的测试\"}},[t._v(\"#\")]),t._v(\" 构建具有确定性结果的测试\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"除了正面情景外-还要测试负面情景和边缘情况\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#除了正面情景外-还要测试负面情景和边缘情况\"}},[t._v(\"#\")]),t._v(\" 除了正面情景外，还要测试负面情景和边缘情况\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"单测要有覆盖度\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单测要有覆盖度\"}},[t._v(\"#\")]),t._v(\" 单测要有覆盖度\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"单测要稳定\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单测要稳定\"}},[t._v(\"#\")]),t._v(\" 单测要稳定\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"阿里-java-开发规范-单测部分\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#阿里-java-开发规范-单测部分\"}},[t._v(\"#\")]),t._v(\" 阿里 java 开发规范 —— 单测部分：\")]),t._v(\" \"),a(\"blockquote\",[a(\"ol\",[a(\"li\",[t._v(\"【强制】好的单元测试必须遵守AIR原则。\")])]),t._v(\" \"),a(\"p\",[t._v(\"说明：单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"A：Automatic（自动化）\")]),t._v(\" \"),a(\"li\",[t._v(\"I：Independent（独立性）\")]),t._v(\" \"),a(\"li\",[t._v(\"R：Repeatable（可重复）\")])]),t._v(\" \"),a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[a(\"p\",[t._v(\"【强制】单元测试应该是全自动执行的，并且非交互式的。测试框架通常是定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用System.out来进行人肉验证，必须使用assert来验证。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。\")]),t._v(\" \"),a(\"p\",[t._v(\"反例：method2需要依赖method1的执行，将执行结果做为method2的输入。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【强制】单元测试是可以重复执行的，不能受到外界环境的影响。\")]),t._v(\" \"),a(\"p\",[t._v(\"说明：单元测试通常会被放到持续集成中，每次有代码check in时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。\")]),t._v(\" \"),a(\"p\",[t._v(\"正例：为了不受外界环境影响，要求设计代码时就把SUT的依赖改成注入，在测试时用spring 这样的DI框架注入一个本地（内存）实现或者Mock实现。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。\")]),t._v(\" \"),a(\"p\",[t._v(\"说明：只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。\")]),t._v(\" \"),a(\"p\",[t._v(\"说明：新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【强制】单元测试代码必须写在如下工程目录：src/test/java，不允许写在业务代码目录下。\")]),t._v(\" \"),a(\"p\",[t._v(\"说明：源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【推荐】单元测试的基本目标：语句覆盖率达到70%；核心模块的语句覆盖率和分支覆盖率都要达到100%\")]),t._v(\" \"),a(\"p\",[t._v(\"说明：\"),a(\"strong\",[t._v(\"在工程规约的应用分层中提到的DAO层，Manager层，可重用度高的Service，都应该进行单元测试\")]),t._v(\"。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【推荐】编写单元测试代码遵守BCDE原则，以保证被测试模块的交付质量。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"C：Correct，正确的输入，并得到预期的结果。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"D：Design，与设计文档相结合，来编写单元测试。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"E：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。\")])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。\")]),t._v(\" \"),a(\"p\",[t._v(\"反例：删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则，导致测试结果异常。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。\")]),t._v(\" \"),a(\"p\",[t._v(\"正例：在RDC内部单元测试中，使用RDC_UNIT_TEST_的前缀标识数据。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【推荐】对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（UC）。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【推荐】单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【参考】为了更方便地进行单元测试，业务代码应避免以下情况：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"构造方法中做的事情过多。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"存在过多的全局变量和静态方法。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"存在过多的外部依赖。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"存在过多的条件语句。\")])])]),t._v(\" \"),a(\"p\",[t._v(\"说明：多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"【参考】不要对单元测试存在如下误解：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。  单元测试代码是多余的。汽车的整体功能与各单元部件的测试正常与否是强相关的。\")]),t._v(\" \"),a(\"li\",[t._v(\"单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。\")]),t._v(\" \"),a(\"li\",[t._v(\"单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障\")])])])])]),t._v(\" \"),a(\"p\",[t._v(\"action 测试还是通过 海星系统\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"《SpringBoot - 單元測試工具 Mockito》https://kucw.github.io/blog/2020/2/spring-unit-test-mockito/\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"https://cloud.tencent.com/developer/article/1338791\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"《写有价值的单元测试》https://developer.aliyun.com/article/54478\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"《Mockito.mock() vs @Mock vs @MockBean》https://www.baeldung.com/java-spring-mockito-mock-mockbean\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"《Mock服务插件在接口测试中的设计与应用》 https://tech.youzan.com/mock/\")])])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('package com.sogou.bizdev.kuaitou.api.test;\\n\\nimport com.sogou.bizdev.kuaitou.api.dao.IndustryFieldDao;\\nimport com.sogou.bizdev.kuaitou.api.po.IndustryField;\\nimport com.sogou.bizdev.kuaitou.api.service.IndustryFieldService;\\nimport com.sogou.bizdev.kuaitou.dto.IndustryFieldDto;\\nimport org.junit.Assert;\\nimport org.junit.Test;\\nimport org.junit.jupiter.api.BeforeEach;\\nimport org.junit.jupiter.api.extension.ExtendWith;\\nimport org.junit.runner.RunWith;\\nimport org.mockito.InjectMocks;\\nimport org.mockito.Mock;\\nimport org.mockito.Mockito;\\nimport org.mockito.MockitoAnnotations;\\nimport org.mockito.junit.MockitoJUnitRunner;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.test.context.junit4.SpringRunner;\\nimport org.springframework.test.web.servlet.MockMvc;\\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\\nimport org.springframework.web.context.WebApplicationContext;\\n\\nimport java.util.ArrayList;\\nimport java.util.Date;\\nimport java.util.List;\\n\\n/**\\n * @description: 行业字段单测\\n * @author: starfish\\n * @date: 2021/5/11 20:01\\n */\\n//@RunWith(MockitoJUnitRunner.class)\\n//@RunWith(SpringRunner.class)\\n//@ExtendWith(MockitoExtension.class)\\npublic class IndustryFieldTest {\\n\\n    @Autowired\\n    private WebApplicationContext webApplicationContext;\\n    private MockMvc mockMvc;\\n\\n    //在每个测试方法执行之前都初始化MockMvc对象\\n//    @BeforeEach\\n//    public void setupMockMvc() {\\n//        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\\n//    }\\n\\n    @BeforeEach\\n    public void beforeEach() {\\n        MockitoAnnotations.initMocks(this);\\n    }\\n//\\n//    @Autowired\\n//    //@InjectMocks\\n//    private IndustryFieldService industryFieldService;\\n\\n    IndustryFieldService industryFieldService = Mockito.mock(IndustryFieldService.class);\\n\\n//    @MockBean\\n//    private IndustryFieldDao fieldDao;\\n\\n//    @Mock\\n//    private IndustryFieldDao fieldDao;\\n\\n    IndustryFieldDao fieldDao = Mockito.mock(IndustryFieldDao.class);\\n\\n\\n    @Test\\n    public void listIndustryFields() {\\n\\n        //industryFieldService 调用 dao 层去查 DB\\n        List<IndustryField> fields = new ArrayList<>();\\n\\n        IndustryField locField = new IndustryField();\\n        locField.setId(1L);\\n        locField.setFieldKey(\"loc\");\\n        locField.setRequired(1);\\n        locField.setFieldKeyCn(\"商品移动端url\");\\n\\n        IndustryField nameField = new IndustryField();\\n        nameField.setId(2L);\\n        nameField.setFieldKey(\"name\");\\n        nameField.setRequired(1);\\n        nameField.setFieldKeyCn(\"商品名称\");\\n\\n        fields.add(locField);\\n        fields.add(nameField);\\n\\n        Mockito.when(fieldDao.listIndustryFields(0)).thenReturn(fields);\\n\\n        List<IndustryFieldDto> fieldDtos = industryFieldService.listIndustryFields(0);\\n\\n        Assert.assertNotNull(fieldDtos);\\n        Assert.assertEquals(fieldDtos.get(0).getFieldKey(),\"loc\");\\n\\n    }\\n\\n\\n//    @MockBean\\n//    private IndustryFieldDao industryFieldDao;\\n\\n}\\n')])])]),a(\"ul\",[a(\"li\",[t._v(\"背景\")]),t._v(\" \"),a(\"li\",[t._v(\"单测实践\")])])])}),[],!1,null,null,null);e.default=s.exports}}]);","extractedComments":[]}