{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{610:function(t,s,a){\"use strict\";a.r(s);var e=a(6),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"redis-database\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-database\"}},[t._v(\"#\")]),t._v(\" Redis-Database\")]),t._v(\" \"),a(\"p\",[t._v(\"Redis 如何表示一个数据库？数据库操作是如何实现的？\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"这边文章是基于源码来让我们理解 Redis 的，不管是我们自己下载 redis 还是直接在 Github 上看源码，我们先要了解下 redis 更目录下的重要目录\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"src\")]),t._v(\"：用C编写的Redis实现\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"tests\")]),t._v(\"：包含在Tcl中实现的单元测试\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"deps\")]),t._v(\"：包含Redis使用的库。编译Redis所需的所有文件都在此目录中\")])]),t._v(\" \"),a(\"p\",[t._v(\"我们深入学习只需要看 src 目录就可以了。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"数据库结构\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据库结构\"}},[t._v(\"#\")]),t._v(\" 数据库结构\")]),t._v(\" \"),a(\"p\",[t._v(\"理解程序如何工作的最简单方法是理解它使用的数据结构。 从 \"),a(\"code\",[t._v(\"redis/src\")]),t._v(\" 目录下可以看到 server 的源码文件（基于 \"),a(\"code\",[t._v(\"redis-6.0.5\")]),t._v(\"，redis3.0 叫 \"),a(\"code\",[t._v(\"redis.c\")]),t._v(\" 和 \"),a(\"code\",[t._v(\"redis.h\")]),t._v(\"）。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gfrqvz1u4uj31ci04yq3l.jpg\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"Redis的主头文件 \"),a(\"code\",[t._v(\"server.h\")]),t._v(\"  中定义了各种结构体，比如Redis 对象\"),a(\"code\",[t._v(\"redisObject\")]),t._v(\" 、存储结构\"),a(\"code\",[t._v(\"redisDb\")]),t._v(\"、客户端\"),a(\"code\",[t._v(\"client\")]),t._v(\" 等等。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Redis database representation. There are multiple databases identified\\n * by integers from 0 (the default database) up to the max configured\\n * database. The database number is the 'id' field in the structure. */\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"typedef\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"redisDb\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 数据库键空间，保存着数据库中的所有键值对\")]),t._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"dict\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"                 \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* The keyspace for this DB */\")]),t._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 键的过期时间，字典的键为键，字典的值为过期事件 UNIX 时间戳\")]),t._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"expires\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"              \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Timeout of keys with a timeout set */\")]),t._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 正处于阻塞状态的键\")]),t._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"blocking_keys\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Keys with clients waiting for data (BLPOP)*/\")]),t._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 可以解除阻塞的键\")]),t._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"ready_keys\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Blocked keys that received a PUSH */\")]),t._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 正在被 WATCH 命令监视的键\")]),t._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"watched_keys\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"         \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* WATCHED keys for MULTI/EXEC CAS */\")]),t._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 数据库号码\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" id\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"                     \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Database ID */\")]),t._v(\"\\n \\t \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 数据库的键的平均 TTL ，统计信息\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" avg_ttl\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"          \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Average TTL, just for stats */\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"unsigned\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" expires_cursor\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Cursor of the active expire cycle. */\")]),t._v(\"\\n    list \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"defrag_later\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"         \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* List of key names to attempt to defrag one by one, gradually. */\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" redisDb\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"所有的服务器配置均定义在 \"),a(\"code\",[t._v(\"server\")]),t._v(\" 结构体中\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"redisServer\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* General */\")]),t._v(\"\\n    pid_t pid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"                  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Main process pid. */\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"configfile\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Absolute config file path, or NULL */\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"executable\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Absolute executable file path. */\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"exec_argv\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Executable argv vector (copy). */\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" dynamic_hz\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"             \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Change hz value depending on # of clients. */\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" config_hz\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"              \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Configured HZ value. May be different than\\n                                   the actual 'hz' field value if dynamic-hz\\n                                   is enabled. */\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" hz\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"                     \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* serverCron() calls frequency in hertz */\")]),t._v(\"\\n    redisDb \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"db\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"             \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//\")]),t._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"commands\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"             \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Command table */\")]),t._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"orig_commands\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Command table before command renaming. */\")]),t._v(\"\\n    aeEventLoop \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"el\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"_Atomic\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"unsigned\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" lruclock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* Clock for LRU eviction */\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" shutdown_asap\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"          \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* SHUTDOWN needed ASAP */\")]),t._v(\"\\n  \\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//......\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"h2\",{attrs:{id:\"数据库键空间\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据库键空间\"}},[t._v(\"#\")]),t._v(\" 数据库键空间\")]),t._v(\" \"),a(\"p\",[t._v(\"因为 Redis 是一个键值对数据库（key-value pairs database）， 所以它的数据库本身也是一个字典（俗称 keyspace）：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"字典的键是一个字符串对象。\")]),t._v(\" \"),a(\"li\",[t._v(\"字典的值则可以是包括字符串、列表、哈希表、集合或有序集在内的任意一种 Redis 类型对象。\")])]),t._v(\" \"),a(\"p\",[t._v(\"在 \"),a(\"code\",[t._v(\"redisDb\")]),t._v(\" 结构的 \"),a(\"code\",[t._v(\"dict\")]),t._v(\" 属性中，保存着数据库的所有键值对数据。\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"redis/src/dict.h\")]),t._v(\" 是一个非阻塞哈希表的实现，包含字典的结构体定义\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-c extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"typedef\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"struct\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"dict\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    dictType \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"type\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"   \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 类型特定函数\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"privdata\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"   \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 私有数据\")]),t._v(\"\\n    dictht ht\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"     \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 哈希表\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" rehashidx\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// rehash 索引,当 rehash 不在进行时，值为 -1\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"unsigned\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" iterators\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 当前运行的迭代器的数量\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" dict\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"Redis 的字典使用哈希表作为其底层实现。dict 类型使用的两个指向哈希表的指针，其中 0 号哈希表（ht[0]）主要用于存储数据库的所有键值，而1号哈希表主要用于程序对 0 号哈希表进行 rehash 时使用。所以 Redis 中查找一个 key，其实就是对进行该 dict 结构中的 ht[0] 进行查找操作。\")]),t._v(\" \"),a(\"p\",[t._v(\"既然是哈希，那当多个键哈希之后为同一个值，也就是哈希碰撞的时候，怎么办呢？\")]),t._v(\" \"),a(\"p\",[t._v(\"Redis 解决哈希碰撞的方式 和 Java 中的 HashMap 类似，采取链表的方式来存储多个哈希碰撞的键。也就是说，当根据 key 的哈希值找到该列表后，如果列表的长度大于1，那么我们需要遍历该链表来找到我们所查找的 key。当然，一般情况下链表长度都为是1，所以时间复杂度可看作o(1)\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"redis-的-key-是如何寻址的\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-的-key-是如何寻址的\"}},[t._v(\"#\")]),t._v(\" Redis 的 Key 是如何寻址的？\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"当拿到一个key后， redis 先判断当前库的0号哈希表是否为空，即：if (dict->ht[0].size == 0)。如果为true直接返回NULL。\")]),t._v(\" \"),a(\"li\",[t._v(\"判断该0号哈希表是否需要rehash，因为如果在进行rehash，那么两个表中者有可能存储该key。如果正在进行rehash，将调用一次_dictRehashStep方法，_dictRehashStep 用于对数据库字典、以及哈希键的字典进行被动 rehash，这里不作赘述。\")]),t._v(\" \"),a(\"li\",[t._v(\"计算哈希表，根据当前字典与key进行哈希值的计算。\")]),t._v(\" \"),a(\"li\",[t._v(\"根据哈希值与当前字典计算哈希表的索引值。\")]),t._v(\" \"),a(\"li\",[t._v(\"根据索引值在哈希表中取出链表，遍历该链表找到key的位置。一般情况，该链表长度为1。\")]),t._v(\" \"),a(\"li\",[t._v(\"当 ht[0] 查找完了之后，再进行了次rehash判断，如果未在rehashing，则直接结束，否则对ht[1]重复345步骤。\")])]),t._v(\" \"),a(\"p\",[t._v(\"到此我们就找到了key在内存中的位置了。\")]),t._v(\" \"),a(\"p\",[t._v(\"https://redisbook.readthedocs.io/en/latest/index.html\")])])}),[],!1,null,null,null);s.default=n.exports}}]);","extractedComments":[]}