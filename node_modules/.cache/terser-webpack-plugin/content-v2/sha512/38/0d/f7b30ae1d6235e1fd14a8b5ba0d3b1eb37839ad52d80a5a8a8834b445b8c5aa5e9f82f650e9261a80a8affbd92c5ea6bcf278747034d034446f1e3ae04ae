{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{700:function(t,e,T){\"use strict\";T.r(e);var a=T(6),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,T=t._self._c||e;return T(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[T(\"p\",[t._v(\"Apache Kafka 的所有通信都是基于 TCP 的，而不是基于 HTTP 或其他协议。无论是生产者、消费者，还是 Broker 之间的通信都是如此。你可能会问，为什么 Kafka 不使用 HTTP 作为底层的通信协议呢？其实这里面的原因有很多，但最主要的原因在于 TCP 和 HTTP 之间的区别。\")]),t._v(\" \"),T(\"p\",[t._v(\"从社区的角度来看，在开发客户端时，人们能够利用 TCP 本身提供的一些高级功能，比如多路复用请求以及同时轮询多个连接的能力。\")]),t._v(\" \"),T(\"p\",[t._v(\"所谓的多路复用请求，即 multiplexing request，是指将两个或多个数据流合并到底层单一物理连接中的过程。TCP 的多路复用请求会在一条物理连接上创建若干个虚拟连接，每个虚拟连接负责流转各自对应的数据流。其实严格来说，TCP 并不能多路复用，它只是提供可靠的消息交付语义保证，比如自动重传丢失的报文。\")]),t._v(\" \"),T(\"p\",[t._v(\"更严谨地说，作为一个基于报文的协议，TCP 能够被用于多路复用连接场景的前提是，上层的应用协议（比如 HTTP）允许发送多条消息。不过，我们今天并不是要详细讨论 TCP 原理，因此你只需要知道这是社区采用 TCP 的理由之一就行了。\")]),t._v(\" \"),T(\"p\",[t._v(\"除了 TCP 提供的这些高级功能有可能被 Kafka 客户端的开发人员使用之外，社区还发现，目前已知的 HTTP 库在很多编程语言中都略显简陋。\")]),t._v(\" \"),T(\"p\",[t._v(\"基于这两个原因，Kafka 社区决定采用 TCP 协议作为所有请求通信的底层协议。\")])])}),[],!1,null,null,null);e.default=n.exports}}]);","extractedComments":[]}