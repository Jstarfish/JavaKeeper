{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{589:function(_,v,t){\"use strict\";t.r(v);var e=t(6),d=Object(e.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":_.$parent.slotKey}},[t(\"p\",[_._v(\"存储引擎是 MySQL 的组件，用于处理不同表类型的 SQL 操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎，还可以获得特定的功能。\")]),_._v(\" \"),t(\"p\",[_._v(\"使用哪一种引擎可以灵活选择，\"),t(\"strong\",[t(\"font\",{attrs:{color:\"red\"}},[_._v(\"一个数据库中多个表可以使用不同引擎以满足各种性能和实际需求\")])],1),_._v(\"，使用合适的存储引擎，将会提高整个数据库的性能 。\")]),_._v(\" \"),t(\"p\",[_._v(\"MySQL 服务器使用可插拔的存储引擎体系结构，可以从运行中的MySQL服务器加载或卸载存储引擎 。\")]),_._v(\" \"),t(\"blockquote\",[t(\"p\",[t(\"a\",{attrs:{href:\"https://dev.mysql.com/doc/refman/5.7/en/storage-engines.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[_._v(\"MySQL 5.7 可供选择的存储引擎\"),t(\"OutboundLink\")],1)])]),_._v(\" \"),t(\"h3\",{attrs:{id:\"查看存储引擎\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#查看存储引擎\"}},[_._v(\"#\")]),_._v(\" 查看存储引擎\")]),_._v(\" \"),t(\"div\",{staticClass:\"language-mysql extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[_._v(\"-- 查看支持的存储引擎\\nSHOW ENGINES\\n\\n-- 查看默认存储引擎\\nSHOW VARIABLES LIKE 'storage_engine'\\n\\n--查看具体某一个表所使用的存储引擎，这个默认存储引擎被修改了！\\nshow create table tablename\\n\\n--准确查看某个数据库中的某一表所使用的存储引擎\\nshow table status like 'tablename'\\nshow table status from database where name=\\\"tablename\\\"\\n\")])])]),t(\"p\",[t(\"img\",{attrs:{src:\"https://img.starfish.ink/mysql/mysql-engines.png\",alt:\"\"}})]),_._v(\" \"),t(\"blockquote\",[t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[_._v(\"存储引擎\")]),_._v(\" \"),t(\"th\",[_._v(\"描述\")])])]),_._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"ARCHIVE\")])]),_._v(\" \"),t(\"td\",[_._v(\"用于数据存档（行被插入后不能再修改）\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"BLACKHOLE\")])]),_._v(\" \"),t(\"td\",[_._v(\"丢弃写操作，读操作会返回空内容\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"CSV\")])]),_._v(\" \"),t(\"td\",[_._v(\"在存储数据时，以逗号分隔各个数据项\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"FEDERATED\")])]),_._v(\" \"),t(\"td\",[_._v(\"用来访问远程表\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"InnoDB\")])]),_._v(\" \"),t(\"td\",[_._v(\"具备外键支持功能的事务存储引擎\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"MEMORY\")])]),_._v(\" \"),t(\"td\",[_._v(\"置于内存的表\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"MERGE\")])]),_._v(\" \"),t(\"td\",[_._v(\"用来管理多个MyISAM表构成的表集合\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"MyISAM\")])]),_._v(\" \"),t(\"td\",[_._v(\"主要的非事务处理存储引擎\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"NDB\")])]),_._v(\" \"),t(\"td\",[_._v(\"MySQL集群专用存储引擎\")])])])])]),_._v(\" \"),t(\"h3\",{attrs:{id:\"设置存储引擎\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#设置存储引擎\"}},[_._v(\"#\")]),_._v(\" 设置存储引擎\")]),_._v(\" \"),t(\"div\",{staticClass:\"language-mysql extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[_._v(\"-- 建表时指定存储引擎。默认的就是INNODB，不需要设置\\nCREATE TABLE t1 (i INT) ENGINE = INNODB;\\nCREATE TABLE t2 (i INT) ENGINE = CSV;\\nCREATE TABLE t3 (i INT) ENGINE = MEMORY;\\n\\n-- 修改存储引擎\\nALTER TABLE t ENGINE = InnoDB;\\n\\n-- 修改默认存储引擎，也可以在配置文件my.cnf中修改默认引擎\\nSET default_storage_engine=NDBCLUSTER;\\n\")])])]),t(\"p\",[_._v(\"默认情况下，每当CREATE TABLE或ALTER TABLE不能使用默认存储引擎时，都会生成一个警告。为了防止在所需的引擎不可用时出现令人困惑的意外行为，可以启用\"),t(\"code\",[_._v(\"NO_ENGINE_SUBSTITUTION SQL\")]),_._v(\"模式。如果所需的引擎不可用，则此设置将产生错误而不是警告，并且不会创建或更改表\")]),_._v(\" \"),t(\"h3\",{attrs:{id:\"常用存储引擎\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用存储引擎\"}},[_._v(\"#\")]),_._v(\" 常用存储引擎\")]),_._v(\" \"),t(\"h4\",{attrs:{id:\"innodb\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#innodb\"}},[_._v(\"#\")]),_._v(\" InnoDB\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"InnoDB 是 MySQL5.7 默认的存储引擎，主要特性有\")])]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"InnoDB存储引擎维护自己的缓冲池，在访问数据时将表和索引数据缓存在主内存中\")]),_._v(\" \"),t(\"li\",[_._v(\"支持事务\")]),_._v(\" \"),t(\"li\",[_._v(\"支持外键\")]),_._v(\" \"),t(\"li\",[_._v(\"B-Tree索引\")]),_._v(\" \"),t(\"li\",[_._v(\"不支持集群\")]),_._v(\" \"),t(\"li\",[_._v(\"聚簇索引\")]),_._v(\" \"),t(\"li\",[_._v(\"行锁\")]),_._v(\" \"),t(\"li\",[_._v(\"支持地理位置的数据类型和索引\")])]),_._v(\" \"),t(\"h5\",{attrs:{id:\"mysql之innodb引擎的4大特性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mysql之innodb引擎的4大特性\"}},[_._v(\"#\")]),_._v(\" MySQL之Innodb引擎的4大特性\")]),_._v(\" \"),t(\"ol\",[t(\"li\",[_._v(\"插入缓冲 （Insert Buffer/Change Buffer）\")]),_._v(\" \"),t(\"li\",[_._v(\"双写机制（Double Write）\")]),_._v(\" \"),t(\"li\",[_._v(\"自适应哈希索引（Adaptive Hash Index，AHI）\")]),_._v(\" \"),t(\"li\",[_._v(\"预读 （Read Ahead）\")])]),_._v(\" \"),t(\"h4\",{attrs:{id:\"myisam\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#myisam\"}},[_._v(\"#\")]),_._v(\" MyISAM\")]),_._v(\" \"),t(\"p\",[_._v(\"在 5.1 版本之前，MyISAM 是 MySQL 的默认存储引擎，MyISAM 并发性比较差，使用的场景比较少，主要特点是\")]),_._v(\" \"),t(\"p\",[_._v(\"每个MyISAM表存储在磁盘上的三个文件中 。这些文件的名称以表名开头，并有一个扩展名来指示文件类型 。\")]),_._v(\" \"),t(\"p\",[t(\"code\",[_._v(\".frm\")]),_._v(\"文件存储表的格式。 \"),t(\"code\",[_._v(\".MYD\")]),_._v(\" (\"),t(\"code\",[_._v(\"MYData\")]),_._v(\") 文件存储表的数据。 \"),t(\"code\",[_._v(\".MYI\")]),_._v(\" (\"),t(\"code\",[_._v(\"MYIndex\")]),_._v(\") 文件存储索引。\")]),_._v(\" \"),t(\"p\",[t(\"strong\",[_._v(\"MyISAM表具有以下特征\")])]),_._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[_._v(\"每个MyISAM表最大索引数是64，这可以通过重新编译来改变。每个索引最大的列数是16\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"每个MyISAM表都支持一个\"),t(\"code\",[_._v(\"AUTO_INCREMENT\")]),_._v(\"的内部列。当执行\"),t(\"code\",[_._v(\"INSERT\")]),_._v(\"或者\"),t(\"code\",[_._v(\"UPDATE\")]),_._v(\"操作的时候，MyISAM自动更新这个列，这使得\"),t(\"code\",[_._v(\"AUTO_INCREMENT\")]),_._v(\"列更快。\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"当把删除和更新及插入操作混合使用的时候，动态尺寸的行产生更少碎片。这要通过合并相邻被删除的块，若下一个块被删除，就扩展到下一块自动完成\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"MyISAM支持\"),t(\"strong\",[_._v(\"并发插入\")])])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"可以将数据文件和索引文件放在不同物理设备上的不同目录中\")]),_._v(\"，以更快地使用数据目录和索引目录表选项来创建表\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"BLOB和TEXT列可以被索引\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[_._v(\"NULL被允许在索引的列中\")]),_._v(\"，这个值占每个键的0~1个字节\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"每个字符列可以有不同的字符集\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[t(\"code\",[_._v(\"MyISAM\")]),_._v(\" 表使用 B-tree 索引\")])])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"MyISAM表的行最大限制为  (2^32)^2 (1.844E+19)\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"大文件（达到63位文件长度）在支持大文件的文件系统和操作系统上被支持\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"键的最大长度为1000字节，这也可以通过重新编译来改变，对于键长度超过250字节的情况，一个超过1024字节的键将被用上\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"VARCHAR支持固定或动态记录长度\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"表中VARCHAR和CHAR列的长度总和有可能达到64KB\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[_._v(\"任意长度的唯一约束\")])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"small\",[_._v(\"All data values are stored with the low byte first. This makes the data machine and operating system independent. \")])])]),_._v(\" \"),t(\"li\",[t(\"p\",[t(\"small\",[_._v(\" All numeric key values are stored with the high byte first to permit better index compression\")])]),_._v(\" \"),t(\"p\",[_._v(\"todo：最后两条没搞懂啥意思\")])])]),_._v(\" \"),t(\"h3\",{attrs:{id:\"存储引擎对比\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#存储引擎对比\"}},[_._v(\"#\")]),_._v(\" 存储引擎对比\")]),_._v(\" \"),t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[_._v(\"对比项\")]),_._v(\" \"),t(\"th\",[_._v(\"MyISAM\")]),_._v(\" \"),t(\"th\",[_._v(\"InnoDB\")])])]),_._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[_._v(\"主外键\")]),_._v(\" \"),t(\"td\",[_._v(\"不支持\")]),_._v(\" \"),t(\"td\",[_._v(\"支持\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[_._v(\"事务\")]),_._v(\" \"),t(\"td\",[_._v(\"不支持\")]),_._v(\" \"),t(\"td\",[_._v(\"支持\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[_._v(\"行表锁\")]),_._v(\" \"),t(\"td\",[_._v(\"表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作\")]),_._v(\" \"),t(\"td\",[_._v(\"行锁,操作时只锁某一行，不对其它行有影响，\"),t(\"br\"),_._v(\"适合高并发的操作\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[_._v(\"缓存\")]),_._v(\" \"),t(\"td\",[_._v(\"只缓存索引，不缓存真实数据\")]),_._v(\" \"),t(\"td\",[_._v(\"不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[_._v(\"表空间\")]),_._v(\" \"),t(\"td\",[_._v(\"小\")]),_._v(\" \"),t(\"td\",[_._v(\"大\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[_._v(\"关注点\")]),_._v(\" \"),t(\"td\",[_._v(\"性能\")]),_._v(\" \"),t(\"td\",[_._v(\"事务\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[_._v(\"默认安装\")]),_._v(\" \"),t(\"td\",[_._v(\"是\")]),_._v(\" \"),t(\"td\",[_._v(\"是\")])])])]),_._v(\" \"),t(\"p\",[_._v(\"官方提供的多种引擎对比\")]),_._v(\" \"),t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[_._v(\"Feature\")]),_._v(\" \"),t(\"th\",[_._v(\"MyISAM\")]),_._v(\" \"),t(\"th\",[_._v(\"Memory\")]),_._v(\" \"),t(\"th\",[_._v(\"InnoDB\")]),_._v(\" \"),t(\"th\",[_._v(\"Archive\")]),_._v(\" \"),t(\"th\",[_._v(\"NDB\")])])]),_._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"B-tree indexes\")])]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Backup/point-in-time recovery\")]),_._v(\" (note 1)\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Cluster database support\")])]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Clustered indexes\")])]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Compressed data\")])]),_._v(\" \"),t(\"td\",[_._v(\"Yes (note 2)\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Data caches\")])]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"N/A\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Encrypted data\")])]),_._v(\" \"),t(\"td\",[_._v(\"Yes (note 3)\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes (note 3)\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes (note 4)\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes (note 3)\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes (note 3)\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Foreign key support\")])]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes (note 5)\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Full-text search indexes\")])]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes (note 6)\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Geospatial data type support\")])]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Geospatial indexing support\")])]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes (note 7)\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Hash indexes\")])]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No (note 8)\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Index caches\")])]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"N/A\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Locking granularity\")])]),_._v(\" \"),t(\"td\",[_._v(\"Table\")]),_._v(\" \"),t(\"td\",[_._v(\"Table\")]),_._v(\" \"),t(\"td\",[_._v(\"Row\")]),_._v(\" \"),t(\"td\",[_._v(\"Row\")]),_._v(\" \"),t(\"td\",[_._v(\"Row\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"MVCC\")])]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Replication support\")]),_._v(\" (note 1)\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Limited (note 9)\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Storage limits\")])]),_._v(\" \"),t(\"td\",[_._v(\"256TB\")]),_._v(\" \"),t(\"td\",[_._v(\"RAM\")]),_._v(\" \"),t(\"td\",[_._v(\"64TB\")]),_._v(\" \"),t(\"td\",[_._v(\"None\")]),_._v(\" \"),t(\"td\",[_._v(\"384EB\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"T-tree indexes\")])]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Transactions\")])]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"No\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"strong\",[_._v(\"Update statistics for data dictionary\")])]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")]),_._v(\" \"),t(\"td\",[_._v(\"Yes\")])])])]),_._v(\" \"),t(\"h3\",{attrs:{id:\"数据的存储\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据的存储\"}},[_._v(\"#\")]),_._v(\" 数据的存储\")]),_._v(\" \"),t(\"p\",[_._v(\"在整个数据库体系结构中，我们可以使用不同的存储引擎来存储数据，而绝大多数存储引擎都以二进制的形式存储数据；这一节会介绍 InnoDB 中对数据是如何存储的。\")]),_._v(\" \"),t(\"p\",[_._v(\"在 InnoDB 存储引擎中，所有的数据都被逻辑地存放在表空间中，表空间（tablespace）是存储引擎中最高的存储逻辑单位，在表空间的下面又包括段（segment）、区（extent）、页（page）\")]),_._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://img.starfish.ink/mysql/table-space.jpg\",alt:\"\"}})]),_._v(\" \"),t(\"p\",[_._v(\"同一个数据库实例的所有表空间都有相同的页大小；默认情况下，表空间中的页大小都为 16KB，当然也可以通过改变 \"),t(\"code\",[_._v(\"innodb_page_size\")]),_._v(\" 选项对默认大小进行修改，需要注意的是不同的页大小最终也会导致区大小的不同\")]),_._v(\" \"),t(\"p\",[_._v(\"对于 16KB 的页来说，连续的 64 个页就是一个区，也就是 1 个区默认占用 1 MB 空间的大小。\")]),_._v(\" \"),t(\"h4\",{attrs:{id:\"数据页结构\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据页结构\"}},[_._v(\"#\")]),_._v(\" 数据页结构\")]),_._v(\" \"),t(\"p\",[_._v(\"页是 InnoDB 存储引擎管理数据的最小磁盘单位，一个页的大小一般是 \"),t(\"code\",[_._v(\"16KB\")]),_._v(\"。\")]),_._v(\" \"),t(\"p\",[t(\"code\",[_._v(\"InnoDB\")]),_._v(\" 为了不同的目的而设计了许多种不同类型的\"),t(\"code\",[_._v(\"页\")]),_._v(\"，比如存放表空间头部信息的页，存放 \"),t(\"code\",[_._v(\"Insert Buffer\")]),_._v(\" 信息的页，存放 \"),t(\"code\",[_._v(\"INODE\")]),_._v(\"信息的页，存放 \"),t(\"code\",[_._v(\"undo\")]),_._v(\" 日志信息的页等等等等。\")]),_._v(\" \"),t(\"p\",[_._v(\"B-Tree 节点就是实际存放表中数据的页面，我们在这里将要介绍页是如何组织和存储记录的；首先，一个 InnoDB 页有以下七个部分：\")]),_._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://img.starfish.ink/mysql/innodb-b-tree-node.jpg\",alt:\"\"}})]),_._v(\" \"),t(\"p\",[_._v(\"有的部分占用的字节数是确定的，有的部分占用的字节数是不确定的。\")]),_._v(\" \"),t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[_._v(\"名称\")]),_._v(\" \"),t(\"th\",[_._v(\"中文名\")]),_._v(\" \"),t(\"th\",[_._v(\"占用空间大小\")]),_._v(\" \"),t(\"th\",[_._v(\"简单描述\")])])]),_._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"File Header\")])]),_._v(\" \"),t(\"td\",[_._v(\"文件头部\")]),_._v(\" \"),t(\"td\",[t(\"code\",[_._v(\"38\")]),_._v(\"字节\")]),_._v(\" \"),t(\"td\",[_._v(\"页的一些通用信息\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"Page Header\")])]),_._v(\" \"),t(\"td\",[_._v(\"页面头部\")]),_._v(\" \"),t(\"td\",[t(\"code\",[_._v(\"56\")]),_._v(\"字节\")]),_._v(\" \"),t(\"td\",[_._v(\"数据页专有的一些信息\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"Infimum + Supremum\")])]),_._v(\" \"),t(\"td\",[_._v(\"最小记录和最大记录\")]),_._v(\" \"),t(\"td\",[t(\"code\",[_._v(\"26\")]),_._v(\"字节\")]),_._v(\" \"),t(\"td\",[_._v(\"两个虚拟的行记录\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"User Records\")])]),_._v(\" \"),t(\"td\",[_._v(\"用户记录\")]),_._v(\" \"),t(\"td\",[_._v(\"不确定\")]),_._v(\" \"),t(\"td\",[_._v(\"实际存储的行记录内容\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"Free Space\")])]),_._v(\" \"),t(\"td\",[_._v(\"空闲空间\")]),_._v(\" \"),t(\"td\",[_._v(\"不确定\")]),_._v(\" \"),t(\"td\",[_._v(\"页中尚未使用的空间\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"Page Directory\")])]),_._v(\" \"),t(\"td\",[_._v(\"页面目录\")]),_._v(\" \"),t(\"td\",[_._v(\"不确定\")]),_._v(\" \"),t(\"td\",[_._v(\"页中的某些记录的相对位置\")])]),_._v(\" \"),t(\"tr\",[t(\"td\",[t(\"code\",[_._v(\"File Trailer\")])]),_._v(\" \"),t(\"td\",[_._v(\"文件尾部\")]),_._v(\" \"),t(\"td\",[t(\"code\",[_._v(\"8\")]),_._v(\"字节\")]),_._v(\" \"),t(\"td\",[_._v(\"校验页是否完整\")])])])]),_._v(\" \"),t(\"p\",[_._v(\"在页的 7 个组成部分中，我们自己存储的记录会按照我们指定的\"),t(\"code\",[_._v(\"行格式\")]),_._v(\"存储到 \"),t(\"code\",[_._v(\"User Records\")]),_._v(\" 部分。但是在一开始生成页的时候，其实并没有 \"),t(\"code\",[_._v(\"User Records\")]),_._v(\" 这个部分，每当我们插入一条记录，都会从 \"),t(\"code\",[_._v(\"Free Space\")]),_._v(\" 部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到 \"),t(\"code\",[_._v(\"User Records\")]),_._v(\" 部分，当 \"),t(\"code\",[_._v(\"Free Space\")]),_._v(\" 部分的空间全部被 \"),t(\"code\",[_._v(\"User Records\")]),_._v(\" 部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了，这个过程的图示如下：\")]),_._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://img.starfish.ink/mysql/page-application-record.png\",alt:\"\"}})]),_._v(\" \"),t(\"h4\",{attrs:{id:\"如何存储表\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何存储表\"}},[_._v(\"#\")]),_._v(\" 如何存储表\")]),_._v(\" \"),t(\"p\",[_._v(\"MySQL 使用 InnoDB 存储表时，会将表的定义和数据索引等信息分开存储，其中前者存储在 \"),t(\"code\",[_._v(\".frm\")]),_._v(\" 文件中，后者存储在 \"),t(\"code\",[_._v(\".ibd\")]),_._v(\" 文件中。\")]),_._v(\" \"),t(\"h4\",{attrs:{id:\"frm-文件\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#frm-文件\"}},[_._v(\"#\")]),_._v(\" .frm 文件\")]),_._v(\" \"),t(\"p\",[_._v(\"无论在 MySQL 中选择了哪个存储引擎，所有的 MySQL 表都会在硬盘上创建一个 \"),t(\"code\",[_._v(\".frm\")]),_._v(\" 文件用来描述表的格式或者说定义；\"),t(\"code\",[_._v(\".frm\")]),_._v(\" 文件的格式在不同的平台上都是相同的。\")]),_._v(\" \"),t(\"blockquote\",[t(\"p\",[_._v(\"MySQL 官方文档中的 \"),t(\"a\",{attrs:{href:\"https://dev.mysql.com/doc/internals/en/frm-file-format.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[_._v(\"11.1 MySQL .frm File Format\"),t(\"OutboundLink\")],1),_._v(\" 一文对于 \"),t(\"code\",[_._v(\".frm\")]),_._v(\" 文件格式中的二进制的内容有着非常详细的表述。\")])]),_._v(\" \"),t(\"h4\",{attrs:{id:\"ibd-文件\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ibd-文件\"}},[_._v(\"#\")]),_._v(\" .ibd 文件\")]),_._v(\" \"),t(\"p\",[_._v(\"InnoDB 中用于存储数据的文件总共有两个部分，一是系统表空间文件，包括 \"),t(\"code\",[_._v(\"ibdata1\")]),_._v(\"、\"),t(\"code\",[_._v(\"ibdata2\")]),_._v(\" 等文件，其中存储了 InnoDB 系统信息和用户数据库表数据和索引，是所有表公用的。\")]),_._v(\" \"),t(\"p\",[_._v(\"当打开 \"),t(\"code\",[_._v(\"innodb_file_per_table\")]),_._v(\" 选项时，\"),t(\"code\",[_._v(\".ibd\")]),_._v(\" 文件就是每一个表独有的表空间，文件存储了当前表的数据和相关的索引数据。\")]),_._v(\" \"),t(\"h4\",{attrs:{id:\"如何存储记录-innodb-行格式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何存储记录-innodb-行格式\"}},[_._v(\"#\")]),_._v(\" 如何存储记录 | InnoDB  行格式\")]),_._v(\" \"),t(\"p\",[_._v(\"InnoDB 存储引擎和大多数数据库一样，记录是以行的形式存储的，每个 16KB 大小的页中可以存放多条行记录。\")]),_._v(\" \"),t(\"p\",[_._v(\"它可以使用不同的行格式进行存储。\")]),_._v(\" \"),t(\"p\",[_._v(\"InnoDB 早期的文件格式为 \"),t(\"code\",[_._v(\"Antelope\")]),_._v(\"，可以定义两种行记录格式，分别是 \"),t(\"code\",[_._v(\"Compact\")]),_._v(\" 和 \"),t(\"code\",[_._v(\"Redundant\")]),_._v(\"，InnoDB 1.0.x 版本开始引入了新的文件格式 \"),t(\"code\",[_._v(\"Barracuda\")]),_._v(\"。\"),t(\"code\",[_._v(\"Barracuda\")]),_._v(\"文件格式下拥有两种新的行记录格式：\"),t(\"code\",[_._v(\"Compressed\")]),_._v(\" 和 \"),t(\"code\",[_._v(\"Dynamic\")]),_._v(\"。\")]),_._v(\" \"),t(\"blockquote\",[t(\"p\",[t(\"a\",{attrs:{href:\"https://dev.mysql.com/doc/refman/5.7/en/innodb-row-format.html#innodb-row-format-redundant\",target:\"_blank\",rel:\"noopener noreferrer\"}},[_._v(\"InnoDB Row Formats\"),t(\"OutboundLink\")],1)])]),_._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://img.starfish.ink/mysql/innodb-row-format.png\",alt:\"\"}})]),_._v(\" \"),t(\"p\",[_._v(\"MySQL 5.7 版本支持以上格式的行存储方式。\")]),_._v(\" \"),t(\"p\",[_._v(\"我们可以在创建或修改表的语句中指定行格式：\")]),_._v(\" \"),t(\"div\",{staticClass:\"language-mysql extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[_._v(\"CREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称\\n    \\nALTER TABLE 表名 ROW_FORMAT=行格式名称\\n\")])])]),t(\"p\",[t(\"code\",[_._v(\"Compact\")]),_._v(\"行记录格式是在 MySQL 5.0 中引入的，其首部是一个非 NULL 变长列长度列表，并且是逆序放置的，其长度为：\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"若列的长度小于等于 255 字节，用 1 个字节表示；\")]),_._v(\" \"),t(\"li\",[_._v(\"若列的长度大于 255 字节，用 2 个字节表示。\")])]),_._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://miro.medium.com/v2/resize:fit:1400/1*wNIUPIn4jo9kKbLvsmSUDQ.png\",alt:\"Compact row format\"}})]),_._v(\" \"),t(\"p\",[_._v(\"变长字段的长度最大不可以超过 2 字节，这是因为 MySQL 数据库中 VARCHAR 类型的最大长度限制为 65535。变长字段之后的第二个部分是 NULL 标志位，该标志位指示了该行数据中某列是否为 NULL 值，有则用 1 表示，NULL 标志位也是不定长的。接下来是记录头部信息，固定占用 5 字节。\")]),_._v(\" \"),t(\"p\",[t(\"code\",[_._v(\"Redundant\")]),_._v(\" 是 MySQL 5.0 版本之前 InnoDB 的行记录格式，\"),t(\"code\",[_._v(\"Redundant\")]),_._v(\" 行记录格式的首部是每一列长度偏移列表，同样是逆序存放的。从整体上看，\"),t(\"code\",[_._v(\"Compact\")]),_._v(\"格式的存储空间减少了约 20%，但代价是某些操作会增加 CPU 的使用。\")]),_._v(\" \"),t(\"p\",[t(\"code\",[_._v(\"Dynamic\")]),_._v(\" 和 \"),t(\"code\",[_._v(\"Compressed\")]),_._v(\"是 \"),t(\"code\",[_._v(\"Compact\")]),_._v(\"行记录格式的变种，\"),t(\"code\",[_._v(\"Compressed\")]),_._v(\"会对存储在其中的行数据会以 \"),t(\"code\",[_._v(\"zlib\")]),_._v(\" 的算法进行压缩，因此对于 BLOB、TEXT、VARCHAR 这类大长度类型的数据能够进行非常有效的存储。\")]),_._v(\" \"),t(\"blockquote\",[t(\"p\",[_._v(\"高版本，比如 8.3 默认使用的是 Dynamic\")]),_._v(\" \"),t(\"div\",{staticClass:\"language-sql extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[_._v(\"SELECT\")]),_._v(\" @\"),t(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[_._v(\"@innodb_default_row_format\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[_._v(\";\")]),_._v(\"\\n\")])])])]),_._v(\" \"),t(\"h4\",{attrs:{id:\"行溢出数据\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#行溢出数据\"}},[_._v(\"#\")]),_._v(\" 行溢出数据\")]),_._v(\" \"),t(\"p\",[_._v(\"当 InnoDB 存储极长的 TEXT 或者 BLOB 这类大对象时，MySQL 并不会直接将所有的内容都存放在数据页中。因为 InnoDB 存储引擎使用 B+Tree 组织索引，每个页中至少应该有两条行记录，因此，如果页中只能存放下一条记录，那么 InnoDB 存储引擎会自动将行数据存放到溢出页中。\")]),_._v(\" \"),t(\"p\",[_._v(\"如果我们使用 \"),t(\"code\",[_._v(\"Compact\")]),_._v(\" 或 \"),t(\"code\",[_._v(\"Redundant\")]),_._v(\" 格式，那么会将行数据中的前  768  个字节存储在数据页中，后面的数据会通过指针指向 Uncompressed BLOB Page。\")]),_._v(\" \"),t(\"p\",[_._v(\"但是如果我们使用新的行记录格式 \"),t(\"code\",[_._v(\"Compressed\")]),_._v(\" 或者 \"),t(\"code\",[_._v(\"Dynamic\")]),_._v(\" 时只会在行记录中保存 20 个字节的指针，实际的数据都会存放在溢出页面中。\")]),_._v(\" \"),t(\"h3\",{attrs:{id:\"参考与引用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考与引用\"}},[_._v(\"#\")]),_._v(\" 参考与引用：\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"https://www.linkedin.com/pulse/leverage-innodb-architecture-optimize-django-model-design-bouslama\")]),_._v(\" \"),t(\"li\",[t(\"a\",{attrs:{href:\"https://www.cnblogs.com/chenpingzhao/p/9177324.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[_._v(\"踏雪无痕-InnoDB存储引擎\"),t(\"OutboundLink\")],1)]),_._v(\" \"),t(\"li\",[t(\"a\",{attrs:{href:\"https://wingsxdu.com/posts/database/mysql/innodb/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[_._v(\"MySQL 与 InnoDB 存储引擎总结\"),t(\"OutboundLink\")],1)])])])}),[],!1,null,null,null);v.default=d.exports}}]);","extractedComments":[]}