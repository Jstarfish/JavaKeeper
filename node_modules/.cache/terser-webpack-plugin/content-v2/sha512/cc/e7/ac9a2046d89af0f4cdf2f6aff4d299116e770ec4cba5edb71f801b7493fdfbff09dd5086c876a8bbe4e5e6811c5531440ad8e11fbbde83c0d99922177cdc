{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{594:function(t,a,s){\"use strict\";s.r(a);var n=s(6),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"blockquote\",[s(\"p\",[t._v(\"官方文档才是最好的入门学习文档：https://hadoop.apache.org/docs/r1.0.4/cn/mapred_tutorial.html\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"一、mapreduce-概述\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、mapreduce-概述\"}},[t._v(\"#\")]),t._v(\" 一、MapReduce 概述\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-1-mapreduce-定义\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-mapreduce-定义\"}},[t._v(\"#\")]),t._v(\" 1.1 MapReduce 定义\")]),t._v(\" \"),s(\"p\",[t._v(\"MapReduce 是一个\"),s(\"mark\",[s(\"strong\",[t._v(\"分布式运算程序的编程框架\")])]),t._v(\"，是用户开发“基于Hadoop的数据分析应用”的核心框架。基于它写出来的应用程序能够运行在由上千个商用机器组成的大型集群上，并以一种可靠容错的方式并行处理上T级别的数据集。\")]),t._v(\" \"),s(\"p\",[t._v(\"MapReduce 核心功能是将\"),s(\"strong\",[t._v(\"用户编写的业务逻辑代码\")]),t._v(\"和\"),s(\"strong\",[t._v(\"自带默认组件\")]),t._v(\"整合成一个完整的\"),s(\"strong\",[t._v(\"分布式运算程序\")]),t._v(\"，并发运行在一个 Hadoop 集群上。\")]),t._v(\" \"),s(\"p\",[t._v(\"一个Map/Reduce \"),s(\"em\",[t._v(\"作业（job）\")]),t._v(\" 通常会把输入的数据集切分为若干独立的数据块，由 \"),s(\"em\",[t._v(\"map任务（task）\"),s(\"em\",[t._v(\"以完全并行的方式处理它们。框架会对map的输出先进行排序， 然后把结果输入给\")]),t._v(\"reduce任务\")]),t._v(\"。通常作业的输入和输出都会被存储在文件系统中。 整个框架负责任务的调度和监控，以及重新执行已经失败的任务。\")]),t._v(\" \"),s(\"p\",[t._v(\"通常，Map/Reduce框架和\"),s(\"a\",{attrs:{href:\"https://hadoop.apache.org/docs/r1.0.4/cn/hdfs_design.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"分布式文件系统\"),s(\"OutboundLink\")],1),t._v(\"是运行在一组相同的节点上的，也就是说，计算节点和存储节点通常在一起。这种配置允许框架在那些已经存好数据的节点上高效地调度任务，这可以使整个集群的网络带宽被非常高效地利用。\")]),t._v(\" \"),s(\"p\",[t._v(\"Map/Reduce框架由一个单独的 master JobTracker 和每个集群节点一个 slave TaskTracker 共同组成。master 负责调度构成一个作业的所有任务，这些任务分布在不同的 slave 上，master 监控它们的执行，重新执行已经失败的任务。而 slave 仅负责执行由 master 指派的任务。\")]),t._v(\" \"),s(\"p\",[t._v(\"应用程序至少应该指明输入/输出的位置（路径），并通过实现合适的接口或抽象类提供map和reduce函数。再加上其他作业的参数，就构成了\"),s(\"em\",[t._v(\"作业配置（job configuration）\")]),t._v(\"。然后，Hadoop 的 \"),s(\"em\",[t._v(\"job client\")]),t._v(\"提交作业（jar包/可执行程序等）和配置信息给 JobTracker，后者负责分发这些软件和配置信息给 slave、调度任务并监控它们的执行，同时提供状态和诊断信息给 job-client。\")]),t._v(\" \"),s(\"p\",[t._v(\"虽然Hadoop框架是用JavaTM实现的，但Map/Reduce应用程序则不一定要用 Java来写 。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"https://hadoop.apache.org/core/docs/r0.18.2/api/org/apache/hadoop/streaming/package-summary.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Hadoop Streaming\"),s(\"OutboundLink\")],1),t._v(\"是一种运行作业的实用工具，它允许用户创建和运行任何可执行程序 （例如：Shell工具）来做为mapper和reducer。\")]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"https://hadoop.apache.org/core/docs/r0.18.2/api/org/apache/hadoop/mapred/pipes/package-summary.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Hadoop Pipes\"),s(\"OutboundLink\")],1),t._v(\"是一个与\"),s(\"a\",{attrs:{href:\"http://www.swig.org/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"SWIG\"),s(\"OutboundLink\")],1),t._v(\"兼容的C++ API （没有基于JNITM技术），它也可用于实现Map/Reduce应用程序。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-2-mapreduce-优缺点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-mapreduce-优缺点\"}},[t._v(\"#\")]),t._v(\" 1.2 MapReduce 优缺点\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"优点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#优点\"}},[t._v(\"#\")]),t._v(\" 优点\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"易于编程\")])]),t._v(\" \"),s(\"p\",[t._v(\"它简单的实现一些接口，就可以完成一个分布式程序，这个分布式程序可以分布到大量廉价的 PC机器上运行。也就是说你写一个分布式程序，跟写一个简单的串行程序是一模一样的。就是因为这个特点使得MapReduce 编程变得非常流行。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"良好的扩展性\")])]),t._v(\" \"),s(\"p\",[t._v(\"当你的计算资源不能得到满足的时候，你可以通过简单的增加机器来扩展它的计算能力。 MapReduce\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"高容错性\")])]),t._v(\" \"),s(\"p\",[t._v(\"MapReduce 设计的初衷就是使程序能够部署在廉价的 PC 机器上，这就要求它具有很高的容错性。比如其中一台机器挂了，它可以把上面的计算任务 转移到另外一个节点上运行，不至于这个任务运行失败，而且这个过程不需要人工参与，而完全是由 Hadoop 内部完成的。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"适合 PB 级以上海量数据的离线处理\")])]),t._v(\" \"),s(\"p\",[t._v(\"可以实现上千台服务器集群并发工作，提供数据处理能力。\")])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"缺点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缺点\"}},[t._v(\"#\")]),t._v(\" 缺点\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"不擅长实时计算\")])]),t._v(\" \"),s(\"p\",[t._v(\"MapReduce 无法像 MySQL 一样，在毫秒或者秒级内返回结果。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"不擅长流式计算\")])]),t._v(\" \"),s(\"p\",[t._v(\"流式计算的输入数据是动态的，而 MapReduce 的输入数据集是静态的，不能动态变化。这是因为MapReduce 自身的设计特点决定了数据源必须是静态的。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"不擅长DAG（有向图）计算\")])]),t._v(\" \"),s(\"p\",[t._v(\"多个应用程序存在依赖关系，后一个应用程序的输入为前一个的输出。在这种情况下，MapReduce 并不是不能做，而是使用后，每个 MapReduce作业的输出结果都会写入到磁盘，会造成大量的磁盘 IO，导致性能非常的低下。\")])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-3-mapreduce-核心思想\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-mapreduce-核心思想\"}},[t._v(\"#\")]),t._v(\" 1.3 MapReduce 核心思想\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/3d068497-63b8-4e14-8100-8e63f9d835a9.png\",alt:\"image-20200723104319403\"}})]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"分布式的运算程序往往需要分成至少 2 个阶段。\")]),t._v(\" \"),s(\"li\",[t._v(\"第一个阶段的 MapTask 并发实例，完全并行运行，互不相干。\")]),t._v(\" \"),s(\"li\",[t._v(\"第二个阶段的 ReduceTask 并发实例互不相干，但是他们的数据依赖于上一个阶段的所有 MapTask 并发实例的输出。\")]),t._v(\" \"),s(\"li\",[t._v(\"MapReduce 编程模型只能包含一个 Map 阶段和一个 Reduce 阶段，如果用户的业务逻辑非常复杂，那就只能多个 MapReduce 程序，串行运行。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-4-mapreduce-进程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-4-mapreduce-进程\"}},[t._v(\"#\")]),t._v(\" 1.4 MapReduce 进程\")]),t._v(\" \"),s(\"p\",[t._v(\"一个完整的 MapReduce 程序在分布式运行时有三类实例进程：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"MrAppMaster： 负责整个程序的过程调度及状态协调\")]),t._v(\" \"),s(\"li\",[t._v(\"MapTask： 负责 Map 阶段的整个数据处理流程\")]),t._v(\" \"),s(\"li\",[t._v(\"ReduceTask：负责 Reduce 阶段的整个数据处理流程\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-5-官方-wordcount-源码\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-5-官方-wordcount-源码\"}},[t._v(\"#\")]),t._v(\" 1.5 官方 WordCount 源码\")]),t._v(\" \"),s(\"p\",[t._v(\"采用反编译工具反编译源码，发现 WordCount 案例有 Map 类、Reduce 类和驱动类。且数据的类型是 Hadoop 自身封装的序列化类型。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-6-常用数据序列化类型\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-6-常用数据序列化类型\"}},[t._v(\"#\")]),t._v(\" 1.6 常用数据序列化类型\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/9b598cd2-756c-48b7-8526-4d075dad916b.png\",alt:\"image-20200723104612516\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-7-mapreduce-编程规范\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-7-mapreduce-编程规范\"}},[t._v(\"#\")]),t._v(\" 1.7 MapReduce 编程规范\")]),t._v(\" \"),s(\"p\",[t._v(\"用户编写的程序分成三个部分：Mapper、Reducer 和 Driver。\")]),t._v(\" \"),s(\"p\",[t._v(\"1、Mapper 阶段\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t① 用户自定义的 Mapper 要继承自己的父类\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t② Mapper 的输入数据是 KV 对的形式（KV的类型可自定义）\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t③ Mapper 中的业务逻辑写在 map() 方法中\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t④ Mapper 的输出数据是 KV 对的形式（KV 的类型可自定义）\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t⑤ map() 方法（MapTask 进程）对每一个调用一次\")]),t._v(\" \"),s(\"p\",[t._v(\"2、Reducer 阶段\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t① 用户自定义的 Reducer 要继承自己的父类\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t② Reducer 的输入数据类型对应 Mapper 的输出数据类型，也是KV\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t③ Reducer 的业务逻辑写在 reduce() 方法中\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t④ ReduceTask 进程对每一组相同k的组调用一次 reduce() 方法\")]),t._v(\" \"),s(\"p\",[t._v(\"3、Driver 阶段\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t相当于 YARN 集群的客户端，用于提交我们整个程序到 YARN 集群，提交的是封装了 MapReduce 程序相关运\\t行参数的 job 对象\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-8-输入与输出\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-8-输入与输出\"}},[t._v(\"#\")]),t._v(\" 1.8 输入与输出\")]),t._v(\" \"),s(\"p\",[t._v(\"Map/Reduce框架运转在<key, value> 键值对上，也就是说， 框架把作业的输入看为是一组<key, value> 键值对，同样也产出一组 <key, value> 键值对做为作业的输出，这两组键值对的类型可能不同。\")]),t._v(\" \"),s(\"p\",[t._v(\"框架需要对key和value的类(classes)进行序列化操作， 因此，这些类需要实现 \"),s(\"a\",{attrs:{href:\"https://hadoop.apache.org/core/docs/r0.18.2/api/org/apache/hadoop/io/Writable.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Writable\"),s(\"OutboundLink\")],1),t._v(\"接口。 另外，为了方便框架执行排序操作，key类必须实现 \"),s(\"a\",{attrs:{href:\"https://hadoop.apache.org/core/docs/r0.18.2/api/org/apache/hadoop/io/WritableComparable.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"WritableComparable\"),s(\"OutboundLink\")],1),t._v(\"接口。\")]),t._v(\" \"),s(\"p\",[t._v(\"一个Map/Reduce 作业的输入和输出类型如下所示：\")]),t._v(\" \"),s(\"p\",[t._v(\"(input) <k1, v1> -> \"),s(\"strong\",[t._v(\"map\")]),t._v(\" -> <k2, v2> -> \"),s(\"strong\",[t._v(\"combine\")]),t._v(\" -> <k2, v2> -> \"),s(\"strong\",[t._v(\"reduce\")]),t._v(\" -> <k3, v3> (output)\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-9-hello-world\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-9-hello-world\"}},[t._v(\"#\")]),t._v(\" 1.9 hello world\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"我们用官方提供的 WordCount 例子\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"二、hadoop-序列化\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、hadoop-序列化\"}},[t._v(\"#\")]),t._v(\" 二、Hadoop 序列化\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2-1-序列化概述\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-序列化概述\"}},[t._v(\"#\")]),t._v(\" 2.1 序列化概述\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-1-1-什么是序列化\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-1-什么是序列化\"}},[t._v(\"#\")]),t._v(\" 2.1.1 什么是序列化\")]),t._v(\" \"),s(\"p\",[t._v(\"序列化就是把内存中的对象，转换成字节序列（或其他数据传输协议）以便于存储到磁盘（持久化）和网络传输。 反序列化就是将收到字节序列（或其他数据传输协议）或者是磁盘的持久化数据，转换成内存中的对象。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-1-2-为什么要序列化\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-2-为什么要序列化\"}},[t._v(\"#\")]),t._v(\" 2.1.2 为什么要序列化\")]),t._v(\" \"),s(\"p\",[t._v(\"一般来说，“活的”对象只生存在内存里，关机断电就没有了。而且“活的” 对象只能由本地的进程使用，不能被发送到网络上的另外一台计算机。 然而序列化可以存储“活的”对象，可以将“活的”对象发送到远程计算机。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-1-3-为什么不用java的序列化\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-3-为什么不用java的序列化\"}},[t._v(\"#\")]),t._v(\" 2.1.3 为什么不用Java的序列化\")]),t._v(\" \"),s(\"p\",[t._v(\"Java 的序列化是一个重量级序列化框架（Serializable），一个对象被序列化后，会附带很多额外的信息（各种校验信息，Header，继承体系等），不便于在网络中高效传输。所以，Hadoop 自己开发了一套序列化机制（Writable）。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"Hadoop序列化特点：\")])]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"紧凑 ：高效使用存储空间\")]),t._v(\" \"),s(\"li\",[t._v(\"快速：读写数据的额外开销小\")]),t._v(\" \"),s(\"li\",[t._v(\"可扩展：随着通信协议的升级而可升级\")]),t._v(\" \"),s(\"li\",[t._v(\"互操作：支持多语言的交互\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-2-自定义-bean-对象实现序列化接口-writable\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-自定义-bean-对象实现序列化接口-writable\"}},[t._v(\"#\")]),t._v(\" 2.2 自定义 bean 对象实现序列化接口（Writable）\")]),t._v(\" \"),s(\"p\",[t._v(\"在企业开发中往往常用的基本序列化类型不能满足所有需求，比如在 Hadoop 框架内部传递一个 bean 对象，那么该对象就需要实现序列化接口。 具体实现 bean 对象序列化步骤如下 7 步。\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"必须实现 Writable 接口\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"反序列化时，需要反射调用空参构造函数，所以必须有空参构造\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"super\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"重写序列化方法\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"write\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"DataOutput\")]),t._v(\" out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IOException\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\tout\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"writeLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"upFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\tout\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"writeLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"downFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\tout\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"writeLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"sumFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"重写反序列化方法\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"readFields\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"DataInput\")]),t._v(\" in\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IOException\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\tupFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" in\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"readLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\tdownFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" in\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"readLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\tsumFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" in\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"readLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"注意反序列化的顺序和序列化的顺序完全一致\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"要想把结果显示在文件中，需要重写 toString()，可用”\\\\t”分开，方便后续用\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"如果需要将自定义的 bean 放在 key 中传输，则还需要实现 Comparable 接口，因为 MapReduce 框中的 Shuffle 过程要求对 key 必须能排序\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"compareTo\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),t._v(\" o\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 倒序排列，从大到小\")]),t._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"sumFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" o\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getSumFlow\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-3-序列化案例实操\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-序列化案例实操\"}},[t._v(\"#\")]),t._v(\" 2.3 序列化案例实操\")]),t._v(\" \"),s(\"p\",[t._v(\"1、需求：统计每一个手机号耗费的总上行流量、下行流量、总流量\")]),t._v(\" \"),s(\"p\",[t._v(\"​    ① 输入数据 phone_data .txt\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t② 输入数据格式：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/883a403a-23e7-46ae-85f0-2ee6e6706c34.png\",alt:\"image-20200723183657595\"}})]),t._v(\" \"),s(\"p\",[t._v(\"​\\t③ 期望输出数据格式\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/4c27e7ef-9adb-41ab-8d70-a5b6db428309.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"2、需求分析\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/d75006cd-24a9-48a6-ac7f-a738979c0584.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"3、编写 MapReduce 程序\")]),t._v(\" \"),s(\"p\",[t._v(\"① 编写流量统计的 Bean 对象\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"implements\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Writable\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" upFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 上行流量\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" downFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 下行流量\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" sumFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 总流量\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 空参构造， 为了后续反射用\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"super\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" upFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" downFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"super\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"upFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" upFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"downFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" downFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        sumFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" upFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" downFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 序列化方法\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"write\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"DataOutput\")]),t._v(\" out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IOException\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n        out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"writeLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"upFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"writeLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"downFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"writeLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"sumFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 反序列化方法\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"readFields\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"DataInput\")]),t._v(\" in\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IOException\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 必须要求和序列化方法顺序一致\")]),t._v(\"\\n        upFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" in\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"readLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        downFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" in\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"readLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        sumFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" in\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"readLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"toString\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" upFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"\\\\t\"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" downFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"\\\\t\"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" sumFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getUpFlow\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" upFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setUpFlow\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" upFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"upFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" upFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getDownFlow\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" downFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setDownFlow\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" downFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"downFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" downFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getSumFlow\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" sumFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setSumFlow\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" sumFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"sumFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" sumFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"set\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" upFlow2\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" downFlow2\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n        upFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" upFlow2\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        downFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" downFlow2\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        sumFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" upFlow2 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" downFlow2\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"② 编写 mapper\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowCountMapper\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"extends\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Mapper\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"LongWritable\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Text\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Text\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Text\")]),t._v(\" k \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Text\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),t._v(\" v \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"protected\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"map\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"LongWritable\")]),t._v(\" key\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Text\")]),t._v(\" value\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Context\")]),t._v(\" context\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IOException\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 7 13560436666 120.196.100.99 1116 954 200\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 1 获取一行\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" line \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" value\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"toString\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 2 切割 \\\\t\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" fields \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" line\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"split\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"\\\\t\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 3 封装对象\")]),t._v(\"\\n        k\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"set\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fields\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 封装手机号\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" upFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Long\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"parseLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fields\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fields\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" downFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Long\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"parseLong\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fields\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fields\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        v\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setUpFlow\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"upFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        v\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setDownFlow\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"downFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//\\t\\tv.set(upFlow,downFlow);\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 4 写出\")]),t._v(\"\\n        context\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"write\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"k\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" v\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"③ 编写 Reducer 类\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowCountReducer\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"extends\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Reducer\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Text\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Text\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),t._v(\" v \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"protected\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"reduce\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Text\")]),t._v(\" key\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Iterable\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" values\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Context\")]),t._v(\" context\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IOException\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//\\t\\t13568436656\\t2481\\t24681    30000\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//\\t\\t13568436656\\t1116\\t954\\t 20000\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" sum_upFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" sum_downFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 1 累加求和\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),t._v(\" flowBean \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" values\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n            sum_upFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+=\")]),t._v(\" flowBean\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getUpFlow\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            sum_downFlow \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+=\")]),t._v(\" flowBean\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getDownFlow\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n        v\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"set\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"sum_upFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" sum_downFlow\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 2 写出\")]),t._v(\"\\n        context\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"write\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"key\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" v\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"④ 编写 Driver 驱动类\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowsumDriver\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IOException\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ClassNotFoundException\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\\n\\t\\targs \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"e:/input/inputflow\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"e:/output1\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Configuration\")]),t._v(\" conf \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Configuration\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 1 获取job对象\")]),t._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Job\")]),t._v(\" job \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Job\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getInstance\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"conf \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 2 设置jar的路径\")]),t._v(\"\\n\\t\\tjob\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setJarByClass\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowsumDriver\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 3 关联mapper和reducer\")]),t._v(\"\\n\\t\\tjob\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setMapperClass\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowCountMapper\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tjob\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setReducerClass\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowCountReducer\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 4 设置mapper输出的key和value类型\")]),t._v(\"\\n\\t\\tjob\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setMapOutputKeyClass\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Text\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tjob\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setMapOutputValueClass\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 5 设置最终输出的key和value类型\")]),t._v(\"\\n\\t\\tjob\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setOutputKeyClass\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Text\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\tjob\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setOutputValueClass\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FlowBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//\\t\\tjob.setPartitionerClass(ProvincePartitioner.class);\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//\\t\\t\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//\\t\\tjob.setNumReduceTasks(6);\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//\\t\\t\")]),t._v(\"\\n\\t\\t\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 6 设置输入输出路径\")]),t._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FileInputFormat\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setInputPaths\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"job\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Path\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FileOutputFormat\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setOutputPath\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"job\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Path\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 7 提交job\")]),t._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"boolean\")]),t._v(\" result \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" job\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"waitForCompletion\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"exit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"result\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"三、mapreduce-框架原理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、mapreduce-框架原理\"}},[t._v(\"#\")]),t._v(\" 三、MapReduce 框架原理\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3-1-inputformat-数据输入\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-inputformat-数据输入\"}},[t._v(\"#\")]),t._v(\" 3.1 InputFormat 数据输入\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-1-1-切片与-maptask-并行度决定机制\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-1-切片与-maptask-并行度决定机制\"}},[t._v(\"#\")]),t._v(\" 3.1.1 切片与 MapTask 并行度决定机制\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"问题引出\")]),t._v(\" \"),s(\"p\",[t._v(\"MapTask 的并行度决定 Map 阶段的任务处理并发度，进而影响到整个 Job 的处理速度。\")]),t._v(\" \"),s(\"p\",[t._v(\"思考：1G 的数据，启动 8 个 MapTask，可以提高集群的并发处理能力。那么 1K 的数据，也启动 8 个 MapTask，会提高集群性能吗？MapTask 并行任务是否越多越好呢？哪些因素影响了 MapTask 并行度？\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"MapTask 并行度决定机制\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"数据块\")]),t._v(\"：Block 是 HDFS 物理上把数据分成一块一块。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"数据切片\")]),t._v(\"：数据切片只是在逻辑上对输入进行分片，并不会在磁盘上将其切分成片进行存储。\")])])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/a2240c23-3cf4-42dc-b8cb-dfd4969cb795.png\",alt:\"\"}})]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-1-2-job-提交流程源码和切片源码详解\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-2-job-提交流程源码和切片源码详解\"}},[t._v(\"#\")]),t._v(\" 3.1.2 Job 提交流程源码和切片源码详解\")]),t._v(\" \"),s(\"p\",[t._v(\"1．Job 提交流程源码详解，如图 4-8 所示\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"waitForCompletion\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"submit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 1 建立连接\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"connect\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 1）创建提交 Job 的代理\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Cluster\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getConfiguration\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// （1）判断是本地 yarn 还是远程\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"initialize\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"jobTrackAddr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" conf\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 2 提交 job\")]),t._v(\"\\nsubmitter\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"submitJobInternal\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Job\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" cluster\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 1）创建给集群提交数据的 Stag 路径\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Path\")]),t._v(\" jobStagingArea \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"JobSubmissionFiles\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getStagingDir\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"cluster\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" conf\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 2）获取 jobid ，并创建 Job 路径\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"JobID\")]),t._v(\" jobId \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" submitClient\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getNewJobID\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 3）拷贝 jar 包到集群\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"copyAndConfigureFiles\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"job\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" submitJobDir\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nrUploader\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"uploadFiles\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"job\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" jobSubmitDir\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 4）计算切片，生成切片规划文件\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"writeSplits\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"job\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" submitJobDir\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nmaps \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"writeNewSplits\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"job\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" jobSubmitDir\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\ninput\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getSplits\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"job\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 5）向 Stag 路径写 XML 配置文件\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"writeConf\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"conf\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" submitJobFile\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nconf\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"writeXml\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 6）提交 Job,返回提交状态\")]),t._v(\"\\nstatus \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" submitClient\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"submitJob\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"jobId\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\nsubmitJobDir\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"toString\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" job\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getCredentials\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/adfae885-c0a0-47e1-94d9-19976e3aeb85.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"2．FileInputFormat 切片源码解析(input.getSplits(job))\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）程序先找到你数据存储的目录。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）开始遍历处理（规划切片）目录下的每一个文件\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）遍历第一个文件ss.txt\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t\\ta）获取文件大小fs.sizeOf(ss.txt)\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t\\tb）计算切片大小 computeSplitSize(Math.max(minSize,Math.min(maxSize,blocksize)))=blocksize=128M \\t\\tc）默认情况下，切片大小=blocksize\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t\\td）开始切，形成第1个切片：ss.txt—0:128M 第2个切片ss.txt—128:256M 第3个切片ss.txt—256M:300M （每次切片时，都要判断切完剩下的部分是否大于块的1.1倍，不大于1.1倍就划分一块切片）\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t\\te）将切片信息写到一个切片规划文件中\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t\\t f）整个切片的核心过程在getSplit()方法中完成\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t\\tg）InputSplit只记录了切片的元数据信息，比如起始位置、长度以及所在的节点列表等。\")]),t._v(\" \"),s(\"p\",[t._v(\"（4）提交切片规划文件到YARN上，YARN上的MrAppMaster就可以根据切片规划文件计算开启MapTask个数。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-1-3-fileinputformat-切片机制\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-3-fileinputformat-切片机制\"}},[t._v(\"#\")]),t._v(\" 3.1.3 FileInputFormat 切片机制\")]),t._v(\" \"),s(\"p\",[t._v(\"1、切片机制\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）简单地按照文件的内容长度进行切片\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）切片大小，默认等于Block大小\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）切片时不考虑数据集整体，而是逐个针对每一个文件单独切片\")]),t._v(\" \"),s(\"p\",[t._v(\"2、案例分析\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/f60b287b-5328-42a2-8009-ec1fea3fe7af.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"（1）源码中计算切片大小的公式\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\" Math.max(minSize, Math.min(maxSize, blockSize)); \\n\\nmapreduce.input.fileinputformat.split.minsize=1  默认值为1 \\n\\nmapreduce.input.fileinputformat.split.maxsize= Long.MAXValue  默认值Long.MAXValue\\n\")])])]),s(\"p\",[t._v(\"因此，默认情况下，切片大小=blocksize。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）切片大小设置\")]),t._v(\" \"),s(\"p\",[t._v(\"maxsize（切片最大值）：参数如果调得比blockSize小，则会让切片变小，而且就等于配置的这个参数的值。 minsize（切片最小值）：参数调的比blockSize大，则可以让切片变得比blockSize还大。\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）获取切片信息API\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"// 获取切片的文件名称 \\n\\nString name = inputSplit.getPath().getName();\\n\\n // 根据文件类型获取切片信息\\n\\n FileSplit inputSplit = (FileSplit) context.getInputSplit();\\n\")])])]),s(\"h4\",{attrs:{id:\"_3-1-4-combinetextinputformat-切片机制\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-4-combinetextinputformat-切片机制\"}},[t._v(\"#\")]),t._v(\" 3.1.4 CombineTextInputFormat 切片机制\")]),t._v(\" \"),s(\"p\",[t._v(\"框架默认的 TextInputFormat 切片机制是对任务按文件规划切片，不管文件多小，都会是一个单独的切片，都会交给一个 MapTask，这样如果有大量小文件，就会产生大量的 MapTask，处理效率极其低下。\")]),t._v(\" \"),s(\"p\",[t._v(\"1、应用场景：\")]),t._v(\" \"),s(\"p\",[t._v(\"CombineTextInputFormat 用于小文件过多的场景，它可以将多个小文件从逻辑上规划到 一个切片中，这样，多个小文件就可以交给一个 MapTask 处理。\")]),t._v(\" \"),s(\"p\",[t._v(\"2、虚拟存储切片最大值设置\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"CombineTextInputFormat.setMaxInputSplitSize(job, 4194304);// 4m \\n\")])])]),s(\"p\",[t._v(\"注意：虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值。\")]),t._v(\" \"),s(\"p\",[t._v(\"3、切片机制\")]),t._v(\" \"),s(\"p\",[t._v(\"生成切片过程包括：虚拟存储过程和切片过程二部分。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/7111778f-3e86-46ec-8404-2e0ffe7dfe31.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"（1）虚拟存储过程：\")]),t._v(\" \"),s(\"p\",[t._v(\"将输入目录下所有文件大小，依次和设置的 setMaxInputSplitSize 值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍， 那么以最大值切割一块；当剩余数据大小超过设置的最大值且不大于最大值 2 倍，此时 将文件均分成 2 个虚拟存储块（防止出现太小切片）。\")]),t._v(\" \"),s(\"p\",[t._v(\"例如 setMaxInputSplitSize 值为 4M，输入文件大小为 8.02M，则先逻辑上分成一个 4M。剩余的大小为 4.02M，如果按照 4M 逻辑划分，就会出现 0.02M 的小的虚拟存储 文件，所以将剩余的 4.02M 文件切分成（2.01M 和 2.01M）两个文件。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）切片过程：\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t（a）判断虚拟存储的文件大小是否大于 setMaxInputSplitSize 值，大于等于则单独 形成一个切片。\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t（b）如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片。\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t（c）测试举例：有 4 个小文件大小分别为 1.7M、5.1M、3.4M 以及 6.8M 这四个小 文件，则虚拟存储之后形成 6 个文件块，大小分别为： 1.7M，（2.55M、2.55M），3.4M 以及（3.4M、3.4M）\")]),t._v(\" \"),s(\"p\",[t._v(\"最终会形成 3 个切片，大小分别为： （1.7+2.55）M，（2.55+3.4）M，（3.4+3.4）M 3.1.5\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-1-5-combinetextinputformat-案例实操\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-5-combinetextinputformat-案例实操\"}},[t._v(\"#\")]),t._v(\" 3.1.5 CombineTextInputFormat 案例实操\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求\")]),t._v(\" \"),s(\"p\",[t._v(\"将输入的大量小文件合并成一个切片统一处理。\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）输入数据 准备 4 个小文件\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）期望： 期望一个切片处理 4 个文件\")]),t._v(\" \"),s(\"p\",[t._v(\"2．实现过程\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）不做任何处理，运行 1.6 节的 WordCount 案例程序，观察切片个数为 4。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）在 WordcountDriver 中增加如下代码，运行程序，并观察运行的切片个数为 3。\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t （a）驱动类中添加代码如下：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"// 如果不设置 InputFormat，它默认用的是 TextInputFormat.class\\njob.setInputFormatClass(CombineTextInputFormat.class);\\n//虚拟存储切片最大值设置 4m\\nCombineTextInputFormat.setMaxInputSplitSize(job, 4194304);\\n\")])])]),s(\"p\",[t._v(\"​\\t（b）运行结果为 3 个切片。\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）在 WordcountDriver 中增加如下代码，运行程序，并观察运行的切片个数为 1。\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t\\t（a）驱动中添加代码如下：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"// 如果不设置 InputFormat，它默认用的是 TextInputFormat.class\\njob.setInputFormatClass(CombineTextInputFormat.class);\\n//虚拟存储切片最大值设置 20m\\nCombineTextInputFormat.setMaxInputSplitSize(job, 20971520);\\n\")])])]),s(\"p\",[t._v(\"​\\t（b）运行结果为 1 个切片。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-1-6-fileinputformat-实现类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-6-fileinputformat-实现类\"}},[t._v(\"#\")]),t._v(\" 3.1.6 FileInputFormat 实现类\")]),t._v(\" \"),s(\"p\",[t._v(\"思考：在运行MapReduce程序时，输入的文件格式包括：基于行的日志文件、 二进制格式文件、数据库表等。那么，针对不同的数据类型，MapReduce 是如何读取这些数据的呢？\")]),t._v(\" \"),s(\"p\",[t._v(\"FileInputFormat 常见的接口实现类包括： TextInputFormat 、 KeyValueTextInputFormat、NLineInputFormat、CombineTextInputFormat和自定义 InputFormat等。\")]),t._v(\" \"),s(\"h5\",{attrs:{id:\"_1-textinputformat\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-textinputformat\"}},[t._v(\"#\")]),t._v(\" 1．TextInputFormat\")]),t._v(\" \"),s(\"p\",[t._v(\"TextInputFormat是默认的FileInputFormat实现类。按行读取每条记录。键是存储该行在整个文件中的 起始字节偏移量， LongWritable类 型。值是这行的内容，不包括任何行终止符（换行符和回车符）， Text类型。\")]),t._v(\" \"),s(\"p\",[t._v(\"以下是一个示例，比如，一个分片包含了如下4条文本记录。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"Rich learning form\\nIntelligent learning engine\\nLearning more convenient\\nFrom the real demand for more close to the enterprise\\n\")])])]),s(\"p\",[t._v(\"每条记录表示为以下键/值对：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"(0,Rich learning form)\\n(19,Intelligent learning engine)\\n(47,Learning more convenient)\\n(72,From the real demand for more close to the enterprise)\\n\")])])]),s(\"h5\",{attrs:{id:\"_2-keyvaluetextinputformat\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-keyvaluetextinputformat\"}},[t._v(\"#\")]),t._v(\" 2．KeyValueTextInputFormat\")]),t._v(\" \"),s(\"p\",[t._v('每 一 行 均 为 一 条 记 录 ， 被 分 隔 符 分 割 为 key ， value 。 可 以 通 过 在 驱 动 类 中 设 置 conf.set(KeyValueLineRecordReader.KEY_VALUE_SEPERATOR, \"\\\\t\"); 来设定分隔符。默认分隔符是tab（\\\\t）。')]),t._v(\" \"),s(\"p\",[t._v(\"以下是一个示例，输入是一个包含4条记录的分片。其中——>表示一个（水平方向的）制表符。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"line1 ——>Rich learning form\\nline2 ——>Intelligent learning engine\\nline3 ——>Learning more convenient\\nline4 ——>From the real demand for more close to the enterprise\\n\")])])]),s(\"p\",[t._v(\"每条记录表示为以下键/值对：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"(line1,Rich learning form)\\n(line2,Intelligent learning engine)\\n(line3,Learning more convenient)\\n(line4,From the real demand for more close to the enterprise)\\n\")])])]),s(\"p\",[t._v(\"此时的键是每行排在制表符之前的Text序列。\")]),t._v(\" \"),s(\"h5\",{attrs:{id:\"_3-nlineinputformat\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-nlineinputformat\"}},[t._v(\"#\")]),t._v(\" 3．NLineInputFormat\")]),t._v(\" \"),s(\"p\",[t._v(\"如 果 使 用 NlineInputFormat ， 代表每个 map 进 程 处 理 的 InputSplit 不再按 Block 块 去 划 分 ， 而 是 按 NlineInputFormat指定的行数N来划分。即输入文件的总行数/N=切片数，如果不整除，切片数=商+1。 以下是一个示例，仍然以上面的4行输入为例。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"Rich learning form\\nIntelligent learning engine\\nLearning more convenient\\nFrom the real demand for more close to the enterprise\\n\")])])]),s(\"p\",[t._v(\"例如，如果N是2，则每个输入分片包含两行。开启2个MapTask。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"(0,Rich learning form)\\n(19,Intelligent learning engine)\\n\")])])]),s(\"p\",[t._v(\"另一个 mapper 则收到后两行：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"(47,Learning more convenient)\\n(72,From the real demand for more close to the enterprise)\\n\")])])]),s(\"p\",[t._v(\"这里的键和值与TextInputFormat生成的一样。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-1-7-keyvaluetextinputformat-使用案例\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-7-keyvaluetextinputformat-使用案例\"}},[t._v(\"#\")]),t._v(\" 3.1.7 KeyValueTextInputFormat 使用案例\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求\")]),t._v(\" \"),s(\"p\",[t._v(\"统计输入文件中每一行的第一个单词相同的行数。\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）输入数据\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"banzhang ni hao\\nxihuan hadoop banzhang\\nbanzhang ni hao\\nxihuan hadoop banzhang\\n\")])])]),s(\"p\",[t._v(\"（2）期望结果数据\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"banzhang 2\\nxihuan 2\\n\")])])]),s(\"p\",[t._v(\"2．需求分析\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/5c536c82-af5c-410c-9245-8fdacce6ab9b.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"code: priv.starfish.hadoop.mr.kv\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-1-8-nlineinputformat-使用案例\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-8-nlineinputformat-使用案例\"}},[t._v(\"#\")]),t._v(\" 3.1.8 NLineInputFormat 使用案例\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求\")]),t._v(\" \"),s(\"p\",[t._v(\"对每个单词进行个数统计，要求根据每个输入文件的行数来规定输出多少个切片。此案 例要求每三行放入一个切片中。\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）输入数据\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"banzhang ni hao\\nxihuan hadoop banzhang\\nbanzhang ni hao\\nxihuan hadoop banzhang\\nbanzhang ni hao\\nxihuan hadoop banzhang\\nbanzhang ni hao\\nxihuan hadoop banzhang\\nbanzhang ni hao\\nxihuan hadoop banzhang banzhang ni hao\\nxihuan hadoop banzhang\\n\")])])]),s(\"p\",[t._v(\"（2）期望输出数据\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"Number of splits:4\\n\")])])]),s(\"p\",[t._v(\"2．需求分析\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/06bf6edf-4763-465f-bcd3-d228d0524998.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"3．代码实现\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"priv.starfish.hadoop.mr.nline包下\\n\")])])]),s(\"p\",[t._v(\"4．测试 （1）输入数据\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"banzhang ni hao\\nxihuan hadoop banzhang\\nbanzhang ni hao\\nxihuan hadoop banzhang\\nbanzhang ni hao\\nxihuan hadoop banzhang\\nbanzhang ni hao\\nxihuan hadoop banzhang\\nbanzhang ni hao\\nxihuan hadoop banzhang banzhang ni hao\\n\")])])]),s(\"p\",[t._v(\"（2）输出结果的切片数，如图 4-10 所示：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/245975cc-6eb9-4e48-ad70-aa99c30e371e.png\",alt:\"\"}})]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-1-9-自定义-inputformat\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-9-自定义-inputformat\"}},[t._v(\"#\")]),t._v(\" 3.1.9 自定义 InputFormat\")]),t._v(\" \"),s(\"p\",[t._v(\"在企业开发中，Hadoop框架自带的InputFormat类型不能满足所有应用场 景，需要自定义InputFormat来解决实际问题。 自定义InputFormat步骤如下：\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）自定义一个类继承FileInputFormat。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）改写RecordReader，实现一次读取一个完整文件封装为KV。\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）在输出时使用SequenceFileOutPutFormat输出合并文件。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-1-10-自定义-inputformat-案例实操\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-10-自定义-inputformat-案例实操\"}},[t._v(\"#\")]),t._v(\" 3.1.10 自定义 InputFormat 案例实操\")]),t._v(\" \"),s(\"p\",[t._v(\"无论 HDFS 还是 MapReduce，在处理小文件时效率都非常低，但又难免面临处理大量 小文件的场景，此时，就需要有相应解决方案。可以自定义 InputFormat 实现小文件的合并。\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求\")]),t._v(\" \"),s(\"p\",[t._v(\"将多个小文件合并成一个 SequenceFile 文件（SequenceFile 文件是 Hadoop 用来存储二 进制形式的 key-value 对的文件格式），SequenceFile 里面存储着多个文件，存储的形式为文 件路径+名称为 key，文件内容为 value。\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）输入数据\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/311531ae-4e34-4510-a824-ef931a4bae7b.png\",alt:\"image-20200724153412425\"}})]),t._v(\" \"),s(\"p\",[t._v(\"（2）期望输出文件格式\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/8f18a0f7-7fbd-42ad-bc3b-cc5a09e5692b.png\",alt:\"image-20200724153427396\"}})]),t._v(\" \"),s(\"p\",[t._v(\"2．需求分析\")]),t._v(\" \"),s(\"p\",[t._v(\"1、自定义一个类继承FileInputFormat\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）重写isSplitable()方法，返回false不可切割\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）重写createRecordReader()，创建自定义的RecordReader对象，并初始化\")]),t._v(\" \"),s(\"p\",[t._v(\"2、改写RecordReader，实现一次读取一个完整文件封装为KV\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）采用IO流一次读取一个文件输出到value中，因为设置了不可切片，最终把所有文件都封装到了value中 （2）获取文件路径信息+名称，并设置key\")]),t._v(\" \"),s(\"p\",[t._v(\"3、设置Driver\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"// （1）设置输入的inputFormat\\n\\n job.setInputFormatClass(WholeFileInputformat.class); \\n\\n// （2）设置输出的outputFormat \\n\\njob.setOutputFormatClass(SequenceFileOutputFormat.class);\\n\")])])]),s(\"p\",[t._v(\"3．程序实现\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"priv.starfish.hadoop.mr.inputformat包\\n\")])])]),s(\"h3\",{attrs:{id:\"_3-2-mapreduce-工作流程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-mapreduce-工作流程\"}},[t._v(\"#\")]),t._v(\" 3.2 MapReduce 工作流程\")]),t._v(\" \"),s(\"p\",[t._v(\"1．流程示意图，如图 4-6，4-7 所示\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/26929967-2e21-4ed2-8fc2-0da3ab759204.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/7a10044f-c359-4cb7-80eb-09782bd39af8.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"2．流程详解\")]),t._v(\" \"),s(\"p\",[t._v(\"上面的流程是整个 MapReduce 最全工作流程，但是 Shuffle 过程只是从第 7 步开始到第 16 步结束，具体 Shuffle 过程详解，如下：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"MapTask 收集我们的 map()方法输出的 kv 对，放到内存缓冲区中\")]),t._v(\" \"),s(\"li\",[t._v(\"从内存缓冲区不断溢出本地磁盘文件，可能会溢出多个文件\")]),t._v(\" \"),s(\"li\",[t._v(\"多个溢出文件会被合并成大的溢出文件\")]),t._v(\" \"),s(\"li\",[t._v(\"在溢出过程及合并的过程中，都要调用 Partitioner 进行分区和针对 key 进行排序\")]),t._v(\" \"),s(\"li\",[t._v(\"ReduceTask 根据自己的分区号，去各个 MapTask 机器上取相应的结果分区数据\")]),t._v(\" \"),s(\"li\",[t._v(\"ReduceTask 会取到同一个分区的来自不同 MapTask 的结果文件，ReduceTask 会将这 些文件再进行合并（归并排序）\")]),t._v(\" \"),s(\"li\",[t._v(\"合并成大文件后，Shuffle 的过程也就结束了，后面进入 ReduceTask 的逻辑运算过程 （从文件中取出一个一个的键值对 Group，调用用户自定义的 reduce()方法）\")])]),t._v(\" \"),s(\"p\",[t._v(\"3．注意\")]),t._v(\" \"),s(\"p\",[t._v(\"Shuffle 中的缓冲区大小会影响到 MapReduce 程序的执行效率，原则上说，缓冲区越大， 磁盘 io 的次数越少，执行速度就越快。\")]),t._v(\" \"),s(\"p\",[t._v(\"缓冲区的大小可以通过参数调整，参数：io.sort.mb 默认 100M。\")]),t._v(\" \"),s(\"p\",[t._v(\"4．源码解析流程\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"context.write(k, NullWritable.get());\\noutput.write(key, value);\\ncollector.collect(key, value,partitioner.getPartition(key, value, partitions));\\nHashPartitioner();\\ncollect()\\nclose()\\ncollect.flush()\\nsortAndSpill()\\nsort() QuickSort\\nmergeParts();\\ncollector.close();\\n\\n\")])])]),s(\"h3\",{attrs:{id:\"_3-3-shuffle-机制\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-shuffle-机制\"}},[t._v(\"#\")]),t._v(\" 3.3 Shuffle 机制\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-3-1-shuffle-机制\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-1-shuffle-机制\"}},[t._v(\"#\")]),t._v(\" 3.3.1 Shuffle 机制\")]),t._v(\" \"),s(\"p\",[t._v(\"Map 方法之后，Reduce 方法之前的数据处理过程称之为 Shuffle。如图 4-14 所示。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/19fe35b4-d486-488e-afbd-cfeea4ae3093.png\",alt:\"\"}})]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-3-2-partition-分区\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-2-partition-分区\"}},[t._v(\"#\")]),t._v(\" 3.3.2 Partition 分区\")]),t._v(\" \"),s(\"p\",[t._v(\"1、问题引出\")]),t._v(\" \"),s(\"p\",[t._v(\"要求将统计结果按照条件输出到不同文件中（分区）。比如：将统计结果 按照手机归属地不同省份输出到不同文件中（分区）\")]),t._v(\" \"),s(\"p\",[t._v(\"2、默认Partitioner分区\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"public class HashPartitioner<K, V> extends Partitioner<K, V> {\\n\\tpublic int getPartition(K key, V value, int numReduceTasks) {\\n\\treturn (key.hashCode() & Integer.MAX_VALUE) % numReduceTasks;\\n\\t}\\n}\\n\")])])]),s(\"p\",[t._v(\"默认分区是根据key的hashCode对ReduceTasks个数取模得到的。用户没法 控制哪个key存储到哪个分区。\")]),t._v(\" \"),s(\"p\",[t._v(\"3、自定义Partitioner步骤\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）自定义类继承Partitioner，重写getPartition()方法\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"public class CustomPartitioner extends Partitioner<Text, FlowBean> {\\n\\t@Override\\n\\tpublic int getPartition(Text key, FlowBean value, int numPartitions) {\\n\\t// 控制分区代码逻辑\\n\\t… …\\n\\treturn partition;\\n\\t}\\n}\\n\")])])]),s(\"p\",[t._v(\"（2）在Job驱动中，设置自定义Partitioner\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\" job.setPartitionerClass(CustomPartitioner.class); \\n\")])])]),s(\"p\",[t._v(\"（3）自定义Partition后，要根据自定义Partitioner的逻辑设置相应数量的ReduceTask\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"job.setNumReduceTasks(5);\\n\")])])]),s(\"p\",[t._v(\"4、分区总结\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）如果ReduceTask的数量> getPartition的结果数，则会多产生几个空的输出文件part-r-000xx；\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）如果1<ReduceTask的数量<getPartition的结果数，则有一部分分区数据无处安放，会Exception；\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）如 果ReduceTask的数量=1，则不管MapTask端输出多少个分区文件，最终结果都交给这一个 ReduceTask，最终也就只会产生一个结果文件 part-r-00000；\")]),t._v(\" \"),s(\"p\",[t._v(\"（4）分区号必须从零开始，逐一累加。\")]),t._v(\" \"),s(\"p\",[t._v(\"5、案例分析\")]),t._v(\" \"),s(\"p\",[t._v(\"例如：假设自定义分区数为5，则\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）job.setNumReduceTasks(1); 会正常运行，只不过会产生一个输出文件\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）job.setNumReduceTasks(2); 会报错\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）job.setNumReduceTasks(6);   大于5，程序会正常运行，会产生空文件\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-3-3-partition-分区案例实操\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-3-partition-分区案例实操\"}},[t._v(\"#\")]),t._v(\" 3.3.3 Partition 分区案例实操\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求 将统计结果按照手机归属地不同省份输出到不同文件中（分区）\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）输入数据  phone_data .txt\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）期望输出数据\")]),t._v(\" \"),s(\"p\",[t._v(\"手机号 136、137、138、139 开头都分别放到一个独立的 4 个文件中，其他开头的放到 一个文件中。\")]),t._v(\" \"),s(\"p\",[t._v(\"2．需求分析\")]),t._v(\" \"),s(\"p\",[t._v(\"1、需求：将统计结果按照手机归属地不同省份输出到不同文件中（分区）\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/f3319436-9a53-46d0-91be-5acc130f95e1.png\",alt:\"image-20200724154510165\"}})]),t._v(\" \"),s(\"p\",[t._v(\"3．在案例 2.4 的基础上，增加一个分区类\")]),t._v(\" \"),s(\"p\",[t._v(\"4．在驱动函数中增加自定义数据分区设置和 ReduceTask 设置\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"priv.starfish.hadoop.mr.flowsum ProvincePartitioner类\\n\")])])]),s(\"h4\",{attrs:{id:\"_3-3-4-writablecomparable-排序\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-4-writablecomparable-排序\"}},[t._v(\"#\")]),t._v(\" 3.3.4 WritableComparable 排序\")]),t._v(\" \"),s(\"p\",[t._v(\"排序是MapReduce框架中最重要的操作之一。\")]),t._v(\" \"),s(\"p\",[t._v(\"MapTask和ReduceTask均会对数 据按 照key进 行排 序。该操作属于 Hadoop的默认行为。任何应用程序中的数据均会被排序，而不管逻辑上是 否需要。 默认排序是按照字典顺序排序，且实现该排序的方法是快速排序。\")]),t._v(\" \"),s(\"p\",[t._v(\"对于MapTask，它会将处理的结果暂时放到环形缓冲区中，当环形缓冲区使 用率达到一定阈值后，再对缓冲区中的数据进行一次快速排序，并将这些有序数 据溢写到磁盘上，而当数据处理完毕后，它会对磁盘上所有文件进行归并排序。\")]),t._v(\" \"),s(\"p\",[t._v(\"对于ReduceTask，它从每个MapTask上远程拷贝相应的数据文件，如果文件大 小超过一定阈值，则溢写磁盘上，否则存储在内存中。如果磁盘上文件数目达到 一定阈值，则进行一次归并排序以生成一个更大文件；如果内存中文件大小或者 数目超过一定阈值，则进行一次合并后将数据溢写到磁盘上。当所有数据拷贝完 毕后，ReduceTask统一对内存和磁盘上的所有数据进行一次归并排序。\")]),t._v(\" \"),s(\"p\",[t._v(\"1．排序的分类\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）部分排序\")]),t._v(\" \"),s(\"p\",[t._v(\"MapReduce根据输入记录的键对数据集排序。保证输出的每个文件内部有序。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）全排序\")]),t._v(\" \"),s(\"p\",[t._v(\"最终输出结果只有一个文件，且文件内部有序。实现方式是只设置一个ReduceTask。但该方法在 处理大型文件时效率极低，因为一台机器处理所有文件，完全丧失了MapReduce所提供的并行架构。\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）辅助排序：（GroupingComparator分组）\")]),t._v(\" \"),s(\"p\",[t._v(\"在Reduce端对key进行分组。应用于：在接收的key为bean对象时，想让一个或几个字段相同（全部 字段比较不相同）的key进入到同一个reduce方法时，可以采用分组排序。\")]),t._v(\" \"),s(\"p\",[t._v(\"（4）二次排序\")]),t._v(\" \"),s(\"p\",[t._v(\"在自定义排序过程中，如果compareTo中的判断条件为两个即为二次排序。\")]),t._v(\" \"),s(\"p\",[t._v(\"2．自定义排序 WritableComparable\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）原理分析\")]),t._v(\" \"),s(\"p\",[t._v(\"bean 对象做为 key 传输，需要实现 WritableComparable 接口重写 compareTo 方法，就可 以实现排序。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"@Override\\npublic int compareTo(FlowBean o) {\\nint result;\\n// 按照总流量大小，倒序排列\\nif (sumFlow > bean.getSumFlow()) {\\nresult = -1;\\n}else if (sumFlow < bean.getSumFlow()) {\\nresult = 1;\\n}else {\\nresult = 0;\\n}\\nreturn result;\\n}\\n\\n\")])])]),s(\"h4\",{attrs:{id:\"_3-3-5-writablecomparable-排序案例实操-全排序\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-5-writablecomparable-排序案例实操-全排序\"}},[t._v(\"#\")]),t._v(\" 3.3.5 WritableComparable 排序案例实操（全排序）\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求\")]),t._v(\" \"),s(\"p\",[t._v(\"根据案例 2.3 产生的结果再次对总流量进行排序。\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）输入数据\")]),t._v(\" \"),s(\"p\",[t._v(\"原始数据 phone_data .txt\")]),t._v(\" \"),s(\"p\",[t._v(\"第一次处理后的数据 part-r-00000\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）期望输出数据\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"13509468723 7335 110349 117684\\n13736230513 2481 24681 27162\\n13956435636 132 1512 1644\\n13846544121 264 0 264\\n。。。 。。。\\n\\n\")])])]),s(\"p\",[t._v(\"2．需求分析\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/d5cb65cd-3a55-492b-8279-499bed05cc3e.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"3．代码实现\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"priv.starfish.hadoop.mr.sort\\n\")])])]),s(\"h4\",{attrs:{id:\"_3-3-6-writablecomparable-排序案例实操-区内排序\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-6-writablecomparable-排序案例实操-区内排序\"}},[t._v(\"#\")]),t._v(\" 3.3.6 WritableComparable 排序案例实操（区内排序）\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求\")]),t._v(\" \"),s(\"p\",[t._v(\"要求每个省份手机号输出的文件中按照总流量内部排序。\")]),t._v(\" \"),s(\"p\",[t._v(\"2．需求分析\")]),t._v(\" \"),s(\"p\",[t._v(\"基于前一个需求，增加自定义分区类，分区按照省份手机号设置。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/2aef3942-35a7-43eb-9157-8437f1d1444e.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"3．案例实操\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）增加自定义分区类\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"priv.starfish.hadoop.mr.sort ProvincePartitioner\\n\")])])]),s(\"p\",[t._v(\"（2）在驱动类中添加分区类\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"// 加载自定义分区类\\njob.setPartitionerClass(ProvincePartitioner.class);\\n// 设置 Reducetask 个数\\njob.setNumReduceTasks(5);\\n\\n\")])])]),s(\"h4\",{attrs:{id:\"_3-3-7-combiner-合并\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-7-combiner-合并\"}},[t._v(\"#\")]),t._v(\" 3.3.7 Combiner 合并\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）Combiner是MR程序中Mapper和Reducer之外的一种组件。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）Combiner组件的父类就是Reducer。\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）Combiner和Reducer的区别在于运行的位置\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"Combiner是在每一个MapTask所在的节点运行;\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"Reducer是接收全局所有Mapper的输出结果；\")])])]),t._v(\" \"),s(\"p\",[t._v(\"（4）Combiner的意义就是对每一个MapTask的输出进行局部汇总，以减小网络传输量。\")]),t._v(\" \"),s(\"p\",[t._v(\"（5）Combiner能够应用的前提是不能影响最终的业务逻辑，而且，Combiner的输出kv 应该跟Reducer的输入kv类型要对应起来。\")]),t._v(\" \"),s(\"p\",[t._v(\"（6）自定义 Combiner 实现步骤\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t（a）自定义一个 Combiner 继承 Reducer，重写 Reduce 方法\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"public class WordcountCombiner extends Reducer<Text, IntWritable, Text,IntWritable>{\\n@Override\\nprotected void reduce(Text key, Iterable<IntWritable>\\nvalues,Context context) throws IOException,\\nInterruptedException {\\n // 1 汇总操作\\nint count = 0;\\nfor(IntWritable v :values){\\ncount += v.get();\\n}\\n // 2 写出\\ncontext.write(key, new IntWritable(count));\\n}\\n}\\n\")])])]),s(\"p\",[t._v(\"（b）在 Job 驱动类中设置：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"job.setCombinerClass(WordcountCombiner.class);\\n\")])])]),s(\"h4\",{attrs:{id:\"_3-3-8-combiner-合并案例实操\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-8-combiner-合并案例实操\"}},[t._v(\"#\")]),t._v(\" 3.3.8 Combiner 合并案例实操\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求\")]),t._v(\" \"),s(\"p\",[t._v(\"统计过程中对每一个 MapTask 的输出进行局部汇总，以减小网络传输量即采用 Combiner 功能。\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）数据输入  hello.txt\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）期望输出数据\")]),t._v(\" \"),s(\"p\",[t._v(\"期望：Combine 输入数据多，输出时经过合并，输出数据降低。\")]),t._v(\" \"),s(\"p\",[t._v(\"2．需求分析\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/1f301c7a-675e-4f1e-b647-5dd55adf232a.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"3．案例实操-方案一\")]),t._v(\" \"),s(\"p\",[t._v(\"1）增加一个 WordcountCombiner 类继承 Reducer\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"import java.io.IOException;\\nimport org.apache.hadoop.io.IntWritable;\\nimport org.apache.hadoop.io.Text;\\nimport org.apache.hadoop.mapreduce.Reducer;\\npublic class WordcountCombiner extends Reducer<Text,\\nIntWritable, Text, IntWritable>{\\nIntWritable v = new IntWritable();\\n@Override\\nprotected void reduce(Text key, Iterable<IntWritable>\\nvalues, Context context) throws IOException,\\nInterruptedException {\\n // 1 汇总\\nint sum = 0;\\nfor(IntWritable value :values){\\nsum += value.get();\\n}\\nv.set(sum);\\n// 2 写出\\ncontext.write(key, v);\\n}\\n}\\n\\n\")])])]),s(\"p\",[t._v(\"2）在 WordcountDriver 驱动类中指定 Combiner\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"// 指定需要使用 combiner，以及用哪个类作为 combiner 的逻辑\\njob.setCombinerClass(WordcountCombiner.class);\\n\\n\")])])]),s(\"p\",[t._v(\"4．案例实操-方案二\")]),t._v(\" \"),s(\"p\",[t._v(\"1）将 WordcountReducer 作为 Combiner 在 WordcountDriver 驱动类中指定\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"// 指定需要使用 Combiner，以及用哪个类作为 Combiner 的逻辑\\njob.setCombinerClass(WordcountReducer.class);\\n\\n\")])])]),s(\"p\",[t._v(\"运行程序，如图 4-16，4-17 所示\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/c0935098-c23f-4be9-8f3b-812bc11833aa.png\",alt:\"image-20200724174441853\"}})]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-3-9-groupingcomparator-分组-辅助排序\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-9-groupingcomparator-分组-辅助排序\"}},[t._v(\"#\")]),t._v(\" 3.3.9 GroupingComparator 分组（辅助排序）\")]),t._v(\" \"),s(\"p\",[t._v(\"对 Reduce 阶段的数据根据某一个或几个字段进行分组。\")]),t._v(\" \"),s(\"p\",[t._v(\"分组排序步骤：\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）自定义类继承 WritableComparator\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）重写 compare()方法\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"@Override public int compare(WritableComparable a, WritableComparable b) { // 比较的业务逻辑 return result; }\\n\")])])]),s(\"p\",[t._v(\"（3）创建一个构造将比较对象的类传给父类\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"protected OrderGroupingComparator() { super(OrderBean.class, true); }\\n\")])])]),s(\"h4\",{attrs:{id:\"_3-3-10-groupingcomparator-分组案例实操\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-10-groupingcomparator-分组案例实操\"}},[t._v(\"#\")]),t._v(\" 3.3.10 GroupingComparator 分组案例实操\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求 有如下订单数据\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/f83db6e2-380f-4434-bc5a-e154b720d068.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"现在需要求出每一个订单中最贵的商品。\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）输入数据 GroupingComparator.txt\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）期望输出数据\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"1 222.8\\n2 722.4\\n3 232.8\\n\")])])]),s(\"p\",[t._v(\"2．需求分析\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）利用“订单 id 和成交金额”作为 key，可以将 Map 阶段读取到的所有订单数据按 照 id 升序排序，如果 id 相同再按照金额降序排序，发送到 Reduce。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）在 Reduce 端利用 groupingComparator 将订单 id 相同的 kv 聚合成组，然后取第一 个即是该订单中最贵商品，如图 4-18 所示。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/0d635313-8935-4423-a9f1-d0d8d5940b25.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"3．代码实现\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"priv.starfish.hadoop.mr.order\\n\")])])]),s(\"h3\",{attrs:{id:\"_3-4-maptask-工作机制\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-4-maptask-工作机制\"}},[t._v(\"#\")]),t._v(\" 3.4 MapTask 工作机制\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/caae2e63-73a1-49a5-b1f8-e9d090d92bad.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"（1）Read 阶段：MapTask 通过用户编写的 RecordReader，从输入 InputSplit 中解析出 一个个 key/value。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）Map 阶段：该节点主要是将解析出的 key/value 交给用户编写 map()函数处理，并 产生一系列新的 key/value。\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）Collect 收集阶段：在用户编写 map()函数中，当数据处理完成后，一般会调用 OutputCollector.collect()输出结果。在该函数内部，它会将生成的 key/value 分区（调用 Partitioner），并写入一个环形内存缓冲区中。\")]),t._v(\" \"),s(\"p\",[t._v(\"（4）Spill 阶段：即“溢写”，当环形缓冲区满后，MapReduce 会将数据写到本地磁盘上， 生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排 序，并在必要时对数据进行合并、压缩等操作。\")]),t._v(\" \"),s(\"p\",[t._v(\"溢写阶段详情：\")]),t._v(\" \"),s(\"p\",[t._v(\"步骤 1：利用快速排序算法对缓存区内的数据进行排序，排序方式是，先按照分区编号 Partition 进行排序，然后按照 key 进行排序。这样，经过排序后，数据以分区为单位聚集在 一起，且同一分区内所有数据按照 key 有序。\")]),t._v(\" \"),s(\"p\",[t._v(\"步骤 2：按照分区编号由小到大依次将每个分区中的数据写入任务工作目录下的临时文 件 output/spillN.out（N 表示当前溢写次数）中。如果用户设置了 Combiner，则写入文件之 前，对每个分区中的数据进行一次聚集操作。\")]),t._v(\" \"),s(\"p\",[t._v(\"步骤 3：将分区数据的元信息写到内存索引数据结构 SpillRecord 中，其中每个分区的元 信息包括在临时文件中的偏移量、压缩前数据大小和压缩后数据大小。如果当前内存索引大 小超过 1MB，则将内存索引写到文件 output/spillN.out.index 中。\")]),t._v(\" \"),s(\"p\",[t._v(\"（5）Combine 阶段：当所有数据处理完成后，MapTask 对所有临时文件进行一次合并， 以确保最终只会生成一个数据文件。\")]),t._v(\" \"),s(\"p\",[t._v(\"当所有数据处理完后，MapTask 会将所有临时文件合并成一个大文件，并保存到文件 output/file.out 中，同时生成相应的索引文件 output/file.out.index。 在进行文件合并过程中，MapTask 以分区为单位进行合并。对于某个分区，它将采用多 轮递归合并的方式。每轮合并 io.sort.factor（默认 10）个文件，并将产生的文件重新加入待 合并列表中，对文件排序后，重复以上过程，直到最终得到一个大文件。\")]),t._v(\" \"),s(\"p\",[t._v(\"让每个 MapTask 最终只生成一个数据文件，可避免同时打开大量文件和同时读取大量 小文件产生的随机读取带来的开销。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3-5-reducetask-工作机制\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-5-reducetask-工作机制\"}},[t._v(\"#\")]),t._v(\" 3.5 ReduceTask 工作机制\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/e8fd10d6-55aa-4de0-9f4c-80c1d3d4b419.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"（1）Copy 阶段：ReduceTask 从各个 MapTask 上远程拷贝一片数据，并针对某一片数 据，如果其大小超过一定阈值，则写到磁盘上，否则直接放到内存中。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）Merge 阶段：在远程拷贝数据的同时，ReduceTask 启动了两个后台线程对内存和 磁盘上的文件进行合并，以防止内存使用过多或磁盘上文件过多。\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）Sort 阶段：按照 MapReduce 语义，用户编写 reduce()函数输入数据是按 key 进行 聚集的一组数据。为了将 key 相同的数据聚在一起，Hadoop 采用了基于排序的策略。由于 各个 MapTask 已经实现对自己的处理结果进行了局部排序，因此，ReduceTask 只需对所有 数据进行一次归并排序即可。\")]),t._v(\" \"),s(\"p\",[t._v(\"（4）Reduce 阶段：reduce()函数将计算结果写到 HDFS 上。\")]),t._v(\" \"),s(\"p\",[t._v(\"2．设置 ReduceTask 并行度（个数）\")]),t._v(\" \"),s(\"p\",[t._v(\"ReduceTask 的并行度同样影响整个 Job 的执行并发度和执行效率，但与 MapTask 的并 发数由切片数决定不同，ReduceTask 数量的决定是可以直接手动设置：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"// 默认值是 1，手动设置为 4 \\n\\njob.setNumReduceTasks(4); \\n\")])])]),s(\"p\",[t._v(\"3．实验：测试 ReduceTask 多少合适\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）实验环境：1 个 Master 节点，16 个 Slave 节点：CPU:8GHZ，内存: 2G\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）实验结论：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/e28d97eb-befa-4910-b8a3-b5f23a46d9a8.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"4．注意事项\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）ReduceTask=0，表示没有Reduce阶段，输出文件个数和Map个数一致。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）ReduceTask默认值就是1，所以输出文件个数为一个。\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）如果数据分布不均匀，就有可能在Reduce阶段产生数据倾斜\")]),t._v(\" \"),s(\"p\",[t._v(\"（4）ReduceTask数量并不是任意设置，还要考虑业务逻辑需求，有些情况下，需要计 算全局汇总结果，就只能有1个ReduceTask。\")]),t._v(\" \"),s(\"p\",[t._v(\"（5）具体多少个ReduceTask，需要根据集群性能而定。\")]),t._v(\" \"),s(\"p\",[t._v(\"（6）如果分区数不是1，但是ReduceTask为1，是否执行分区过程。答案是：不执行分 区过程。因为在MapTask的源码中，执行分区的前提是先判断ReduceNum个数是否大于1。 不大于1肯定不执行。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3-6-outputformat-数据输出\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-6-outputformat-数据输出\"}},[t._v(\"#\")]),t._v(\" 3.6 OutputFormat 数据输出\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-6-1-outputformat-接口实现类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-6-1-outputformat-接口实现类\"}},[t._v(\"#\")]),t._v(\" 3.6.1 OutputFormat 接口实现类\")]),t._v(\" \"),s(\"p\",[t._v(\"OutputFormat是MapReduce输出的基类，所有实现MapReduce输出都实现了 OutputFormat 接口。下面我们介绍几种常见的OutputFormat实现类。\")]),t._v(\" \"),s(\"p\",[t._v(\"1．文本输出TextOutputFormat\")]),t._v(\" \"),s(\"p\",[t._v(\"默 认的输出格式是TextOutputFormat，它把每条记录写为文本行。它的键和值可以是任 意类型，因为TextOutputFormat调用toString()方法把它们转换为字符串。\")]),t._v(\" \"),s(\"p\",[t._v(\"2．SequenceFileOutputFormat\")]),t._v(\" \"),s(\"p\",[t._v(\"将SequenceFileOutputFormat输出作为后续 MapReduce任务的输入，这便是一种好的输出 格式，因为它的格式紧凑，很容易被压缩。\")]),t._v(\" \"),s(\"p\",[t._v(\"3．自定义OutputFormat\")]),t._v(\" \"),s(\"p\",[t._v(\"根据用户需求，自定义实现输出。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-6-2-自定义-outputformat\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-6-2-自定义-outputformat\"}},[t._v(\"#\")]),t._v(\" 3.6.2 自定义 OutputFormat\")]),t._v(\" \"),s(\"p\",[t._v(\"1．使用场景\")]),t._v(\" \"),s(\"p\",[t._v(\"为了实现控制最终文件的输出路径和输出格式，可以自定义OutputFormat。 例如：要在一个MapReduce程序中根据数据的不同输出两类结果到不同目 录，这类灵活的输出需求可以通过自定义OutputFormat来实现。\")]),t._v(\" \"),s(\"p\",[t._v(\"2．自定义OutputFormat步骤\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）自定义一个类继承FileOutputFormat。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）改写RecordWriter，具体改写输出数据的方法write()。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-6-3-自定义-outputformat-案例实操\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-6-3-自定义-outputformat-案例实操\"}},[t._v(\"#\")]),t._v(\" 3.6.3 自定义 OutputFormat 案例实操\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求\")]),t._v(\" \"),s(\"p\",[t._v(\"过滤输入的 log 日志，包含 atguigu 的网站输出到 e:/atguigu.log，不包含 atguigu 的网站 输出到 e:/other.log。 （1）输入数据  log.txt\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）期望输出数据  atguigu.log  other.log\")]),t._v(\" \"),s(\"p\",[t._v(\"2．需求分析\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/ffca8111-9117-4252-b27f-724424ad3be8.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"3．案例实操\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"priv.starfish.hadoop.mr.outputformat\\n\")])])]),s(\"h3\",{attrs:{id:\"_3-7-join-多种应用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-7-join-多种应用\"}},[t._v(\"#\")]),t._v(\" 3.7 Join 多种应用\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-7-1-reduce-join\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-7-1-reduce-join\"}},[t._v(\"#\")]),t._v(\" 3.7.1 Reduce Join\")]),t._v(\" \"),s(\"p\",[t._v(\"Reduce Join工作原理\")]),t._v(\" \"),s(\"p\",[t._v(\"Map端的主要工作：为来自不同表或文件的key/value对，打标签以区别不同 来源的记录。然后用连接字段作为key，其余部分和新加的标志作为value，最后 进行输出。\")]),t._v(\" \"),s(\"p\",[t._v(\"Reduce端的主要工作：在Reduce端以连接字段作为key的分组已经完成，我 们只需要在每一个分组当中将那些来源于不同文件的记录(在Map阶段已经打标 志)分开，最后进行合并就ok了。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-7-2-reduce-join-案例实操\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-7-2-reduce-join-案例实操\"}},[t._v(\"#\")]),t._v(\" 3.7.2 Reduce Join 案例实操\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/a38f7498-985f-404a-80ee-e23e10350e37.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"2．需求分析 通过将关联条件作为 Map 输出的 key，将两表满足 Join 条件的数据并携带数据所来源 的文件信息，发往同一个 ReduceTask，在 Reduce 中进行数据的串联，如图 4-20 所示。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/a95d8957-45c1-4683-9103-ec8cade040cd.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"3．代码实现 1）创建商品和订合并后的 Bean 类\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"priv.starfish.hadoop.mr.table\\n\")])])]),s(\"p\",[t._v(\"4．测试\")]),t._v(\" \"),s(\"p\",[t._v(\"5．总结\")]),t._v(\" \"),s(\"p\",[t._v(\"缺点：这种方式中，合并的操作是在Reduce阶段完成，Reduce端的处理压力 太大，Map节点的运算负载则很低，资源利用率不高，且在Reduce阶段极易产生 数据倾斜。 解决方案：Map端实现数据合并\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-7-3-map-join\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-7-3-map-join\"}},[t._v(\"#\")]),t._v(\" 3.7.3 Map Join\")]),t._v(\" \"),s(\"p\",[t._v(\"1．使用场景 Map Join 适用于一张表十分小、一张表很大的场景。\")]),t._v(\" \"),s(\"p\",[t._v(\"2．优点\")]),t._v(\" \"),s(\"p\",[t._v(\"思考：在 Reduce 端处理过多的表，非常容易产生数据倾斜。怎么办？\")]),t._v(\" \"),s(\"p\",[t._v(\"在 Map 端缓存多张表，提前处理业务逻辑，这样增加 Map 端业务，减少 Reduce 端数 据的压力，尽可能的减少数据倾斜。\")]),t._v(\" \"),s(\"p\",[t._v(\"3．具体办法：采用 DistributedCache\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）在 Mapper 的 setup 阶段，将文件读取到缓存集合中。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）在驱动函数中加载缓存。 // 缓存普通文件到 Task 运行节点。\")]),t._v(\" \"),s(\"p\",[t._v('job.addCacheFile(new URI(\"file://e:/cache/pd.txt\"));')]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-7-4-map-join-案例实操\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-7-4-map-join-案例实操\"}},[t._v(\"#\")]),t._v(\" 3.7.4 Map Join 案例实操\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/6cde022c-a905-4ce0-8db8-f1ecbaef29de.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"2．需求分析 MapJoin 适用于关联表中有小表的情形。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://imgkr.cn-bj.ufileos.com/e918c4d2-e8e9-444e-8100-a2ec952bed26.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"3．实现代码\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）先在驱动模块中添加缓存文件\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"priv.starfish.hadoop.mr.cache\\n\")])])]),s(\"h3\",{attrs:{id:\"_3-8-计数器应用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-8-计数器应用\"}},[t._v(\"#\")]),t._v(\" 3.8 计数器应用\")]),t._v(\" \"),s(\"p\",[t._v(\"Hadoop为每个作业维护若干内置计数器，以描述多项指标。例如，某些计数器记录 已处理的字节数和记录数，使用户可监控已处理的输入数据量和已产生的输出数据量。\")]),t._v(\" \"),s(\"p\",[t._v(\"1．计数器API\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）采用枚举的方式统计计数\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"enum MyCounter{MALFORORMED,NORMAL}\\n//对枚举定义的自定义计数器加1\\ncontext.getCounter(MyCounter.MALFORORMED).increment(1);\\n\")])])]),s(\"p\",[t._v(\"（2）采用计数器组、计数器名称的方式统计\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(' context.getCounter(\"counterGroup\", \"counter\").increment(1); \\n')])])]),s(\"p\",[t._v(\"组名和计数器名称随便起，但最好有意义。\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）计数结果在程序运行后的控制台上查看。\")]),t._v(\" \"),s(\"ol\",{attrs:{start:\"2\"}},[s(\"li\",[t._v(\"计数器案例实操 详见数据清洗案例\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3-9-数据清洗-etl\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-9-数据清洗-etl\"}},[t._v(\"#\")]),t._v(\" 3.9 数据清洗（ETL）\")]),t._v(\" \"),s(\"p\",[t._v(\"在运行核心业务 MapReduce 程序之前，往往要先对数据进行清洗，清理掉不符合用户 要求的数据。清理的过程往往只需要运行 Mapper 程序，不需要运行 Reduce 程序。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-9-1-数据清洗案例实操-简单解析版\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-9-1-数据清洗案例实操-简单解析版\"}},[t._v(\"#\")]),t._v(\" 3.9.1 数据清洗案例实操-简单解析版\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求\")]),t._v(\" \"),s(\"p\",[t._v(\"去除日志中字段长度小于等于 11 的日志。\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）输入数据 web.log\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）期望输出数据 每行字段长度都大于 11。\")]),t._v(\" \"),s(\"p\",[t._v(\"2．需求分析\")]),t._v(\" \"),s(\"p\",[t._v(\"需要在 Map 阶段对输入的数据根据规则进行过滤清洗。\")]),t._v(\" \"),s(\"p\",[t._v(\"3．实现代码\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）编写 LogMapper 类\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"priv.starfish.hadoop.mr.log\\n\")])])]),s(\"h4\",{attrs:{id:\"_3-9-2-数据清洗案例实操-复杂解析版\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-9-2-数据清洗案例实操-复杂解析版\"}},[t._v(\"#\")]),t._v(\" 3.9.2 数据清洗案例实操-复杂解析版\")]),t._v(\" \"),s(\"p\",[t._v(\"1．需求\")]),t._v(\" \"),s(\"p\",[t._v(\"对 Web 访问日志中的各字段识别切分，去除日志中不合法的记录。根据清洗规则， 输出过滤后的数据。\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）输入数据 web.log\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）期望输出数据 都是合法的数据\")]),t._v(\" \"),s(\"p\",[t._v(\"2．实现代码\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）定义一个 bean，用来记录日志数据中的各数据字段\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3-10-mapreduce-开发总结\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-10-mapreduce-开发总结\"}},[t._v(\"#\")]),t._v(\" 3.10 MapReduce 开发总结\")]),t._v(\" \"),s(\"p\",[t._v(\"在编写 MapReduce 程序时，需要考虑如下几个方面：\")]),t._v(\" \"),s(\"h5\",{attrs:{id:\"_1-输入数据接口-inputformat\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-输入数据接口-inputformat\"}},[t._v(\"#\")]),t._v(\" 1> 输入数据接口：InputFormat\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"默认使用的实现类是：TextInputFormat\")]),t._v(\" \"),s(\"li\",[t._v(\"TextInputFormat 的功能逻辑是：一次读一行文本，然后将该行的起始偏移量作为 key，行内容作为 value 返回\")]),t._v(\" \"),s(\"li\",[t._v(\"KeyValueTextInputFormat 每一行均为一条记录，被分隔符分割为 key，value。默认分隔符是 tab（\\\\t）\")]),t._v(\" \"),s(\"li\",[t._v(\"NlineInputFormat 按照指定的行数 N 来划分切片\")]),t._v(\" \"),s(\"li\",[t._v(\"CombineTextInputFormat 可以把多个小文件合并成一个切片处理，提高处理效率\")]),t._v(\" \"),s(\"li\",[t._v(\"用户还可以自定义 InputFormat\")])]),t._v(\" \"),s(\"h5\",{attrs:{id:\"_2-逻辑处理接口-mapper\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-逻辑处理接口-mapper\"}},[t._v(\"#\")]),t._v(\" 2> 逻辑处理接口：Mapper\")]),t._v(\" \"),s(\"p\",[t._v(\"用户根据业务需求实现其中三个方法：\"),s(\"code\",[t._v(\"map()\")]),t._v(\" \"),s(\"code\",[t._v(\"setup()\")]),t._v(\" \"),s(\"code\",[t._v(\"cleanup ()\")])]),t._v(\" \"),s(\"h5\",{attrs:{id:\"_3-partitioner-分区\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-partitioner-分区\"}},[t._v(\"#\")]),t._v(\" 3> Partitioner 分区\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"有默认实现 HashPartitioner ， 逻辑是根据 key 的哈希值 和 numReduces 来返回一个分区号；\"),s(\"code\",[t._v(\"key.hashCode()&Integer.MAXVALUE % numReduces\")])]),t._v(\" \"),s(\"li\",[t._v(\"如果业务上有特别的需求，可以自定义分区。\")])]),t._v(\" \"),s(\"h5\",{attrs:{id:\"_4-comparable-排序\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-comparable-排序\"}},[t._v(\"#\")]),t._v(\" 4> Comparable 排序\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"当我们用自定义的对象作为 key 来输出时，就必须要实现 WritableComparable 接口，重写其中的compareTo()方法\")]),t._v(\" \"),s(\"li\",[t._v(\"部分排序：对最终输出的每一个文件进行内部排序\")]),t._v(\" \"),s(\"li\",[t._v(\"全排序：对所有数据进行排序，通常只有一个Reduce\")]),t._v(\" \"),s(\"li\",[t._v(\"二次排序：排序的条件有两个\")])]),t._v(\" \"),s(\"h5\",{attrs:{id:\"_5-combiner合并\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-combiner合并\"}},[t._v(\"#\")]),t._v(\" 5> Combiner合并\")]),t._v(\" \"),s(\"p\",[t._v(\"Combiner 合并可以提高程序执行效率，减少IO传输。但是使用时必须不能影 响原有的业务处理结果。\")]),t._v(\" \"),s(\"h5\",{attrs:{id:\"_6-reduce端分组-groupingcomparator\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-reduce端分组-groupingcomparator\"}},[t._v(\"#\")]),t._v(\" 6> Reduce端分组：GroupingComparator\")]),t._v(\" \"),s(\"p\",[t._v(\"在 Reduce 端对 key 进行分组。应用于：在接收的 key 为 bean 对象时，想让一个或几个字段相同（全部字段比较不相同）的 key 进入到同一个 reduce 方法时，可以采用分组排序。\")]),t._v(\" \"),s(\"h5\",{attrs:{id:\"_7-逻辑处理接口-reducer\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-逻辑处理接口-reducer\"}},[t._v(\"#\")]),t._v(\" 7> 逻辑处理接口：Reducer\")]),t._v(\" \"),s(\"p\",[t._v(\"用户根据业务需求实现其中三个方法：\"),s(\"code\",[t._v(\"reduce()\")]),t._v(\" \"),s(\"code\",[t._v(\"setup()\")]),t._v(\" \"),s(\"code\",[t._v(\"cleanup ()\")])]),t._v(\" \"),s(\"h5\",{attrs:{id:\"_8-输出数据接口-outputformat\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-输出数据接口-outputformat\"}},[t._v(\"#\")]),t._v(\" 8> 输出数据接口：OutputFormat\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"默认实现类是 TextOutputFormat，功能逻辑是：将每一个KV对，向目标文本文件输出一行\")]),t._v(\" \"),s(\"li\",[t._v(\"将 SequenceFileOutputFormat 输出作为后续 MapReduce 任务的输入，这便是一种好的输出格式，因为它的格式紧凑，很容易被压缩\")]),t._v(\" \"),s(\"li\",[t._v(\"用户还可以自定义 OutputFormat\")])])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}