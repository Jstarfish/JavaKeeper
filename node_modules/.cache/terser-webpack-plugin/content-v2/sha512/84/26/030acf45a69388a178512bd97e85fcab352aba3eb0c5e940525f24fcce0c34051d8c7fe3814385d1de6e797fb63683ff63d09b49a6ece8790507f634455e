{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{802:function(t,a,s){\"use strict\";s.r(a);var e=s(6),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"java线上故障排查全套路\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java线上故障排查全套路\"}},[t._v(\"#\")]),t._v(\" JAVA线上故障排查全套路\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"来源：https://fredal.xin/java-error-check\")])]),t._v(\" \"),s(\"p\",[t._v(\"线上故障主要会包括cpu、磁盘、内存以及网络问题，而大多数故障可能会包含不止一个层面的问题，所以进行排查时候尽量四个方面依次排查一遍。同时例如jstack、jmap等工具也是不囿于一个方面的问题的，基本上出问题就是df、free、top 三连，然后依次jstack、jmap伺候，具体问题具体分析即可。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"cpu\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cpu\"}},[t._v(\"#\")]),t._v(\" CPU\")]),t._v(\" \"),s(\"p\",[t._v(\"一般来讲我们首先会排查cpu方面的问题。cpu异常往往还是比较好定位的。原因包括业务逻辑问题(死循环)、频繁gc以及上下文切换过多。而最常见的往往是业务逻辑(或者框架逻辑)导致的，可以使用jstack来分析对应的堆栈情况。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"使用jstack分析cpu问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用jstack分析cpu问题\"}},[t._v(\"#\")]),t._v(\" 使用jstack分析cpu问题\")]),t._v(\" \"),s(\"p\",[t._v(\"我们先用ps命令找到对应进程的pid(如果你有好几个目标进程，可以先用top看一下哪个占用比较高)。\\n接着用\"),s(\"code\",[t._v(\"top -H -p pid\")]),t._v(\"来找到cpu使用率比较高的一些线程\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083804.png\",alt:\"img\"}}),t._v(\"\\n然后将占用最高的pid转换为16进制\"),s(\"code\",[t._v(\"printf '%x\\\\n' pid\")]),t._v(\"得到nid\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083806.png\",alt:\"img\"}}),t._v(\"\\n接着直接在jstack中找到相应的堆栈信息\"),s(\"code\",[t._v(\"jstack pid |grep 'nid' -C5 –color\")]),t._v(\" \"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-83807.png\",alt:\"img\"}}),t._v(\"\\n可以看到我们已经找到了nid为0x42的堆栈信息，接着只要仔细分析一番即可。\")]),t._v(\" \"),s(\"p\",[t._v(\"当然更常见的是我们对整个jstack文件进行分析，通常我们会比较关注WAITING和TIMED_WAITING的部分，BLOCKED就不用说了。我们可以使用命令\"),s(\"code\",[t._v('cat jstack.log | grep \"java.lang.Thread.State\" | sort -nr | uniq -c')]),t._v(\"来对jstack的状态有一个整体的把握，如果WAITING之类的特别多，那么多半是有问题啦。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083807.png\",alt:\"img\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"频繁gc\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#频繁gc\"}},[t._v(\"#\")]),t._v(\" 频繁gc\")]),t._v(\" \"),s(\"p\",[t._v(\"当然我们还是会使用jstack来分析问题，但有时候我们可以先确定下gc是不是太频繁，使用\"),s(\"code\",[t._v(\"jstat -gc pid 1000\")]),t._v(\"命令来对gc分代变化情况进行观察，1000表示采样间隔(ms)，S0C/S1C、S0U/S1U、EC/EU、OC/OU、MC/MU分别代表两个Survivor区、Eden区、老年代、元数据区的容量和使用量。YGC/YGT、FGC/FGCT、GCT则代表YoungGc、FullGc的耗时和次数以及总耗时。如果看到gc比较频繁，再针对gc方面做进一步分析，具体可以参考一下gc章节的描述。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083808.png\",alt:\"img\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"上下文切换\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#上下文切换\"}},[t._v(\"#\")]),t._v(\" 上下文切换\")]),t._v(\" \"),s(\"p\",[t._v(\"针对频繁上下文问题，我们可以使用\"),s(\"code\",[t._v(\"vmstat\")]),t._v(\"命令来进行查看\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083809.png\",alt:\"img\"}}),t._v(\"\\ncs(context switch)一列则代表了上下文切换的次数。\\n如果我们希望对特定的pid进行监控那么可以使用 \"),s(\"code\",[t._v(\"pidstat -w pid\")]),t._v(\"命令，cswch和nvcswch表示自愿及非自愿切换。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-83810.png\",alt:\"img\"}})]),t._v(\" \"),s(\"h2\",{attrs:{id:\"磁盘\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#磁盘\"}},[t._v(\"#\")]),t._v(\" 磁盘\")]),t._v(\" \"),s(\"p\",[t._v(\"磁盘问题和cpu一样是属于比较基础的。首先是磁盘空间方面，我们直接使用\"),s(\"code\",[t._v(\"df -hl\")]),t._v(\"来查看文件系统状态\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083810.png\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[t._v(\"更多时候，磁盘问题还是性能上的问题。我们可以通过iostat\"),s(\"code\",[t._v(\"iostat -d -k -x\")]),t._v(\"来进行分析\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083811.png\",alt:\"img\"}}),t._v(\"\\n最后一列\"),s(\"code\",[t._v(\"%util\")]),t._v(\"可以看到每块磁盘写入的程度，而\"),s(\"code\",[t._v(\"rrqpm/s\")]),t._v(\"以及\"),s(\"code\",[t._v(\"wrqm/s\")]),t._v(\"分别表示读写速度，一般就能帮助定位到具体哪块磁盘出现问题了。\")]),t._v(\" \"),s(\"p\",[t._v(\"另外我们还需要知道是哪个进程在进行读写，一般来说开发自己心里有数，或者用iotop命令来进行定位文件读写的来源。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083812.png\",alt:\"img\"}}),t._v(\"\\n不过这边拿到的是tid，我们要转换成pid，可以通过readlink来找到pid\"),s(\"code\",[t._v(\"readlink -f /proc/*/task/tid/../..\")]),t._v(\"。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-83813.png\",alt:\"img\"}}),t._v(\"\\n找到pid之后就可以看这个进程具体的读写情况\"),s(\"code\",[t._v(\"cat /proc/pid/io\")]),t._v(\" \"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083813.png\",alt:\"img\"}}),t._v(\"\\n我们还可以通过lsof命令来确定具体的文件读写情况\"),s(\"code\",[t._v(\"lsof -p pid\")]),t._v(\" \"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083814.png\",alt:\"img\"}})]),t._v(\" \"),s(\"h2\",{attrs:{id:\"内存\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内存\"}},[t._v(\"#\")]),t._v(\" 内存\")]),t._v(\" \"),s(\"p\",[t._v(\"内存问题排查起来相对比CPU麻烦一些，场景也比较多。主要包括OOM、GC问题和堆外内存。一般来讲，我们会先用\"),s(\"code\",[t._v(\"free\")]),t._v(\"命令先来检查一发内存的各种情况。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083815.png\",alt:\"img\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"堆内内存\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#堆内内存\"}},[t._v(\"#\")]),t._v(\" 堆内内存\")]),t._v(\" \"),s(\"p\",[t._v(\"内存问题大多还都是堆内内存问题。表象上主要分为OOM和StackOverflow。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"oom\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#oom\"}},[t._v(\"#\")]),t._v(\" OOM\")]),t._v(\" \"),s(\"p\",[t._v(\"JMV中的内存不足，OOM大致可以分为以下几种：\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v('Exception in thread \"main\" java.lang.OutOfMemoryError: unable to create new native thread')]),t._v(\"\\n这个意思是没有足够的内存空间给线程分配java栈，基本上还是线程池代码写的有问题，比如说忘记shutdown，所以说应该首先从代码层面来寻找问题，使用jstack或者jmap。如果一切都正常，JVM方面可以通过指定\"),s(\"code\",[t._v(\"Xss\")]),t._v(\"来减少单个thread stack的大小。另外也可以在系统层面，可以通过修改\"),s(\"code\",[t._v(\"/etc/security/limits.conf\")]),t._v(\"nofile和nproc来增大os对线程的限制\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-83816.png\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v('Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space')]),t._v(\"\\n这个意思是堆的内存占用已经达到-Xmx设置的最大值，应该是最常见的OOM错误了。解决思路仍然是先应该在代码中找，怀疑存在内存泄漏，通过jstack和jmap去定位问题。如果说一切都正常，才需要通过调整\"),s(\"code\",[t._v(\"Xmx\")]),t._v(\"的值来扩大内存。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"Caused by: java.lang.OutOfMemoryError: Meta space\")]),t._v(\"\\n这个意思是元数据区的内存占用已经达到\"),s(\"code\",[t._v(\"XX:MaxMetaspaceSize\")]),t._v(\"设置的最大值，排查思路和上面的一致，参数方面可以通过\"),s(\"code\",[t._v(\"XX:MaxPermSize\")]),t._v(\"来进行调整(这里就不说1.8以前的永久代了)。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"stack-overflow\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stack-overflow\"}},[t._v(\"#\")]),t._v(\" Stack Overflow\")]),t._v(\" \"),s(\"p\",[t._v(\"栈内存溢出，这个大家见到也比较多。\\n\"),s(\"strong\",[t._v('Exception in thread \"main\" java.lang.StackOverflowError')]),t._v(\"\\n表示线程栈需要的内存大于Xss值，同样也是先进行排查，参数方面通过\"),s(\"code\",[t._v(\"Xss\")]),t._v(\"来调整，但调整的太大可能又会引起OOM。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"使用jmap定位代码内存泄漏\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用jmap定位代码内存泄漏\"}},[t._v(\"#\")]),t._v(\" 使用JMAP定位代码内存泄漏\")]),t._v(\" \"),s(\"p\",[t._v(\"上述关于OOM和StackOverflow的代码排查方面，我们一般使用JMAP\"),s(\"code\",[t._v(\"jmap -dump:format=b,file=filename pid\")]),t._v(\"来导出dump文件\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083817.png\",alt:\"img\"}}),t._v(\"\\n通过mat(Eclipse Memory Analysis Tools)导入dump文件进行分析，内存泄漏问题一般我们直接选Leak Suspects即可，mat给出了内存泄漏的建议。另外也可以选择Top Consumers来查看最大对象报告。和线程相关的问题可以选择thread overview进行分析。除此之外就是选择Histogram类概览来自己慢慢分析，大家可以搜搜mat的相关教程。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083818.png\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[t._v(\"日常开发中，代码产生内存泄漏是比较常见的事，并且比较隐蔽，需要开发者更加关注细节。比如说每次请求都new对象，导致大量重复创建对象；进行文件流操作但未正确关闭；手动不当触发gc；ByteBuffer缓存分配不合理等都会造成代码OOM。\")]),t._v(\" \"),s(\"p\",[t._v(\"另一方面，我们可以在启动参数中指定\"),s(\"code\",[t._v(\"-XX:+HeapDumpOnOutOfMemoryError\")]),t._v(\"来保存OOM时的dump文件。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"gc问题和线程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gc问题和线程\"}},[t._v(\"#\")]),t._v(\" gc问题和线程\")]),t._v(\" \"),s(\"p\",[t._v(\"gc问题除了影响cpu也会影响内存，排查思路也是一致的。一般先使用jstat来查看分代变化情况，比如youngGC或者fullGC次数是不是太多呀；EU、OU等指标增长是不是异常呀等。\\n线程的话太多而且不被及时gc也会引发oom，大部分就是之前说的\"),s(\"code\",[t._v(\"unable to create new native thread\")]),t._v(\"。除了jstack细细分析dump文件外，我们一般先会看下总体线程，通过\"),s(\"code\",[t._v(\"pstreee -p pid |wc -l\")]),t._v(\"。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083819.png\",alt:\"img\"}}),t._v(\"\\n或者直接通过查看\"),s(\"code\",[t._v(\"/proc/pid/task\")]),t._v(\"的数量即为线程数量。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083820.png\",alt:\"img\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"堆外内存\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#堆外内存\"}},[t._v(\"#\")]),t._v(\" 堆外内存\")]),t._v(\" \"),s(\"p\",[t._v(\"如果碰到堆外内存溢出，那可真是太不幸了。首先堆外内存溢出表现就是物理常驻内存增长快，报错的话视使用方式都不确定，如果由于使用Netty导致的，那错误日志里可能会出现\"),s(\"code\",[t._v(\"OutOfDirectMemoryError\")]),t._v(\"错误，如果直接是DirectByteBuffer，那会报\"),s(\"code\",[t._v(\"OutOfMemoryError: Direct buffer memory\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"堆外内存溢出往往是和NIO的使用相关，一般我们先通过pmap来查看下进程占用的内存情况\"),s(\"code\",[t._v(\"pmap -x pid | sort -rn -k3 | head -30\")]),t._v(\"，这段意思是查看对应pid倒序前30大的内存段。这边可以再一段时间后再跑一次命令看看内存增长情况，或者和正常机器比较可疑的内存段在哪里。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-83821.png\",alt:\"img\"}}),t._v(\"\\n我们如果确定有可疑的内存端，需要通过gdb来分析\"),s(\"code\",[t._v('gdb --batch --pid {pid} -ex \"dump memory filename.dump {内存起始地址} {内存起始地址+内存块大小}\"')]),t._v(\" \"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083821.png\",alt:\"img\"}}),t._v(\"\\n获取dump文件后可用heaxdump进行查看\"),s(\"code\",[t._v(\"hexdump -C filename | less\")]),t._v(\"，不过大多数看到的都是二进制乱码。\")]),t._v(\" \"),s(\"p\",[t._v(\"NMT是Java7U40引入的HotSpot新特性，配合jcmd命令我们就可以看到具体内存组成了。需要在启动参数中加入 \"),s(\"code\",[t._v(\"-XX:NativeMemoryTracking=summary\")]),t._v(\" 或者 \"),s(\"code\",[t._v(\"-XX:NativeMemoryTracking=detail\")]),t._v(\"，会有略微性能损耗。\")]),t._v(\" \"),s(\"p\",[t._v(\"一般对于堆外内存缓慢增长直到爆炸的情况来说，可以先设一个基线\"),s(\"code\",[t._v(\"jcmd pid VM.native_memory baseline\")]),t._v(\"。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083822.png\",alt:\"img\"}}),t._v(\"\\n然后等放一段时间后再去看看内存增长的情况，通过\"),s(\"code\",[t._v(\"jcmd pid VM.native_memory detail.diff(summary.diff)\")]),t._v(\"做一下summary或者detail级别的diff。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083823.png\",alt:\"img\"}}),t._v(\" \"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-83824.png\",alt:\"img\"}}),t._v(\"\\n可以看到jcmd分析出来的内存十分详细，包括堆内、线程以及gc(所以上述其他内存异常其实都可以用nmt来分析)，这边堆外内存我们重点关注Internal的内存增长，如果增长十分明显的话那就是有问题了。\\ndetail级别的话还会有具体内存段的增长情况，如下图。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083824.png\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[t._v(\"此外在系统层面，我们还可以使用strace命令来监控内存分配 \"),s(\"code\",[t._v('strace -f -e \"brk,mmap,munmap\" -p pid')]),t._v(\"\\n这边内存分配信息主要包括了pid和内存地址。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083825.jpg\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[t._v(\"不过其实上面那些操作也很难定位到具体的问题点，关键还是要看错误日志栈，找到可疑的对象，搞清楚它的回收机制，然后去分析对应的对象。比如DirectByteBuffer分配内存的话，是需要full GC或者手动system.gc来进行回收的(所以最好不要使用\"),s(\"code\",[t._v(\"-XX:+DisableExplicitGC\")]),t._v(\")。那么其实我们可以跟踪一下DirectByteBuffer对象的内存情况，通过\"),s(\"code\",[t._v(\"jmap -histo:live pid\")]),t._v(\"手动触发fullGC来看看堆外内存有没有被回收。如果被回收了，那么大概率是堆外内存本身分配的太小了，通过\"),s(\"code\",[t._v(\"-XX:MaxDirectMemorySize\")]),t._v(\"进行调整。如果没有什么变化，那就要使用jmap去分析那些不能被gc的对象，以及和DirectByteBuffer之间的引用关系了。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"gc问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gc问题\"}},[t._v(\"#\")]),t._v(\" GC问题\")]),t._v(\" \"),s(\"p\",[t._v(\"堆内内存泄漏总是和 GC 异常相伴。不过 GC 问题不只是和内存问题相关，还有可能引起 CPU 负载、网络问题等系列并发症，只是相对来说和内存联系紧密些，所以我们在此单独总结一下 GC 相关问题。\")]),t._v(\" \"),s(\"p\",[t._v(\"我们在 cpu 章介绍了使用jstat来获取当前GC分代变化信息。而更多时候，我们是通过GC日志来排查问题的，在启动参数中加上\"),s(\"code\",[t._v(\"-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps\")]),t._v(\"来开启GC日志。\\n常见的Young GC、Full GC日志含义在此就不做赘述了。\")]),t._v(\" \"),s(\"p\",[t._v(\"针对gc日志，我们就能大致推断出youngGC与fullGC是否过于频繁或者耗时过长，从而对症下药。我们下面将对G1垃圾收集器来做分析，这边也建议大家使用G1\"),s(\"code\",[t._v(\"-XX:+UseG1GC\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"youngGC过频繁\")]),t._v(\"\\nyoungGC 频繁一般是短周期小对象较多，先考虑是不是 Eden区/新生代设置的太小了，看能否通过调整 -Xmn、-XX:SurvivorRatio 等参数设置来解决问题。如果参数正常，但是 young gc 频率还是太高，就需要使用 Jmap 和MAT 对 dump 文件进行进一步排查了。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"youngGC耗时过长\")]),t._v(\"\\n耗时过长问题就要看GC日志里耗时耗在哪一块了。以G1日志为例，可以关注Root Scanning、Object Copy、Ref Proc等阶段。Ref Proc耗时长，就要注意引用相关的对象。Root Scanning耗时长，就要注意线程数、跨代引用。Object Copy 则需要关注对象生存周期。而且耗时分析它需要横向比较，就是和其他项目或者正常时间段的耗时比较。比如说图中的Root Scanning和正常时间段比增长较多，那就是起的线程太多了。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083826.png\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"触发fullGC\")]),t._v(\"\\nG1中更多的还是mixedGC，但 mixedGC 可以和 youngGC 思路一样去排查。触发 fullGC 了一般都会有问题，G1会退化使用 Serial 收集器来完成垃圾的清理工作，暂停时长达到秒级别，可以说是半跪了。\\nfullGC的原因可能包括以下这些，以及参数调整方面的一些思路：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"并发阶段失败：在并发标记阶段，MixGC之前老年代就被填满了，那么这时候G1就会放弃标记周期。这种情况，可能就需要增加堆大小，或者调整并发标记线程数\"),s(\"code\",[t._v(\"-XX:ConcGCThreads\")]),t._v(\"。\")]),t._v(\" \"),s(\"li\",[t._v(\"晋升失败：在GC的时候没有足够的内存供存活/晋升对象使用，所以触发了Full GC。这时候可以通过\"),s(\"code\",[t._v(\"-XX:G1ReservePercent\")]),t._v(\"来增加预留内存百分比，减少\"),s(\"code\",[t._v(\"-XX:InitiatingHeapOccupancyPercent\")]),t._v(\"来提前启动标记，\"),s(\"code\",[t._v(\"-XX:ConcGCThreads\")]),t._v(\"来增加标记线程数也是可以的。\")]),t._v(\" \"),s(\"li\",[t._v(\"大对象分配失败：大对象找不到合适的region空间进行分配，就会进行fullGC，这种情况下可以增大内存或者增大\"),s(\"code\",[t._v(\"-XX:G1HeapRegionSize\")]),t._v(\"。\")]),t._v(\" \"),s(\"li\",[t._v(\"程序主动执行System.gc()：不要随便写就对了。\")])]),t._v(\" \"),s(\"p\",[t._v(\"另外，我们可以在启动参数中配置\"),s(\"code\",[t._v(\"-XX:HeapDumpPath=/xxx/dump.hprof\")]),t._v(\"来dump fullGC相关的文件，并通过jinfo来进行gc前后的dump\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\"jinfo \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"flag \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HeapDumpBeforeFullGC\")]),t._v(\" pid \\njinfo \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"flag \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HeapDumpAfterFullGC\")]),t._v(\" pid\\n\")])])]),s(\"p\",[t._v(\"这样得到2份dump文件，对比后主要关注被gc掉的问题对象来定位问题。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"full-gc-问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#full-gc-问题\"}},[t._v(\"#\")]),t._v(\" Full GC  问题\")]),t._v(\" \"),s(\"p\",[t._v(\"下面4种情况，对象会进入到老年代中：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"YGC时，To Survivor区不足以存放存活的对象，对象会直接进入到老年代。\")]),t._v(\" \"),s(\"li\",[t._v(\"经过多次YGC后，如果存活对象的年龄达到了设定阈值，则会晋升到老年代中。\")]),t._v(\" \"),s(\"li\",[t._v(\"动态年龄判定规则，To Survivor区中相同年龄的对象，如果其大小之和占到了 To Survivor区一半以上的空间，那么大于此年龄的对象会直接进入老年代，而不需要达到默认的分代年龄。\")]),t._v(\" \"),s(\"li\",[t._v(\"大对象：由-XX:PretenureSizeThreshold启动参数控制，若对象大小大于此值，就会绕过新生代, 直接在老年代中分配。\")])]),t._v(\" \"),s(\"p\",[t._v(\"当晋升到老年代的对象大于了老年代的剩余空间时，就会触发FGC（Major GC），FGC处理的区域同时包括新生代和老年代。除此之外，还有以下4种情况也会触发FGC：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"老年代的内存使用率达到了一定阈值（可通过参数调整），直接触发FGC。\")]),t._v(\" \"),s(\"li\",[t._v(\"空间分配担保：在YGC之前，会先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。如果小于，说明YGC是不安全的，则会查看参数 HandlePromotionFailure 是否被设置成了允许担保失败，如果不允许则直接触发Full GC；如果允许，那么会进一步检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果小于也会触发 Full GC。\")]),t._v(\" \"),s(\"li\",[t._v(\"Metaspace（元空间）在空间不足时会进行扩容，当扩容到了-XX:MetaspaceSize 参数的指定值时，也会触发FGC。\")]),t._v(\" \"),s(\"li\",[t._v(\"System.gc() 或者Runtime.gc() 被显式调用时，触发FGC。\")])]),t._v(\" \"),s(\"h5\",{attrs:{id:\"在什么情况下-gc会对程序产生影响\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#在什么情况下-gc会对程序产生影响\"}},[t._v(\"#\")]),t._v(\" 在什么情况下，GC会对程序产生影响？\")]),t._v(\" \"),s(\"p\",[t._v(\"不管YGC还是FGC，都会造成一定程度的程序卡顿（即Stop The World问题：GC线程开始工作，其他工作线程被挂起），即使采用ParNew、CMS或者G1这些更先进的垃圾回收算法，也只是在减少卡顿时间，而并不能完全消除卡顿。\")]),t._v(\" \"),s(\"p\",[t._v(\"那到底什么情况下，GC会对程序产生影响呢？根据严重程度从高到底，我认为包括以下4种情况：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"FGC过于频繁：FGC通常是比较慢的，少则几百毫秒，多则几秒，正常情况FGC每隔几个小时甚至几天才执行一次，对系统的影响还能接受。但是，一旦出现FGC频繁（比如几十分钟就会执行一次），这种肯定是存在问题的，它会导致工作线程频繁被停止，让系统看起来一直有卡顿现象，也会使得程序的整体性能变差。\")]),t._v(\" \"),s(\"li\",[t._v(\"YGC耗时过长：一般来说，YGC的总耗时在几十或者上百毫秒是比较正常的，虽然会引起系统卡顿几毫秒或者几十毫秒，这种情况几乎对用户无感知，对程序的影响可以忽略不计。但是如果YGC耗时达到了1秒甚至几秒（都快赶上FGC的耗时了），那卡顿时间就会增大，加上YGC本身比较频繁，就会导致比较多的服务超时问题。\")]),t._v(\" \"),s(\"li\",[t._v(\"FGC耗时过长：FGC耗时增加，卡顿时间也会随之增加，尤其对于高并发服务，可能导致FGC期间比较多的超时问题，可用性降低，这种也需要关注。\")]),t._v(\" \"),s(\"li\",[t._v(\"YGC过于频繁：即使YGC不会引起服务超时，但是YGC过于频繁也会降低服务的整体性能，对于高并发服务也是需要关注的。\")])]),t._v(\" \"),s(\"p\",[t._v(\"其中，「FGC过于频繁」和「YGC耗时过长」，这两种情况属于比较典型的GC问题，大概率会对程序的服务质量产生影响。剩余两种情况的严重程度低一些，但是对于高并发或者高可用的程序也需要关注。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"排查fgc问题的实践指南\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#排查fgc问题的实践指南\"}},[t._v(\"#\")]),t._v(\" 排查FGC问题的实践指南\")]),t._v(\" \"),s(\"p\",[t._v(\"通过上面的案例分析以及理论介绍，再总结下FGC问题的排查思路，作为一份实践指南供大家参考。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-清楚从程序角度-有哪些原因导致fgc\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-清楚从程序角度-有哪些原因导致fgc\"}},[t._v(\"#\")]),t._v(\" 1. 清楚从程序角度，有哪些原因导致FGC？\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"大对象：系统一次性加载了过多数据到内存中（比如SQL查询未做分页），导致大对象进入了老年代。\")]),t._v(\" \"),s(\"li\",[t._v(\"内存泄漏：频繁创建了大量对象，但是无法被回收（比如IO对象使用完后未调用close方法释放资源），先引发FGC，最后导致OOM.\")]),t._v(\" \"),s(\"li\",[t._v(\"程序频繁生成一些长生命周期的对象，当这些对象的存活年龄超过分代年龄时便会进入老年代，最后引发FGC.\")]),t._v(\" \"),s(\"li\",[t._v(\"程序BUG导致动态生成了很多新类，使得 Metaspace 不断被占用，先引发FGC，最后导致OOM.\")]),t._v(\" \"),s(\"li\",[t._v(\"代码中显式调用了gc方法，包括自己的代码甚至框架中的代码。\")]),t._v(\" \"),s(\"li\",[t._v(\"JVM参数设置问题：包括总内存大小、新生代和老年代的大小、Eden区和S区的大小、元空间大小、垃圾回收算法等等。\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-清楚排查问题时能使用哪些工具\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-清楚排查问题时能使用哪些工具\"}},[t._v(\"#\")]),t._v(\" 2. 清楚排查问题时能使用哪些工具\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"公司的监控系统：大部分公司都会有，可全方位监控JVM的各项指标。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"JDK的自带工具，包括jmap、jstat等常用命令：\")]),t._v(\" \"),s(\"p\",[t._v(\"# 查看堆内存各区域的使用率以及GC情况\")]),t._v(\" \"),s(\"p\",[t._v(\"jstat -gcutil -h20 pid 1000\")]),t._v(\" \"),s(\"p\",[t._v(\"# 查看堆内存中的存活对象，并按空间排序\")]),t._v(\" \"),s(\"p\",[t._v(\"jmap -histo pid | head -n20\")]),t._v(\" \"),s(\"p\",[t._v(\"# dump堆内存文件\")]),t._v(\" \"),s(\"p\",[t._v(\"jmap -dump:format=b,file=heap pid\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"可视化的堆内存分析工具：JVisualVM、MAT等\")])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-排查指南\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-排查指南\"}},[t._v(\"#\")]),t._v(\" 3. 排查指南\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"查看监控，以了解出现问题的时间点以及当前FGC的频率（可对比正常情况看频率是否正常）\")]),t._v(\" \"),s(\"li\",[t._v(\"了解该时间点之前有没有程序上线、基础组件升级等情况。\")]),t._v(\" \"),s(\"li\",[t._v(\"了解JVM的参数设置，包括：堆空间各个区域的大小设置，新生代和老年代分别采用了哪些垃圾收集器，然后分析JVM参数设置是否合理。\")]),t._v(\" \"),s(\"li\",[t._v(\"再对步骤1中列出的可能原因做排除法，其中元空间被打满、内存泄漏、代码显式调用gc方法比较容易排查。\")]),t._v(\" \"),s(\"li\",[t._v(\"针对大对象或者长生命周期对象导致的FGC，可通过 \"),s(\"a\",{attrs:{href:\"http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247484637&idx=1&sn=9fc5de9be941b6b6eb6f36da09237d0c&chksm=eb5381ebdc2408fdaa5ff6224a2bad0c6f5fe60ae57718c808028fe1f537dd8855fea0d23757&scene=21#wechat_redirect\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"jmap \"),s(\"OutboundLink\")],1),t._v(\"-histo 命令并结合dump堆内存文件作进一步分析，需要先定位到可疑对象。\")]),t._v(\" \"),s(\"li\",[t._v(\"通过可疑对象定位到具体代码再次分析，这时候要结合GC原理和JVM参数设置，弄清楚可疑对象是否满足了进入到老年代的条件才能下结论。\")])]),t._v(\" \"),s(\"h1\",{attrs:{id:\"网络\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网络\"}},[t._v(\"#\")]),t._v(\" 网络\")]),t._v(\" \"),s(\"p\",[t._v(\"涉及到网络层面的问题一般都比较复杂，场景多，定位难，成为了大多数开发的噩梦，应该是最复杂的了。这里会举一些例子，并从tcp层、应用层以及工具的使用等方面进行阐述。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"超时\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#超时\"}},[t._v(\"#\")]),t._v(\" 超时\")]),t._v(\" \"),s(\"p\",[t._v(\"超时错误大部分处在应用层面，所以这块着重理解概念。超时大体可以分为连接超时和读写超时，某些使用连接池的客户端框架还会存在获取连接超时和空闲连接清理超时。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"读写超时。readTimeout/writeTimeout，有些框架叫做so_timeout或者socketTimeout，均指的是数据读写超时。注意这边的超时大部分是指逻辑上的超时。soa的超时指的也是读超时。读写超时一般都只针对客户端设置。\")]),t._v(\" \"),s(\"li\",[t._v(\"连接超时。connectionTimeout，客户端通常指与服务端建立连接的最大时间。服务端这边connectionTimeout就有些五花八门了，jetty中表示空闲连接清理时间，tomcat则表示连接维持的最大时间。\")]),t._v(\" \"),s(\"li\",[t._v(\"其他。包括连接获取超时connectionAcquireTimeout和空闲连接清理超时idleConnectionTimeout。多用于使用连接池或队列的客户端或服务端框架。\")])]),t._v(\" \"),s(\"p\",[t._v(\"我们在设置各种超时时间中，需要确认的是尽量保持客户端的超时小于服务端的超时，以保证连接正常结束。\")]),t._v(\" \"),s(\"p\",[t._v(\"在实际开发中，我们关心最多的应该是接口的读写超时了。\")]),t._v(\" \"),s(\"p\",[t._v(\"如何设置合理的接口超时是一个问题。如果接口超时设置的过长，那么有可能会过多地占用服务端的tcp连接。而如果接口设置的过短，那么接口超时就会非常频繁。\")]),t._v(\" \"),s(\"p\",[t._v(\"服务端接口明明rt降低，但客户端仍然一直超时又是另一个问题。这个问题其实很简单，客户端到服务端的链路包括网络传输、排队以及服务处理等，每一个环节都可能是耗时的原因。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"tcp队列溢出\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp队列溢出\"}},[t._v(\"#\")]),t._v(\" TCP队列溢出\")]),t._v(\" \"),s(\"p\",[t._v(\"tcp队列溢出是个相对底层的错误，它可能会造成超时、rst等更表层的错误。因此错误也更隐蔽，所以我们单独说一说。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083827.jpg\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[t._v(\"如上图所示，这里有两个队列：syns queue(半连接队列）、accept queue（全连接队列）。三次握手，在server收到client的syn后，把消息放到syns queue，回复syn+ack给client，server收到client的ack，如果这时accept queue没满，那就从syns queue拿出暂存的信息放入accept queue中，否则按tcp_abort_on_overflow指示的执行。\")]),t._v(\" \"),s(\"p\",[t._v(\"tcp_abort_on_overflow 0表示如果三次握手第三步的时候accept queue满了那么server扔掉client发过来的ack。tcp_abort_on_overflow 1则表示第三步的时候如果全连接队列满了，server发送一个rst包给client，表示废掉这个握手过程和这个连接，意味着日志里可能会有很多\"),s(\"code\",[t._v(\"connection reset / connection reset by peer\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"那么在实际开发中，我们怎么能快速定位到tcp队列溢出呢？\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v('netstat命令，执行netstat -s | egrep \"listen|LISTEN\"')]),t._v(\" \"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-83828.jpg\",alt:\"img\"}}),t._v(\"\\n如上图所示，overflowed表示全连接队列溢出的次数，sockets dropped表示半连接队列溢出的次数。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"ss命令，执行ss -lnt\")]),t._v(\" \"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083828.jpg\",alt:\"img\"}}),t._v(\"\\n上面看到Send-Q 表示第三列的listen端口上的全连接队列最大为5，第一列Recv-Q为全连接队列当前使用了多少。\")]),t._v(\" \"),s(\"p\",[t._v(\"接着我们看看怎么设置全连接、半连接队列大小吧：\")]),t._v(\" \"),s(\"p\",[t._v(\"全连接队列的大小取决于min(backlog, somaxconn)。backlog是在socket创建的时候传入的，somaxconn是一个os级别的系统参数。而半连接队列的大小取决于max(64, /proc/sys/net/ipv4/tcp_max_syn_backlog)。\")]),t._v(\" \"),s(\"p\",[t._v(\"在日常开发中，我们往往使用servlet容器作为服务端，所以我们有时候也需要关注容器的连接队列大小。在tomcat中backlog叫做\"),s(\"code\",[t._v(\"acceptCount\")]),t._v(\"，在jetty里面则是\"),s(\"code\",[t._v(\"acceptQueueSize\")]),t._v(\"。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"rst异常\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rst异常\"}},[t._v(\"#\")]),t._v(\" RST异常\")]),t._v(\" \"),s(\"p\",[t._v(\"RST包表示连接重置，用于关闭一些无用的连接，通常表示异常关闭，区别于四次挥手。\")]),t._v(\" \"),s(\"p\",[t._v(\"在实际开发中，我们往往会看到\"),s(\"code\",[t._v(\"connection reset / connection reset by peer\")]),t._v(\"错误，这种情况就是RST包导致的。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"端口不存在\")])]),t._v(\" \"),s(\"p\",[t._v(\"如果像不存在的端口发出建立连接SYN请求，那么服务端发现自己并没有这个端口则会直接返回一个RST报文，用于中断连接。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"主动代替FIN终止连接\")])]),t._v(\" \"),s(\"p\",[t._v(\"一般来说，正常的连接关闭都是需要通过FIN报文实现，然而我们也可以用RST报文来代替FIN，表示直接终止连接。实际开发中，可设置SO_LINGER数值来控制，这种往往是故意的，来跳过TIMED_WAIT，提供交互效率，不闲就慎用。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"客户端或服务端有一边发生了异常，该方向对端发送RST以告知关闭连接\")])]),t._v(\" \"),s(\"p\",[t._v(\"我们上面讲的tcp队列溢出发送RST包其实也是属于这一种。这种往往是由于某些原因，一方无法再能正常处理请求连接了(比如程序崩了，队列满了)，从而告知另一方关闭连接。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"接收到的TCP报文不在已知的TCP连接内\")])]),t._v(\" \"),s(\"p\",[t._v(\"比如，一方机器由于网络实在太差TCP报文失踪了，另一方关闭了该连接，然后过了许久收到了之前失踪的TCP报文，但由于对应的TCP连接已不存在，那么会直接发一个RST包以便开启新的连接。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"一方长期未收到另一方的确认报文，在一定时间或重传次数后发出RST报文\")])]),t._v(\" \"),s(\"p\",[t._v(\"这种大多也和网络环境相关了，网络环境差可能会导致更多的RST报文。\")]),t._v(\" \"),s(\"p\",[t._v(\"之前说过RST报文多会导致程序报错，在一个已关闭的连接上读操作会报\"),s(\"code\",[t._v(\"connection reset\")]),t._v(\"，而在一个已关闭的连接上写操作则会报\"),s(\"code\",[t._v(\"connection reset by peer\")]),t._v(\"。通常我们可能还会看到\"),s(\"code\",[t._v(\"broken pipe\")]),t._v(\"错误，这是管道层面的错误，表示对已关闭的管道进行读写，往往是在收到RST，报出\"),s(\"code\",[t._v(\"connection reset\")]),t._v(\"错后继续读写数据报的错，这个在glibc源码注释中也有介绍。\")]),t._v(\" \"),s(\"p\",[t._v(\"我们在排查故障时候怎么确定有RST包的存在呢？当然是使用tcpdump命令进行抓包，并使用wireshark进行简单分析了。\"),s(\"code\",[t._v(\"tcpdump -i en0 tcp -w xxx.cap\")]),t._v(\"，en0表示监听的网卡。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083829.jpg\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[t._v(\"接下来我们通过wireshark打开抓到的包，可能就能看到如下图所示，红色的就表示RST包了。\\n\"),s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083830.jpg\",alt:\"img\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"time-wait和close-wait\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#time-wait和close-wait\"}},[t._v(\"#\")]),t._v(\" TIME_WAIT和CLOSE_WAIT\")]),t._v(\" \"),s(\"p\",[t._v(\"TIME_WAIT和CLOSE_WAIT是啥意思相信大家都知道。\\n在线上时，我们可以直接用命令\"),s(\"code\",[t._v(\"netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\")]),t._v(\"来查看time-wait和close_wait的数量\")]),t._v(\" \"),s(\"p\",[t._v(\"用ss命令会更快\"),s(\"code\",[t._v(\"ss -ant | awk '{++S[$1]} END {for(a in S) print a, S[a]}'\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083830.png\",alt:\"img\"}})]),t._v(\" \"),s(\"h4\",{attrs:{id:\"time-wait\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#time-wait\"}},[t._v(\"#\")]),t._v(\" TIME_WAIT\")]),t._v(\" \"),s(\"p\",[t._v(\"time_wait的存在一是为了丢失的数据包被后面连接复用，二是为了在2MSL的时间范围内正常关闭连接。它的存在其实会大大减少RST包的出现。\")]),t._v(\" \"),s(\"p\",[t._v(\"过多的time_wait在短连接频繁的场景比较容易出现。这种情况可以在服务端做一些内核参数调优:\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\"#表示开启重用。允许将TIME\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"WAIT sockets重新用于新的TCP连接，默认为\"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\"，表示关闭\\nnet\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"ipv4\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"tcp_tw_reuse \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"\\n#表示开启TCP连接中TIME\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"WAIT sockets的快速回收，默认为\"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\"，表示关闭\\nnet\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"ipv4\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"tcp_tw_recycle \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"当然我们不要忘记在NAT环境下因为时间戳错乱导致数据包被拒绝的坑了，另外的办法就是改小\"),s(\"code\",[t._v(\"tcp_max_tw_buckets\")]),t._v(\"，超过这个数的time_wait都会被干掉，不过这也会导致报\"),s(\"code\",[t._v(\"time wait bucket table overflow\")]),t._v(\"的错。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"close-wait\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#close-wait\"}},[t._v(\"#\")]),t._v(\" CLOSE_WAIT\")]),t._v(\" \"),s(\"p\",[t._v(\"close_wait往往都是因为应用程序写的有问题，没有在ACK后再次发起FIN报文。close_wait出现的概率甚至比time_wait要更高，后果也更严重。往往是由于某个地方阻塞住了，没有正常关闭连接，从而渐渐地消耗完所有的线程。\")]),t._v(\" \"),s(\"p\",[t._v(\"想要定位这类问题，最好是通过jstack来分析线程堆栈来排查问题，具体可参考上述章节。这里仅举一个例子。\")]),t._v(\" \"),s(\"p\",[t._v(\"开发同学说应用上线后CLOSE_WAIT就一直增多，直到挂掉为止，jstack后找到比较可疑的堆栈是大部分线程都卡在了\"),s(\"code\",[t._v(\"countdownlatch.await\")]),t._v(\"方法，找开发同学了解后得知使用了多线程但是确没有catch异常，修改后发现异常仅仅是最简单的升级sdk后常出现的\"),s(\"code\",[t._v(\"class not found\")]),t._v(\"。\")])])}),[],!1,null,null,null);a.default=v.exports}}]);","extractedComments":[]}