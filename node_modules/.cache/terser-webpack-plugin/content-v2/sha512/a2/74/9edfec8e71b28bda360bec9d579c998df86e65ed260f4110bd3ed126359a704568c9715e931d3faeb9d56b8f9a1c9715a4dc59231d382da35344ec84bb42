{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{677:function(t,r,e){\"use strict\";e.r(r);var a=e(6),n=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"外观模式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#外观模式\"}},[t._v(\"#\")]),t._v(\" 外观模式\")]),t._v(\" \"),e(\"p\",[t._v(\"之前介绍过装饰者模式和适配器模式，我们知道适配器模式是如何将一个类的接口转换成另一个符合客户期望的接口的。但 Java 中要实现这一点，必须将一个不兼容接口的对象包装起来，变成兼容的对象。\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"装饰模式：不改变接口，但加入责任\")]),t._v(\" \"),e(\"li\",[t._v(\"适配器模式：将一个接口转换为另一个接口\")]),t._v(\" \"),e(\"li\",[t._v(\"外观模式：让接口更简单\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#问题\"}},[t._v(\"#\")]),t._v(\" 问题\")]),t._v(\" \"),e(\"p\",[t._v(\"假设你必须在代码中使用某个复杂的库或框架中的众多对象。 正常情况下，你需要负责所有对象的初始化工作、 管理其依赖关系并按正确的顺序执行方法等。\")]),t._v(\" \"),e(\"p\",[t._v(\"最终， 程序中类的业务逻辑将与第三方类的实现细节紧密耦合， 使得理解和维护代码的工作很难进行。\")]),t._v(\" \"),e(\"p\",[t._v(\"外观类为包含许多活动部件的复杂子系统提供一个简单的接口。 与直接调用子系统相比， 外观提供的功能可能比较有限， 但它却包含了客户端真正关心的功能。\")]),t._v(\" \"),e(\"p\",[t._v(\"如果你的程序需要与包含几十种功能的复杂库整合， 但只需使用其中非常少的功能， 那么使用外观模式会非常方便。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"真实世界类比\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#真实世界类比\"}},[t._v(\"#\")]),t._v(\" 真实世界类比\")]),t._v(\" \"),e(\"p\",[t._v(\"当你通过电话给商店下达订单时， 接线员就是该商店的所有服务和部门的外观。 接线员为你提供了一个同购物系统、 支付网关和各种送货服务进行互动的简单语音接口。\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://refactoringguru.cn/images/patterns/diagrams/facade/live-example-zh.png\",alt:\"电话购物的示例\"}})]),t._v(\" \"),e(\"h2\",{attrs:{id:\"外观模式结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#外观模式结构\"}},[t._v(\"#\")]),t._v(\" 外观模式结构\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://refactoringguru.cn/images/patterns/diagrams/facade/structure.png\",alt:\"外观设计模式的结构\"}})]),t._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"strong\",[t._v(\"外观\")]),t._v(\" （Facade） 提供了一种访问特定子系统功能的便捷方式， 其了解如何重定向客户端请求， 知晓如何操作一切活动部件。\")])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v(\"创建\"),e(\"strong\",[t._v(\"附加外观\")]),t._v(\" （Additional Facade） 类可以避免多种不相关的功能污染单一外观， 使其变成又一个复杂结构。 客户端和其他外观都可使用附加外观。\")])]),t._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[t._v(\"复杂子系统\")]),t._v(\" （Complex Subsystem） 由数十个不同对象构成。 如果要用这些对象完成有意义的工作， 你必须深入了解子系统的实现细节， 比如按照正确顺序初始化对象和为其提供正确格式的数据。\")]),t._v(\" \"),e(\"p\",[t._v(\"子系统类不会意识到外观的存在， 它们在系统内运作并且相互之间可直接进行交互。\")])]),t._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[t._v(\"客户端\")]),t._v(\" （Client） 使用外观代替对子系统对象的直接调用。\")])])]),t._v(\" \"),e(\"h4\",{attrs:{id:\"coding\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#coding\"}},[t._v(\"#\")]),t._v(\" Coding\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"外观模式适合应用场景\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#外观模式适合应用场景\"}},[t._v(\"#\")]),t._v(\" 外观模式适合应用场景\")]),t._v(\" \"),e(\"p\",[t._v(\"如果你需要一个指向复杂子系统的直接接口， 且该接口的功能有限， 则可以使用外观模式。\")]),t._v(\" \"),e(\"p\",[t._v(\"子系统通常会随着时间的推进变得越来越复杂。 即便是应用了设计模式， 通常你也会创建更多的类。 尽管在多种情形中子系统可能是更灵活或易于复用的， 但其所需的配置和样板代码数量将会增长得更快。 为了解决这个问题， 外观将会提供指向子系统中最常用功能的快捷方式， 能够满足客户端的大部分需求。\")]),t._v(\" \"),e(\"p\",[t._v(\"如果需要将子系统组织为多层结构， 可以使用外观。\")]),t._v(\" \"),e(\"p\",[t._v(\"创建外观来定义子系统中各层次的入口。 你可以要求子系统仅使用外观来进行交互， 以减少子系统之间的耦合。\")]),t._v(\" \"),e(\"p\",[t._v(\"让我们回到视频转换框架的例子。 该框架可以拆分为两个层次： 音频相关和视频相关。 你可以为每个层次创建一个外观， 然后要求各层的类必须通过这些外观进行交互。 这种方式看上去与\"),e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/mediator\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"中介者\"),e(\"OutboundLink\")],1),t._v(\"模式非常相似。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"再来认识外观模式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#再来认识外观模式\"}},[t._v(\"#\")]),t._v(\" 再来认识外观模式\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"看到外观模式的实现，可能有朋友会说，这他么不就是把原来客户端的代码搬到了 Facade 里面吗，没什么大变化\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"外观模式目的\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#外观模式目的\"}},[t._v(\"#\")]),t._v(\" 外观模式目的\")]),t._v(\" \"),e(\"p\",[t._v(\"外观模式相当于屏蔽了外部客户端和系统内部模块的交互\")]),t._v(\" \"),e(\"p\",[t._v(\"外观模式的目的不是给系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能更简单的使用子系统。\")]),t._v(\" \"),e(\"p\",[t._v(\"当然即使有了外观，如果需要的话，我们也可以直接调用具体模块功能。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"实现方式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现方式\"}},[t._v(\"#\")]),t._v(\" 实现方式\")]),t._v(\" \"),e(\"ol\",[e(\"li\",[t._v(\"考虑能否在现有子系统的基础上提供一个更简单的接口。 如果该接口能让客户端代码独立于众多子系统类， 那么你的方向就是正确的。\")]),t._v(\" \"),e(\"li\",[t._v(\"在一个新的外观类中声明并实现该接口。 外观应将客户端代码的调用重定向到子系统中的相应对象处。 如果客户端代码没有对子系统进行初始化， 也没有对其后续生命周期进行管理， 那么外观必须完成此类工作。\")]),t._v(\" \"),e(\"li\",[t._v(\"如果要充分发挥这一模式的优势， 你必须确保所有客户端代码仅通过外观来与子系统进行交互。 此后客户端代码将不会受到任何由子系统代码修改而造成的影响， 比如子系统升级后， 你只需修改外观中的代码即可。\")]),t._v(\" \"),e(\"li\",[t._v(\"如果外观变得过于臃肿， 你可以考虑将其部分行为抽取为一个新的专用外观类。\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"外观模式优缺点\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#外观模式优缺点\"}},[t._v(\"#\")]),t._v(\" 外观模式优缺点\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[t._v(\"你可以让自己的代码独立于复杂子系统。\")])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v(\"外观可能成为与程序中所有类都耦合的上帝对象。\")])])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"与其他模式的关系\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#与其他模式的关系\"}},[t._v(\"#\")]),t._v(\" 与其他模式的关系\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"外观模式为现有对象定义了一个新接口， \"),e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/adapter\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"适配器模式\"),e(\"OutboundLink\")],1),t._v(\"则会试图运用已有的接口。 \"),e(\"em\",[t._v(\"适配器\")]),t._v(\"通常只封装一个对象， \"),e(\"em\",[t._v(\"外观\")]),t._v(\"通常会作用于整个对象子系统上。\")]),t._v(\" \"),e(\"li\",[t._v(\"当只需对客户端代码隐藏子系统创建对象的方式时， 你可以使用\"),e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/abstract-factory\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"抽象工厂模式\"),e(\"OutboundLink\")],1),t._v(\"来代替\"),e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/facade\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"外观\"),e(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),e(\"li\",[e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/flyweight\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"享元模式\"),e(\"OutboundLink\")],1),t._v(\"展示了如何生成大量的小型对象， \"),e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/facade\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"外观\"),e(\"OutboundLink\")],1),t._v(\"则展示了如何用一个对象来代表整个子系统。\")]),t._v(\" \"),e(\"li\",[e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/facade\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"外观\"),e(\"OutboundLink\")],1),t._v(\"和\"),e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/mediator\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"中介者模式\"),e(\"OutboundLink\")],1),t._v(\"的职责类似： 它们都尝试在大量紧密耦合的类中组织起合作。\\n\"),e(\"ul\",[e(\"li\",[e(\"em\",[t._v(\"外观\")]),t._v(\"为子系统中的所有对象定义了一个简单接口， 但是它不提供任何新功能。 子系统本身不会意识到外观的存在。 子系统中的对象可以直接进行交流。\")]),t._v(\" \"),e(\"li\",[e(\"em\",[t._v(\"中介者\")]),t._v(\"将系统中组件的沟通行为中心化。 各组件只知道中介者对象， 无法直接相互交流。\")])])]),t._v(\" \"),e(\"li\",[e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/facade\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"外观\"),e(\"OutboundLink\")],1),t._v(\"类通常可以转换为\"),e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/singleton\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"单例模式\"),e(\"OutboundLink\")],1),t._v(\"类， 因为在大部分情况下一个外观对象就足够了。\")]),t._v(\" \"),e(\"li\",[e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/facade\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"外观\"),e(\"OutboundLink\")],1),t._v(\"与\"),e(\"a\",{attrs:{href:\"https://refactoringguru.cn/design-patterns/proxy\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"代理模式\"),e(\"OutboundLink\")],1),t._v(\"的相似之处在于它们都缓存了一个复杂实体并自行对其进行初始化。 \"),e(\"em\",[t._v(\"代理\")]),t._v(\"与其服务对象遵循同一接口， 使得自己和服务对象可以互换， 在这一点上它与\"),e(\"em\",[t._v(\"外观\")]),t._v(\"不同。\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"参考与感谢\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考与感谢\"}},[t._v(\"#\")]),t._v(\" 参考与感谢\")]),t._v(\" \"),e(\"p\",[t._v(\"《图解 Java 设计模式》\\n《Head First设计模式》\\nhttps://refactoringguru.cn/design-patterns/\\nhttps://blog.csdn.net/lu__peng/article/details/79117894\\nhttps://juejin.im/post/5ba28986f265da0abc2b6084#heading-12\")])])}),[],!1,null,null,null);r.default=n.exports}}]);","extractedComments":[]}