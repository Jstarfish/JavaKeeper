{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{724:function(t,e,a){\"use strict\";a.r(e);var r=a(6),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"ol\",[a(\"li\",[t._v(\"Netty 的高性能表现在哪些方面？对你平时的项目开发有何启发？\")]),t._v(\" \"),a(\"li\",[t._v(\"Netty 中有哪些重要组件，它们之间有什么联系？\")]),t._v(\" \"),a(\"li\",[t._v(\"Netty 的内存池、对象池是如何设计的？\")]),t._v(\" \"),a(\"li\",[t._v(\"针对 Netty 你有哪些印象比较深刻的系统调优案例？\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/Netty%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B8%8E%20RPC%20%E5%AE%9E%E8%B7%B5-%E5%AE%8C/assets/CgqCHl-NAQaABGcDAAZa0pmBs40719.png\",alt:\"image \"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"通过 Netty 的学习，还可以锻炼你的编程思维，对 Java 其他的知识体系起到融会贯通的作用\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"netty-整体结构\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#netty-整体结构\"}},[t._v(\"#\")]),t._v(\" Netty 整体结构\")]),t._v(\" \"),a(\"p\",[t._v(\"Netty 是一个设计非常用心的\"),a(\"strong\",[t._v(\"网络基础组件\")]),t._v(\"，Netty 官网给出了有关 Netty 的整体功能模块结构，却没有其他更多的解释。从图中，我们可以清晰地看出 Netty 结构一共分为三个模块：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/Netty%20%e6%a0%b8%e5%bf%83%e5%8e%9f%e7%90%86%e5%89%96%e6%9e%90%e4%b8%8e%20RPC%20%e5%ae%9e%e8%b7%b5-%e5%ae%8c/assets/CgqCHl-NO7eATPMMAAH8t8KvehQ985.png\",alt:\"Drawing 0.png\"}})]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-core-核心层\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-core-核心层\"}},[t._v(\"#\")]),t._v(\" 1. Core 核心层\")]),t._v(\" \"),a(\"p\",[t._v(\"Core 核心层是 Netty 最精华的内容，它提供了底层网络通信的通用抽象和实现，包括可扩展的事件模型、通用的通信 API、支持零拷贝的 ByteBuf 等。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_2-protocol-support-协议支持层\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-protocol-support-协议支持层\"}},[t._v(\"#\")]),t._v(\" 2. Protocol Support 协议支持层\")]),t._v(\" \"),a(\"p\",[t._v(\"协议支持层基本上覆盖了主流协议的编解码实现，如 HTTP、SSL、Protobuf、压缩、大文件传输、WebSocket、文本、二进制等主流协议，此外 Netty 还支持自定义应用层协议。Netty 丰富的协议支持降低了用户的开发成本，基于 Netty 我们可以快速开发 HTTP、WebSocket 等服务。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_3-transport-service-传输服务层\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-transport-service-传输服务层\"}},[t._v(\"#\")]),t._v(\" 3. Transport Service 传输服务层\")]),t._v(\" \"),a(\"p\",[t._v(\"传输服务层提供了网络传输能力的定义和实现方法。它支持 Socket、HTTP 隧道、虚拟机管道等传输方式。Netty 对 TCP、UDP 等数据传输做了抽象和封装，用户可以更聚焦在业务逻辑实现上，而不必关系底层数据传输的细节。\")]),t._v(\" \"),a(\"p\",[t._v(\"Netty 的模块设计具备较高的\"),a(\"strong\",[t._v(\"通用性和可扩展性\")]),t._v(\"，它不仅是一个优秀的网络框架，还可以作为网络编程的工具箱。Netty 的设计理念非常优雅，值得我们学习借鉴。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"netty-逻辑架构\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#netty-逻辑架构\"}},[t._v(\"#\")]),t._v(\" Netty 逻辑架构\")]),t._v(\" \"),a(\"p\",[t._v(\"下图是 Netty 的逻辑处理架构。Netty 的逻辑处理架构为典型网络分层架构设计，共分为网络通信层、事件调度层、服务编排层，每一层各司其职。图中包含了 Netty 每一层所用到的核心组件。我将为你介绍 Netty 的每个逻辑分层中的各个核心组件以及组件之间是如何协调运作的。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/Netty%20%e6%a0%b8%e5%bf%83%e5%8e%9f%e7%90%86%e5%89%96%e6%9e%90%e4%b8%8e%20RPC%20%e5%ae%9e%e8%b7%b5-%e5%ae%8c/assets/Ciqc1F-NO9KAUOtaAAE1S5uRlDE275.png\",alt:\"Drawing 1.png\"}})])])}),[],!1,null,null,null);e.default=s.exports}}]);","extractedComments":[]}