{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{820:function(v,_,l){\"use strict\";l.r(_);var i=l(6),t=Object(i.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[l(\"h2\",{attrs:{id:\"直击面试-linux\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#直击面试-linux\"}},[v._v(\"#\")]),v._v(\" 直击面试——Linux\")]),v._v(\" \"),l(\"h3\",{attrs:{id:\"说五个你常用的-linux-命令\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#说五个你常用的-linux-命令\"}},[v._v(\"#\")]),v._v(\" 说五个你常用的 linux 命令\")]),v._v(\" \"),l(\"h3\",{attrs:{id:\"生产环境服务器变慢-诊断思路和性能评估\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#生产环境服务器变慢-诊断思路和性能评估\"}},[v._v(\"#\")]),v._v(\" 生产环境服务器变慢，诊断思路和性能评估\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"整机 top\\n\"),l(\"ul\",[l(\"li\",[v._v(\"uptime 系统性能命令的精简版\")])])]),v._v(\" \"),l(\"li\",[v._v(\"CPU vmstat\\n\"),l(\"ul\",[l(\"li\",[v._v(\"查看 CPU (包括不限于)\\n\"),l(\"ul\",[l(\"li\",[l(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/00831rSTly1gdns2cvx5yj310g05kdgx.jpg\",alt:\"\"}})]),v._v(\" \"),l(\"li\",[l(\"code\",[v._v(\"vmstat -n 2 3\")])]),v._v(\" \"),l(\"li\",[v._v(\"一般 vmstat 工具的使用是通过两个数字参数来完成的，第一个参数是采样的时间间隔数，单位是秒，第二个参数是采样的次数\")]),v._v(\" \"),l(\"li\",[v._v(\"procs\\n\"),l(\"ul\",[l(\"li\",[v._v(\"r：运行和等待 CPU 时间片的进程数，原则上1 核的CPU 的运行队列不要超过 2，整个系统的运行队列不能超过总核数的2 被，否则表示系统压力过大\")]),v._v(\" \"),l(\"li\",[v._v(\"b：等待资源的进程数，比如正在等待磁盘I/O，网络 I/O等\")])])]),v._v(\" \"),l(\"li\",[v._v(\"cpu\\n\"),l(\"ul\",[l(\"li\",[v._v(\"us：用户进程消耗 CPU 时间百分比，us 值高，用户进程消耗CPU 时间多，如果长期大于 50%，优化程序\")]),v._v(\" \"),l(\"li\",[v._v(\"sy：内核进程消耗的 CPU 时间百分比\")]),v._v(\" \"),l(\"li\",[v._v(\"id：处于空闲的 CPU 百分比\")]),v._v(\" \"),l(\"li\",[v._v(\"wa：系统等待IO 的 CPU 时间百分比\")]),v._v(\" \"),l(\"li\",[v._v(\"st：来自于一个虚拟机偷取的 CPU 时间百分比\")])])])])]),v._v(\" \"),l(\"li\",[v._v(\"查看额外\\n\"),l(\"ul\",[l(\"li\",[v._v(\"查看所有CPU 核的信息：\"),l(\"code\",[v._v(\"mpstat -P ALL 2\")])]),v._v(\" \"),l(\"li\",[v._v(\"每个进程使用 CPU 的用量分解信息：pidstat -u 1 -p 进程编号\")])])])])]),v._v(\" \"),l(\"li\",[v._v(\"内存 free\\n\"),l(\"ul\",[l(\"li\",[v._v(\"应用程序可用内存数\\n\"),l(\"ul\",[l(\"li\",[v._v(\"free\")]),v._v(\" \"),l(\"li\",[v._v(\"free -g\")]),v._v(\" \"),l(\"li\",[v._v(\"free -m\")]),v._v(\" \"),l(\"li\",[v._v(\"应用程序可用内存/系统物理内存 > 70% 内存充足\")]),v._v(\" \"),l(\"li\",[v._v(\"应用程序可用内存/系统物理内存  <20% 内存不足，不要增加内存\")]),v._v(\" \"),l(\"li\",[v._v(\"20% < 应用程序可用内存/系统物理内存 < 70%，基本够用\")])])]),v._v(\" \"),l(\"li\",[v._v(\"查看额外\\n\"),l(\"ul\",[l(\"li\",[v._v(\"pidstat -p 进程号 -r 采样间隔秒数\")])])])])]),v._v(\" \"),l(\"li\",[v._v(\"硬盘 df\\n\"),l(\"ul\",[l(\"li\",[v._v(\"查看磁盘剩余空间 df -h\")])])]),v._v(\" \"),l(\"li\",[v._v(\"磁盘 IO  iostat\\n\"),l(\"ul\",[l(\"li\",[v._v(\"磁盘 I/O 性能评估  \"),l(\"code\",[v._v(\"iostat -xdk 2 3\")])]),v._v(\" \"),l(\"li\",[v._v(\"查看额外：pidstat -d 采样间隔秒数 -p 进程号\")])])]),v._v(\" \"),l(\"li\",[v._v(\"网络 IO ifstat\\n\"),l(\"ul\",[l(\"li\",[l(\"code\",[v._v(\"ifstat 1\")])])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"假如生产环境出现-cpu占用过高-请谈谈你的分析思路和定位\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#假如生产环境出现-cpu占用过高-请谈谈你的分析思路和定位\"}},[v._v(\"#\")]),v._v(\" 假如生产环境出现 CPU占用过高，请谈谈你的分析思路和定位\")]),v._v(\" \"),l(\"ol\",[l(\"li\",[v._v(\"先用top 命令找出 CPU 占比最高的\")]),v._v(\" \"),l(\"li\",[v._v(\"ps -ef 或者 jps 进一步定位，得知是一个怎样的后台程序有问题\")]),v._v(\" \"),l(\"li\",[v._v(\"定位到具体线程或者代码\\n\"),l(\"ul\",[l(\"li\",[l(\"code\",[v._v(\"ps -mp 进程ID -o THREAD,tid,time\")])])])]),v._v(\" \"),l(\"li\",[v._v(\"将需要的线程 ID 转换为 16 进制格式（英文小写格式）\\n\"),l(\"ul\",[l(\"li\",[l(\"code\",[v._v('printf \"%x\\\\n\" 有问题的线程 ID')])])])]),v._v(\" \"),l(\"li\",[v._v(\"jstack 进程 ID | grep tid(上一步获取到的16 进制线程 id小写英文) -A60\")])]),v._v(\" \"),l(\"ul\",[l(\"li\",[l(\"p\",[v._v(\"Linux的fork指令对数据的拷贝是马上就拷贝的吗？\")])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"linux看网络状况用什么，看日志用什么？\")])]),v._v(\" \"),l(\"li\",[l(\"p\",[l(\"a\",{attrs:{href:\"#interviewfaq-linux\"}},[v._v(\"InterviewFAQ-Linux\")])]),v._v(\" \"),l(\"ul\",[l(\"li\",[l(\"a\",{attrs:{href:\"#linux\"}},[v._v(\"Linux\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[l(\"a\",{attrs:{href:\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"}},[v._v(\"常用命令\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#raid%E9%98%B5%E5%88%97\"}},[v._v(\"Raid阵列\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98%E5%8F%82%E6%95%B0\"}},[v._v(\"系统调优参数\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3\"}},[v._v(\"常见服务占用端口\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\"}},[v._v(\"文件系统\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B\"}},[v._v(\"开机启动过程\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#swap\"}},[v._v(\"Swap\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#iptables\"}},[v._v(\"Iptables\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#shell%E6%93%8D%E4%BD%9C\"}},[v._v(\"Shell操作\")])])])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"}},[v._v(\"操作系统\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[l(\"a\",{attrs:{href:\"#io%E6%A8%A1%E5%9E%8B\"}},[v._v(\"IO模型\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B\"}},[v._v(\"进程，线程，协程\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86\"}},[v._v(\"内存管理\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#linux%E4%B8%8Ewindows\"}},[v._v(\"Linux与windows\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#%E5%86%85%E6%A0%B8%E6%80%81%E5%92%8C%E7%94%A8%E6%88%B7%E6%80%81\"}},[v._v(\"内核态和用户态\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1\"}},[v._v(\"进程间通信\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#%E6%AD%BB%E9%94%81\"}},[v._v(\"死锁\")])]),v._v(\" \"),l(\"li\",[l(\"a\",{attrs:{href:\"#%E5%8F%98%E9%87%8F%E5%AD%98%E5%82%A8%E5%8C%BA%E5%9F%9F\"}},[v._v(\"变量存储区域\")])])])])])])]),v._v(\" \"),l(\"h2\",{attrs:{id:\"linux\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#linux\"}},[v._v(\"#\")]),v._v(\" Linux\")]),v._v(\" \"),l(\"h3\",{attrs:{id:\"常用命令\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用命令\"}},[v._v(\"#\")]),v._v(\" 常用命令\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"编辑相关\\n\"),l(\"ul\",[l(\"li\",[v._v(\"awk\\n\"),l(\"ul\",[l(\"li\",[v._v(\"NF：字段总数\")]),v._v(\" \"),l(\"li\",[v._v(\"NR：第几行数据\")]),v._v(\" \"),l(\"li\",[v._v(\"FS：分隔字符\")])])]),v._v(\" \"),l(\"li\",[v._v(\"sed\\n\"),l(\"ul\",[l(\"li\",[v._v(\"-n\")]),v._v(\" \"),l(\"li\",[v._v(\"-i 直接修改\")]),v._v(\" \"),l(\"li\",[v._v(\"4a：在第四行后添加\")]),v._v(\" \"),l(\"li\",[v._v(\"4i：在第四行前插入\")]),v._v(\" \"),l(\"li\",[v._v(\"1,5c sting：用sting替换1到5行的内容\")]),v._v(\" \"),l(\"li\",[v._v(\"s/要被替换的字符串/新的字符串/g\")])])]),v._v(\" \"),l(\"li\",[v._v(\"sort\\n\"),l(\"ul\",[l(\"li\",[v._v(\"-t\")]),v._v(\" \"),l(\"li\",[v._v(\"-nr sort |uniq -c |sort -nr\")])])]),v._v(\" \"),l(\"li\",[v._v(\"tr\\n\"),l(\"ul\",[l(\"li\",[v._v(\"-d：删除\")]),v._v(\" \"),l(\"li\",[v._v(\"[a-z] [A Z]：替换\")])])])])]),v._v(\" \"),l(\"li\",[v._v(\"查看负载相关\\n\"),l(\"ul\",[l(\"li\",[v._v(\"top\\n\"),l(\"ul\",[l(\"li\",[v._v(\"load average cpu\\n里面的几个数字代表什么意思，怎么衡量，为什么\\n\"),l(\"ul\",[l(\"li\",[v._v(\"load average 50 算高还是低？怎么计算的？\")]),v._v(\" \"),l(\"li\",[v._v(\"系统在1，5，15分钟的平均工作负载，进程队列中的平均进程数量。\")]),v._v(\" \"),l(\"li\",[v._v(\"一般不能大于系统逻辑CPU的个数\")]),v._v(\" \"),l(\"li\",[v._v(\"/proc/loadavg\")])])]),v._v(\" \"),l(\"li\",[v._v(\"关键参数\\n\"),l(\"ul\",[l(\"li\",[v._v(\"Task：僵尸进程的数量\")]),v._v(\" \"),l(\"li\",[v._v(\"CPU：%wa IOwait\")]),v._v(\" \"),l(\"li\",[v._v(\"Mem：\")]),v._v(\" \"),l(\"li\",[v._v(\"Swap：要尽可能的少用\")])])])])]),v._v(\" \"),l(\"li\",[v._v(\"uptime\")]),v._v(\" \"),l(\"li\",[v._v(\"free：读取自文件：/proc/meminfo\\n\"),l(\"ul\",[l(\"li\",[v._v(\"buffer存放要写回到磁盘的数据\")]),v._v(\" \"),l(\"li\",[v._v(\"cache存放从磁盘上读出的数据\")]),v._v(\" \"),l(\"li\",[v._v(\"-buffers/cache，表示一个应用程序认为系统被用掉多少内存；被程序实实在在占用的内存\")]),v._v(\" \"),l(\"li\",[v._v(\"+buffers/cache，表示一个应用程序认为系统还有多少内存；可用的内存数。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"vmstat：动态的了解系统资源运行\\n\"),l(\"ul\",[l(\"li\",[v._v(\"-d：磁盘\")]),v._v(\" \"),l(\"li\",[v._v(\"r：等待运行的进程数，r<5表示状态好\")]),v._v(\" \"),l(\"li\",[v._v(\"b：处于非中断睡眠状态的进程数，b≈0表示状态好\")]),v._v(\" \"),l(\"li\",[v._v(\"id：CPU闲置时间\")]),v._v(\" \"),l(\"li\",[v._v(\"如果r经常大于3或4，且id经常小于50，表示CPU负荷很重\")])])]),v._v(\" \"),l(\"li\",[v._v(\"ps\\n\"),l(\"ul\",[l(\"li\",[v._v(\"aux\")]),v._v(\" \"),l(\"li\",[v._v(\"-l\")])])]),v._v(\" \"),l(\"li\",[v._v(\"lsof：列出被进程所打开的文件名\")]),v._v(\" \"),l(\"li\",[v._v(\"pwd\\n\"),l(\"ul\",[l(\"li\",[v._v('首先获取当前目录的i节点编号，但是并不能知道当前目录的名称，我们切换到其的父目录，在里面寻找当前i节点编号对应的文件名即可。终止条件是\".\"和\"..\"指向同一个i节点，我们可以以此判断是否发到达了根目录')])])]),v._v(\" \"),l(\"li\",[v._v(\"pgrep\")])])]),v._v(\" \"),l(\"li\",[v._v(\"查找\\n\"),l(\"ul\",[l(\"li\",[v._v(\"grep\\n\"),l(\"ul\",[l(\"li\",[v._v(\"-n\")]),v._v(\" \"),l(\"li\",[v._v(\"-v\")]),v._v(\" \"),l(\"li\",[v._v(\"-A\")]),v._v(\" \"),l(\"li\",[v._v(\"-B\")])])]),v._v(\" \"),l(\"li\",[v._v(\"find\\n\"),l(\"ul\",[l(\"li\",[v._v(\"时间：\\n\"),l(\"ul\",[l(\"li\",[v._v(\"4：4天前的那一天\")]),v._v(\" \"),l(\"li\",[v._v(\"+4：大于等于5天之前\")]),v._v(\" \"),l(\"li\",[v._v(\"-4：小于等于4天之内\")])])]),v._v(\" \"),l(\"li\",[v._v(\"-exec 命令 { } ;\")])])])])]),v._v(\" \"),l(\"li\",[v._v(\"磁盘\\n\"),l(\"ul\",[l(\"li\",[v._v(\"du\\n\"),l(\"ul\",[l(\"li\",[v._v(\"-sh /\")]),v._v(\" \"),l(\"li\",[v._v(\"du -cks * | sort -rn | head -n 10\")]),v._v(\" \"),l(\"li\",[v._v(\"评估目录所占容量，通过将指定文件系统中所有的目录、符号链接和文件使用的块数累加得到该文件系统使用的总块数\")]),v._v(\" \"),l(\"li\",[v._v(\"du命令是用户级的程序，它不考虑Meta\\nData，而df命令则查看文件系统的磁盘分配图并考虑Meta Data。\")]),v._v(\" \"),l(\"li\",[v._v(\"du以文件名、目录名为依据计算空间使用的，而df是以硬盘块使用情况来计算空间使用的。\")]),v._v(\" \"),l(\"li\",[v._v(\"-sm 以M为单位列出文件容量\")])])]),v._v(\" \"),l(\"li\",[v._v(\"df\\n\"),l(\"ul\",[l(\"li\",[v._v(\"列出所有文件系统的整体磁盘使用量，通过读取块位图获取\")]),v._v(\" \"),l(\"li\",[v._v(\"dumpe2fs\")])])])])]),v._v(\" \"),l(\"li\",[v._v(\"网络配置命令\\n\"),l(\"ul\",[l(\"li\",[v._v(\"netstat\\n\"),l(\"ul\",[l(\"li\",[v._v(\"-tlnp\")])])]),v._v(\" \"),l(\"li\",[v._v(\"ss\")]),v._v(\" \"),l(\"li\",[v._v(\"ping\")]),v._v(\" \"),l(\"li\",[v._v(\"traceroute\")]),v._v(\" \"),l(\"li\",[v._v(\"tcpdump\\n\"),l(\"ul\",[l(\"li\",[v._v(\"tcpdump ip host\")]),v._v(\" \"),l(\"li\",[v._v(\"tcpdump tcp port 25 and host 210.27.48.1\")])])]),v._v(\" \"),l(\"li\",[v._v(\"nslookup\")]),v._v(\" \"),l(\"li\",[v._v(\"dig\")]),v._v(\" \"),l(\"li\",[v._v(\"nmap\\n\"),l(\"ul\",[l(\"li\",[v._v(\"tcp端口扫描：-sT、-sP\")]),v._v(\" \"),l(\"li\",[v._v(\"TCP SYN端口扫描：-sS\\n\"),l(\"ul\",[l(\"li\",[v._v(\"nmap -sS 192.168.137.10 -255 -p 20,21,53-110,30000 --v\")])])]),v._v(\" \"),l(\"li\",[v._v(\"UDP端口扫描：-sU\")]),v._v(\" \"),l(\"li\",[v._v(\"TCP ACK扫描：-sA\")])])])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"raid阵列\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#raid阵列\"}},[v._v(\"#\")]),v._v(\" Raid阵列\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"RAID 的各个级别及区别\\n\"),l(\"ul\",[l(\"li\",[v._v(\"RAID0：数据切片，分盘存储，性能最佳，风险最高\")]),v._v(\" \"),l(\"li\",[v._v(\"RAID1：镜像模式，完整备份，写性能差，利用率低\")]),v._v(\" \"),l(\"li\",[v._v(\"RAID10/RAID01\")]),v._v(\" \"),l(\"li\",[v._v(\"RAID5：循环写入，同位检查码，性能与备份的均衡考虑\")]),v._v(\" \"),l(\"li\",[v._v(\"RAID6：牺牲两块磁盘的容量做同位检查码\")])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"系统调优参数\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#系统调优参数\"}},[v._v(\"#\")]),v._v(\" 系统调优参数\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"/etc/sysctl.conf\\n这个文件有没有改过？列举一些常见的kernel参数和作用。\\n\"),l(\"ul\",[l(\"li\",[v._v(\"time_wait相关\\n\"),l(\"ul\",[l(\"li\",[v._v(\"net.ipv4.tcp_tw_reuse =\\n1：是否允许新的TCP连接重新应用处于time_wait状态的socket\")]),v._v(\" \"),l(\"li\",[v._v(\"net.ipv4.tcp_tw_recycle = 1：加速time_wait socket回收\")]),v._v(\" \"),l(\"li\",[v._v(\"net.ipv4.tcp_max_tw_buckets：time_wait套接字的最大数量，把time_wait所占用内存控制在一定范围\")])])]),v._v(\" \"),l(\"li\",[v._v(\"syn攻击相关\\n\"),l(\"ul\",[l(\"li\",[v._v(\"net.inet.tcp.syncookies =\\n1：开启syncookies功能，防止dos攻击，syn攻击\")]),v._v(\" \"),l(\"li\",[v._v(\"net.ipv4.tcp_synack_retries =\\n2：内核放弃连接之前发送SYN+ACK包的数量\")]),v._v(\" \"),l(\"li\",[v._v(\"net.ipv4.tcp_syn_retries =\\n2：新连接，内核放弃连接之前发送SYN包的数量\")]),v._v(\" \"),l(\"li\",[v._v(\"net.ipv4.tcp_max_syn_backlog = 65536：表示SYN队列的长度\")])])]),v._v(\" \"),l(\"li\",[v._v(\"缓冲区\\n\"),l(\"ul\",[l(\"li\",[v._v(\"net.core.rmem_default：接收套接字缓冲区大小缺省值\")]),v._v(\" \"),l(\"li\",[v._v(\"net.core.wmem_default：发送套接字缓冲区大小缺省值\")]),v._v(\" \"),l(\"li\",[v._v(\"net.core.rmem_max：最大TCP接收缓冲区大小\")]),v._v(\" \"),l(\"li\",[v._v(\"net.core.wmem_max：最大TCP发送缓冲区大小\")])])]),v._v(\" \"),l(\"li\",[v._v(\"kern.ipc.somaxconn ：并发连接数\")]),v._v(\" \"),l(\"li\",[v._v(\"net.core.netdev_max_backlog = 32768：进入包的最大设备队列\")])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"常见服务占用端口\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常见服务占用端口\"}},[v._v(\"#\")]),v._v(\" 常见服务占用端口\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"80 8080 443\")]),v._v(\" \"),l(\"li\",[v._v(\"20 21 22 23 25 53\")]),v._v(\" \"),l(\"li\",[v._v(\"135（RPC）137（NetBIOS/UDP） 138（UDP） 139 （samba）\")]),v._v(\" \"),l(\"li\",[v._v(\"161 SNMP\")]),v._v(\" \"),l(\"li\",[v._v(\"1080 Socket代理\")]),v._v(\" \"),l(\"li\",[v._v(\"3306 11211 8080 jboss tomcat 50170\")])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"文件系统\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文件系统\"}},[v._v(\"#\")]),v._v(\" 文件系统\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[l(\"p\",[v._v(\"（ext4）性能 安全性\")])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"启动扇区 块组 超级块 inode表格 block 块对照表(Bitmap) inode对照表\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"超级块\\n\"),l(\"ul\",[l(\"li\",[v._v(\"记录整个文件系统的整体信息，包括inode（记录文件的权限与属性）与block（记录数据）总量、使用量、剩余量\")])])]),v._v(\" \"),l(\"li\",[v._v(\"inode表格 = inode + 存储block号码的block （ls -l命令）\")]),v._v(\" \"),l(\"li\",[v._v(\"inode本身不记录文件名，文件名的记录在目录的block中\")]),v._v(\" \"),l(\"li\",[v._v(\"创建新的目录时，新目录的链接数是2（产生了/.），上层目录的链接数会增加1（产生了/..）\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"读写文件会遇到的问题\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"文件数据离散：文件很大、经常变动、无法写在连续的块中、机械臂移动大、\\n\"),l(\"ul\",[l(\"li\",[v._v(\"复制出来、格式化、复制回去\")])])]),v._v(\" \"),l(\"li\",[v._v(\"创建文件流程\\n\"),l(\"ul\",[l(\"li\",[v._v(\"查询目录权限\")]),v._v(\" \"),l(\"li\",[v._v(\"在日志记录块中记录准备写入的信息\")]),v._v(\" \"),l(\"li\",[v._v(\"查询inode bitmap，向inode中写入权限和属性\")]),v._v(\" \"),l(\"li\",[v._v(\"查询block bitmap，向block写入数据\")]),v._v(\" \"),l(\"li\",[v._v(\"更新inode指向block\")]),v._v(\" \"),l(\"li\",[v._v(\"更新inode bitmap和block bitmap 的状态，更新superblock内容\")]),v._v(\" \"),l(\"li\",[v._v(\"在日志记录块中完成文件记录\")])])]),v._v(\" \"),l(\"li\",[v._v(\"读文件失败\\n\"),l(\"ul\",[l(\"li\",[v._v(\"块数据损坏\")]),v._v(\" \"),l(\"li\",[v._v(\"inode损坏：记录数据块号码的块损坏\")])])]),v._v(\" \"),l(\"li\",[v._v(\"写文件失败\\n\"),l(\"ul\",[l(\"li\",[v._v(\"文件描述符不够\")]),v._v(\" \"),l(\"li\",[v._v(\"存储空间不够了（块不够、inode不够）\")])])])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"hdfs的一个block多大，为什么128M？\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"不能远小于128M：减少硬盘寻道时间、减少Namenode内存消耗\")]),v._v(\" \"),l(\"li\",[v._v(\"不能远大于128M：\\n\"),l(\"ul\",[l(\"li\",[v._v(\"Map崩溃问题 （数据块大，重新加载时间长）\")]),v._v(\" \"),l(\"li\",[v._v(\"预设时间间隔问题（从数据块的角度大概估算，数据块越大，时间越长）\")]),v._v(\" \"),l(\"li\",[v._v(\"问题分解问题：数据量大小和问题解决的复杂度成线性关系\")]),v._v(\" \"),l(\"li\",[v._v(\"约束map输出：map之后的数据需要排序后再执行reduce，大文件不利于归并排序的思想\")])])])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"ext4文件系统的block多大?\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"4k\")]),v._v(\" \"),l(\"li\",[v._v(\"HDFS的块比磁盘块大，其目的是为了最小化寻址开销\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"索引式文件系统：ext\")])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"非索引式文件系统：FAT 碎片整理\")])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"cp/mv/rm的区别（实现）\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"cp\\n\"),l(\"ul\",[l(\"li\",[v._v(\"-a（pdr：连同文件属性一起、链接文件属性、递归）\")]),v._v(\" \"),l(\"li\",[v._v(\"-u（新才复制）\")]),v._v(\" \"),l(\"li\",[v._v(\"-l -s （复制为链接）\")]),v._v(\" \"),l(\"li\",[v._v(\"-d\\n复制链接文件时，默认复制的是源文件，除非加-d参数，才会复制链接文件\")])])]),v._v(\" \"),l(\"li\",[v._v(\"当目标文件存在时，cp\\n命令并不是先删除已经存在的目标文件，而是将原目标文件内容清空后再写入。\")]),v._v(\" \"),l(\"li\",[v._v(\"mv\\n的主要功能就是检查初始文件和目标文件是否存在及是否有访问权限，之后执行\\nrename 系统调用，因而，当目标文件存在时，mv 的行为由 rename()\\n系统调用决定，即类似于删除文件后再重建一个同名文件。\")]),v._v(\" \"),l(\"li\",[v._v(\"删除文件名是指在原目录下不再含有此文件名，并不一定删除磁盘上文件的内容。只有在文件的链接数为1，并且没有进程打开此文件的时候，unlink()\\n才会真正删除文件内容。\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"软硬连接（inode这块，ln / ln -s）\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"硬链接：一个inode节点对用不同的文件名，\\n\"),l(\"ul\",[l(\"li\",[v._v(\"不创建新的inode，每增加一个硬链接，inode节点链接数加一\")]),v._v(\" \"),l(\"li\",[v._v(\"rm\\n硬链接：删除的只是文件名，对应的数据块只有在inode节点链接数减少为0的时候才会被系统回收。\")]),v._v(\" \"),l(\"li\",[v._v(\"不能对目录创建硬链接，因为文件系统不能存在链接环，否则会导致文件便利操作的混乱（du，pwd等命令的运作原理就是基于文件硬链接）\")]),v._v(\" \"),l(\"li\",[v._v(\"不能跨文件系统\")]),v._v(\" \"),l(\"li\",[v._v(\"不能对不存在的文件创建硬链接\")])])]),v._v(\" \"),l(\"li\",[v._v(\"软链接：如果目标路径名较短则直接保存在inode中，如果较长则分配一个block存储\\n\"),l(\"ul\",[l(\"li\",[v._v(\"创建新的inode，指向的数据块存放着源文件的路径\")]),v._v(\" \"),l(\"li\",[v._v(\"删除源文件，软链接失效\")]),v._v(\" \"),l(\"li\",[v._v(\"可以对目录 创建软连接，遍历操作会忽略目录的软链接\")]),v._v(\" \"),l(\"li\",[v._v(\"可以跨文件系统\")]),v._v(\" \"),l(\"li\",[v._v(\"可以对不存在的文件创建软链接\")])])])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"开机启动过程\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#开机启动过程\"}},[v._v(\"#\")]),v._v(\" 开机启动过程\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"Mbr 与gpt的区别\")]),v._v(\" \"),l(\"li\",[v._v(\"BIOS、CMOS、MBR、Boot\\nLoader、Grub2、Kernel、/sbin/init、/etc/init/*.conf、/ect/inittab、/etc/rc.d/rc.sysinit、/etc/rc.d/rc.$runleave\")]),v._v(\" \"),l(\"li\",[v._v(\"双系统\\n\"),l(\"ul\",[l(\"li\",[v._v(\"多重引导：MBR、各分区的启动扇区boot sector\")])])])]),v._v(\" \"),l(\"p\",[v._v(\"###Shell常用脚本\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"从日志文件里面筛选出符合要求的ip或者其他信息\\n\"),l(\"ul\",[l(\"li\",[v._v(\"cat logname | sort | uniq -c | sort -nr | head -n 10\")])])]),v._v(\" \"),l(\"li\",[v._v(\"正则表达式匹配IP地址\\n\"),l(\"ul\",[l(\"li\",[v._v(\"[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1-3}\\\\.{1,3}\")]),v._v(\" \"),l(\"li\",[v._v(\"^((25[0-5]|2[0-4]\\\\d|[1]{1}\\\\d{1}\\\\d{1}|[1-9]{1}\\\\d{1}|\\\\d{1})(\"),l(\"mjx-container\",{staticClass:\"MathJax\",attrs:{jax:\"SVG\"}},[l(\"svg\",{staticStyle:{\"vertical-align\":\"-0.566ex\"},attrs:{xmlns:\"http://www.w3.org/2000/svg\",width:\"3.835ex\",height:\"2.262ex\",viewBox:\"0 -750 1695 1000\"}},[l(\"g\",{attrs:{stroke:\"currentColor\",fill:\"currentColor\",\"stroke-width\":\"0\",transform:\"matrix(1 0 0 -1 0 0)\"}},[l(\"g\",{attrs:{\"data-mml-node\":\"math\"}},[l(\"g\",{attrs:{\"data-mml-node\":\"mo\"}},[l(\"path\",{attrs:{\"data-c\":\"7C\",d:\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"}})]),l(\"g\",{attrs:{\"data-mml-node\":\"mo\",transform:\"translate(278, 0)\"}},[l(\"path\",{attrs:{\"data-c\":\"28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}})]),l(\"g\",{attrs:{\"data-mml-node\":\"mo\",transform:\"translate(667, 0)\"}},[l(\"path\",{attrs:{\"data-c\":\"3F\",d:\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\"}})]),l(\"g\",{attrs:{\"data-mml-node\":\"mo\",transform:\"translate(1139, 0)\"}},[l(\"path\",{attrs:{\"data-c\":\"21\",d:\"M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z\"}})]),l(\"g\",{attrs:{\"data-mml-node\":\"mspace\",transform:\"translate(1417, 0)\"}}),l(\"g\",{attrs:{\"data-mml-node\":\"mo\",transform:\"translate(1417, 0)\"}},[l(\"path\",{attrs:{\"data-c\":\"2E\",d:\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"}})])])])])]),v._v(\")\\\\.)){4}$\")],1),v._v(\" \"),l(\"li\",[v._v(\"((25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d))).){3}(25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d)))\")])])]),v._v(\" \"),l(\"li\",[v._v(\"20G大小的文件，内容都是IP，有重复的，如何找出这里面的top N ？\\n\"),l(\"ul\",[l(\"li\",[v._v(\"分表、哈希\")])])]),v._v(\" \"),l(\"li\",[v._v(\"统计nginx日志出现次数最多的ip\\n\"),l(\"ul\",[l(\"li\",[v._v(\"awk '{print $1}' urllogfile | sort | uniq -c | sort -nr -k1\\n| head -n 10\")])])]),v._v(\" \"),l(\"li\",[v._v(\"查看Web服务器（Nginx Apache）的并发请求数及其TCP连接状态\\n\"),l(\"ul\",[l(\"li\",[v._v(\"netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print\\na, S[a]}'\")])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"swap\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#swap\"}},[v._v(\"#\")]),v._v(\" Swap\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"swap分区是怎么设置的？\\n\"),l(\"ul\",[l(\"li\",[v._v(\"使用物理分区构建swap：fdisk分区（改分区类型ID）、mkswap格式化、swapon启动、free查看、\")]),v._v(\" \"),l(\"li\",[v._v(\"使用文件构建swap：dd、mkswap、swapon、free\")])])]),v._v(\" \"),l(\"li\",[v._v(\"为什么要有swap分区，工作原理是什么？为什么云服务器上的swap没有开启？\\n\"),l(\"ul\",[l(\"li\",[v._v(\"内存不足时，将内存中暂时不使用的程序与数据放置到swap中\")]),v._v(\" \"),l(\"li\",[v._v(\"服务器休眠时，运行中的程序状态会被记录到swap\")]),v._v(\" \"),l(\"li\",[v._v(\"某些程序运行时会利用swap的特性\")])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"iptables\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#iptables\"}},[v._v(\"#\")]),v._v(\" Iptables\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"filter\\n\"),l(\"ul\",[l(\"li\",[v._v(\"INPUT\")]),v._v(\" \"),l(\"li\",[v._v(\"OUTPUT\")]),v._v(\" \"),l(\"li\",[v._v(\"FORWARD\")])])]),v._v(\" \"),l(\"li\",[v._v(\"nat\\n\"),l(\"ul\",[l(\"li\",[v._v(\"PREROUTING\")]),v._v(\" \"),l(\"li\",[v._v(\"OUTPUT\")]),v._v(\" \"),l(\"li\",[v._v(\"POSTROUTING\")])])]),v._v(\" \"),l(\"li\",[v._v(\"mangle\\n\"),l(\"ul\",[l(\"li\",[v._v(\"PREROUTING\")]),v._v(\" \"),l(\"li\",[v._v(\"INPUT\")]),v._v(\" \"),l(\"li\",[v._v(\"FORWERD\")]),v._v(\" \"),l(\"li\",[v._v(\"POSTROUTING\")]),v._v(\" \"),l(\"li\",[v._v(\"OUTPUT\")])])]),v._v(\" \"),l(\"li\",[v._v(\"语法\\n\"),l(\"ul\",[l(\"li\",[v._v(\"iptables [-t 表名] <-A|I|D|R>链名 -i|o网卡名称 -p\\n协议类型 -s源IP --sport 源端口号 -d 目标IP地址 --dport\\n目标端口号 <-j 动作>\")]),v._v(\" \"),l(\"li\",[v._v(\"iptables -P INPUT DROP\")]),v._v(\" \"),l(\"li\",[v._v(\"iptables -A INPUT -m state --state NEW -j DROP\")]),v._v(\" \"),l(\"li\",[v._v(\"iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\")]),v._v(\" \"),l(\"li\",[v._v(\"iptables -A INPUT -p tcp -dport 445 -j ACCEPT\")]),v._v(\" \"),l(\"li\",[v._v(\"iptables -A INPUT -p tcp -m multiport --dports 22,80 -j ACCEPT\")]),v._v(\" \"),l(\"li\",[v._v(\"只允许某个IP上网\")])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"shell操作\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#shell操作\"}},[v._v(\"#\")]),v._v(\" Shell操作\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"find /data -type f -name \\\"*.txt\\\" | xargs sed -i 's/oldgirl/oldboy/g'\")]),v._v(\" \"),l(\"li\",[v._v(\"mkdir -p /data/oldboy && echo\")]),v._v(\" \"),l(\"li\",[v._v(\"算术运算\\n\"),l(\"ul\",[l(\"li\",[v._v(\"$[]\")]),v._v(\" \"),l(\"li\",[v._v(\"$(())\")]),v._v(\" \"),l(\"li\",[v._v(\"$(expr a + b) 或者 \"),l(\"code\",[v._v(\"expr a \\\\* b\")]),v._v(\" :注意运算符两边要空格，且乘法符号要转义\")])])]),v._v(\" \"),l(\"li\",[v._v(\"查看http的并发请求数与其TCP连接状态\\n\"),l(\"ul\",[l(\"li\",[v._v(\"netstat -tan | awk '/^tcp>/{split($5,ip,\\\"😊;count[ip[1]]++}END{for(i in count) print i,count[i]}'\")])])]),v._v(\" \"),l(\"li\",[v._v(\"awk '{print $1}' /var/log/nginx/access.log | sort | uniq -c | sort -nr -k1 | head -n 10\")]),v._v(\" \"),l(\"li\",[v._v(\"cat /dev/urandom | head -1 | md5sum | haed -c 5\")]),v._v(\" \"),l(\"li\",[v._v('watch -n 1 \"/sbin/ifconfig eth0 | grep bytes\"')]),v._v(\" \"),l(\"li\",[v._v(\"find /opt -size +15k -exec mv {} /tmp/ ;\")]),v._v(\" \"),l(\"li\",[v._v(\"sed和awk\\n\"),l(\"ul\",[l(\"li\",[v._v(\"如果文件是格式化的，即由分隔符分为多个域的，优先使用awk\")]),v._v(\" \"),l(\"li\",[v._v(\"awk适合按列（域）操作，sed适合按行操作\")]),v._v(\" \"),l(\"li\",[v._v(\"awk适合对文件的抽取整理，sed适合对文件的编辑。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"写一个脚本，该脚本能对标准的apache日志进行分析并统计出总的访问次数和每个访问ip的访问次数，按访问次数列出前5名？\")]),v._v(\" \"),l(\"li\",[v._v(\"显示/test下所有目录\\n\"),l(\"ul\",[l(\"li\",[v._v(\"ls -d */\")]),v._v(\" \"),l(\"li\",[v._v(\"find . -type d -maxdepth 1\")]),v._v(\" \"),l(\"li\",[v._v(\"ls -F | grep '/$'\")]),v._v(\" \"),l(\"li\",[v._v(\"ls -l | grep '^d' | awk '{print $9}'\")])])]),v._v(\" \"),l(\"li\",[v._v(\"将文件/etc/a 下中除了 b文件外的所有文件压缩打包放到/home/a下，名字为a.tar.gz\\n\"),l(\"ul\",[l(\"li\",[v._v(\"tar -exclude /etc/a/b -Pcvfz /home/a/a.tar.gz /etc/a\")])])]),v._v(\" \"),l(\"li\",[v._v(\"如何查看某进程打开的所有文件\\n\"),l(\"ul\",[l(\"li\",[v._v(\"lsof -p `ps -ef | grep crond | awk '{print $2}'`\")])])]),v._v(\" \"),l(\"li\",[v._v(\"获取网卡eth0的80端口的数据包信息，找出访问最高的\\n\"),l(\"ul\",[l(\"li\",[v._v('tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F \".\" \\'{print $1\".\"$2\".\"$3\".\"$4\".\"}\\'|sort|uniq -c|sort -nr|head -5')])])]),v._v(\" \"),l(\"li\",[v._v(\"查看/var/log目录下的文件数\\n\"),l(\"ul\",[l(\"li\",[v._v('ls /var/log -1R | grep \"-\" | wc -l')])])]),v._v(\" \"),l(\"li\",[v._v(\"查看Linux系统每个IP的连接数\\n\"),l(\"ul\",[l(\"li\",[v._v(\"netstat -n | awk '/^tcp/{print $5}' | awk -F\\\":\\\" ’{print $1}'  | sort | uniq -c | sort -rn\")])])]),v._v(\" \"),l(\"li\",[v._v(\"用iptables控制来自192.168.1.2主机的80端口请求\\n\"),l(\"ul\",[l(\"li\",[v._v(\"iptables -A INPUT -p tcp -s 192.168.1.2 -dport 80 -j ACCEPT\")])])]),v._v(\" \"),l(\"li\",[v._v(\"Linux如何挂载Windows下的共享目录\\n\"),l(\"ul\",[l(\"li\",[v._v(\"mount .cifs //IP地址/server /mnt/server -o user=username,password=123\")])])]),v._v(\" \"),l(\"li\",[v._v(\"生成32位随机密码\\n\"),l(\"ul\",[l(\"li\",[v._v(\"cat /dev/urandom | head -1 | md5sum | head -c 32\")])])]),v._v(\" \"),l(\"li\",[v._v(\"密码加密\\n\"),l(\"ul\",[l(\"li\",[v._v(\"echo abc | openssl md5\")]),v._v(\" \"),l(\"li\",[v._v(\"echo abc | openssl base64\")]),v._v(\" \"),l(\"li\",[v._v(\"echo abc | openssl sha\")])])]),v._v(\" \"),l(\"li\",[v._v(\"ps aux 中的VSZ代表什么意思，RSS代表什么意思？\\n\"),l(\"ul\",[l(\"li\",[v._v(\"VSZ：虚拟内存集，进程占用的虚拟内存空间\")]),v._v(\" \"),l(\"li\",[v._v(\"RSS：物理内存集，进程占用的实际物理内存空间\")])])]),v._v(\" \"),l(\"li\",[v._v(\"修改内核参数\\n\"),l(\"ul\",[l(\"li\",[v._v(\"vi /etc/sysctl.conf\")]),v._v(\" \"),l(\"li\",[v._v(\"sysctl -p\")])])]),v._v(\" \"),l(\"li\",[v._v(\"取0-39随机数\\n\"),l(\"ul\",[l(\"li\",[v._v(\"expr $[RANDOM%39] + 1 # 注意操作符两边的空格\")])])]),v._v(\" \"),l(\"li\",[v._v(\"限制apache每秒新建连接数为1，峰值为3\\n\"),l(\"ul\",[l(\"li\",[v._v(\"iptables -A INPUT -d 172.16.100.1 -p tcp -dport 80 -m limit -limit 1/second -j ACCEPT\")])])]),v._v(\" \"),l(\"li\",[v._v(\"怎么把脚本添加到系统服务里，即用service来调用？\\n\"),l(\"ul\",[l(\"li\",[v._v(\"脚本里添加\\n\"),l(\"ul\",[l(\"li\",[v._v(\"#!/bin/bsh\")]),v._v(\" \"),l(\"li\",[v._v(\"# chkconfig: 345 85 15\")]),v._v(\" \"),l(\"li\",[v._v(\"# description: httpd\")])])]),v._v(\" \"),l(\"li\",[v._v(\"chkconfig httpd -add\")]),v._v(\" \"),l(\"li\",[v._v(\"service start httpd\")])])]),v._v(\" \"),l(\"li\",[v._v(\"按修改时间排序显示目录中的文件\\n\"),l(\"ul\",[l(\"li\",[v._v(\"ls -lrt /etc\")])])]),v._v(\" \"),l(\"li\",[v._v(\"打印文件的权限值\\n\"),l(\"ul\",[l(\"li\",[v._v(\"stat -c %a /etc/inittab\")])])]),v._v(\" \"),l(\"li\",[v._v(\"查看 ARP 缓存记录的命令是?\\n\"),l(\"ul\",[l(\"li\",[v._v(\"“arp –a”\")])])]),v._v(\" \"),l(\"li\",[v._v(\"软件工具的原则\\n\"),l(\"ul\",[l(\"li\",[v._v(\"一次做好一件事\")]),v._v(\" \"),l(\"li\",[v._v(\"处理文本行，不要处理二进制数据\")]),v._v(\" \"),l(\"li\",[v._v(\"使用正则表达式\")]),v._v(\" \"),l(\"li\",[v._v(\"默认使用标准输入、输出\")]),v._v(\" \"),l(\"li\",[v._v(\"避免喋喋不休\")]),v._v(\" \"),l(\"li\",[v._v(\"输出格式必须与可接受的输出格式一致\")]),v._v(\" \"),l(\"li\",[v._v(\"让工具去做困难的部分\")]),v._v(\" \"),l(\"li\",[v._v(\"构建特定工具前，先想想\")])])]),v._v(\" \"),l(\"li\",[v._v(\"获取密码\\n\"),l(\"ul\",[l(\"li\",[v._v('printf \"Enter new password:\"')]),v._v(\" \"),l(\"li\",[v._v(\"stty -echo\")]),v._v(\" \"),l(\"li\",[v._v(\"read pass < /dev/tty\")]),v._v(\" \"),l(\"li\",[v._v('printf \"Enter again:\"')]),v._v(\" \"),l(\"li\",[v._v(\"read pass2 < /dev/tty\")]),v._v(\" \"),l(\"li\",[v._v(\"stty echo\")])])]),v._v(\" \"),l(\"li\",[v._v(\"在程序中执行跟踪：\\n\"),l(\"ul\",[l(\"li\",[v._v(\"set -x：打开跟踪功能\")]),v._v(\" \"),l(\"li\",[v._v(\"set +x：关闭跟踪功能\")])])]),v._v(\" \"),l(\"li\",[v._v(\"为/home/qiuye目录结构建立一份副本在/home/qy下\\n\"),l(\"ul\",[l(\"li\",[v._v(\"find /home/qiuye -type -d -print | sed 's;/home/qiuye/;/home/qy/;' | sed 's/^/mkdir /' | sh -x\")])])]),v._v(\" \"),l(\"li\",[v._v(\"sed 's/Tony/Camus/2'：只替换第二次匹配到的\")]),v._v(\" \"),l(\"li\",[v._v(\"单词频率过滤器\\n\"),l(\"ul\",[l(\"li\",[v._v(\"tr -cs A-Za-z' '\\\\n' | tr A-Z a-z | sort | uniq -c | sort -k1,1nr -k2 | head 25\")])])]),v._v(\" \"),l(\"li\",[v._v(\"tcpdump tcp port 80 -s 0 -w net_stat.pcap\")])]),v._v(\" \"),l(\"h2\",{attrs:{id:\"操作系统\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#操作系统\"}},[v._v(\"#\")]),v._v(\" 操作系统\")]),v._v(\" \"),l(\"h3\",{attrs:{id:\"io模型\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#io模型\"}},[v._v(\"#\")]),v._v(\" IO模型\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[l(\"p\",[v._v(\"IO多路复用：I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"select：\\n\"),l(\"ul\",[l(\"li\",[v._v(\"调用者将需要见监控的IO句柄放入一个数组，将这个数组传递给select调用，并设定监控何种事件（一般是可读或可写）；\")]),v._v(\" \"),l(\"li\",[v._v(\"这时select会阻塞调用进程；\")]),v._v(\" \"),l(\"li\",[v._v(\"当有IO事件发生时，select就在数组中给发生事件的那些IO句柄做一个标记后返回；\")]),v._v(\" \"),l(\"li\",[v._v(\"之后，调用者便轮询这个数组，发现被打入标记的便进行相应处理，并去掉这个标记以备下次使用。\")]),v._v(\" \"),l(\"li\",[v._v(\"这样，对于服务器来说，一个进程或线程就可以处理很多客户端的读写请求了。\")]),v._v(\" \"),l(\"li\",[v._v(\"poll解决了传递给select的IO句柄最多不能超过1024个\")])])]),v._v(\" \"),l(\"li\",[v._v(\"epoll\\n\"),l(\"ul\",[l(\"li\",[v._v(\"优点\\n\"),l(\"ul\",[l(\"li\",[v._v(\"理论上没有IO句柄数量上的限制\")]),v._v(\" \"),l(\"li\",[v._v(\"IO效率与IO句柄数量没有多大关系，因为每次返回的，只是一个具体事件的列表。\")]),v._v(\" \"),l(\"li\",[v._v(\"epoll使用mmap来加速内核与用户空间的消息传递。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"工作方式\\n\"),l(\"ul\",[l(\"li\",[v._v(\"事件触发（ET）\\n\"),l(\"ul\",[l(\"li\",[v._v(\"事件发生后，只会产生一次通知。\")]),v._v(\" \"),l(\"li\",[v._v(\"缓冲区读取数据丢失问题：解决方法是反复读取缓冲区，直到返回错误，\")]),v._v(\" \"),l(\"li\",[v._v(\"减少了每次需要返回的IO句柄数量，在并发量极多的时候能够加快epoll_wait的处理。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"条件触发（LT）\\n\"),l(\"ul\",[l(\"li\",[v._v(\"只要其监控的IO句柄具备调用者所要捕获的条件，一般是可读或者可写，就会通知给调用者。如果调用者不理会这个通知，他将一直通知下去，知道这个状态发生变化。\")]),v._v(\" \"),l(\"li\",[v._v(\"当采用多进程模式编写服务器软件时，根据系统任务调度特性，采用LT模式可以使得所有连接均匀的分布于每个用于处理网络请求的进程。\")])])])])])])])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"Select、poll 和epoll的区别\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[l(\"p\",[v._v(\"基本上select有3个缺点:\")]),v._v(\" \"),l(\"ol\",[l(\"li\",[v._v(\"连接数受限\")]),v._v(\" \"),l(\"li\",[v._v(\"查找配对速度慢\")]),v._v(\" \"),l(\"li\",[v._v(\"数据由内核拷贝到用户态\")])]),v._v(\" \"),l(\"p\",[v._v(\"poll改善了第一个缺点，epoll改了三个缺点。\")])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"select，poll实现需要自己不断轮询所有文件描述符集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。\")])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"epoll需要调用epoll_wait不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，但是它在设备就绪时，调用回调函数，把就绪文件描述符放入就绪链表中，并唤醒在epoll_wait中进入睡眠的进程。\")])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v('虽然都要睡眠和交替，但是select和poll在\"醒着\"的时候要遍历整个fd集合，而epoll在\"醒着\"的时候只要判断一下就绪链表是否为空就行了，这节省了大量的CPU时间。这就是回调机制带来的性能提升。')])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"select，poll每次调用都要把文件描述符集合从用户态往内核态拷贝一次，并且要把current往设备等待队列中挂一次，而epoll只要一次拷贝，且只需要把current往等待队列上挂一次（在epoll_wait的开始，注意这里的等待队列并不是设备等待队列，只是一个epoll内部定义的等待队列）。这也能节省不少的开销。\")])])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"同步、异步、阻塞、非阻塞的区别\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"同步IO：select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。\")]),v._v(\" \"),l(\"li\",[v._v(\"异步IO：无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。\\n\"),l(\"ul\",[l(\"li\",[v._v(\"Nginx通过异步IO来解决主线程阻塞的问题\")]),v._v(\" \"),l(\"li\",[v._v(\"异步IO在处理大量网络请求时，相较于IO多路复用需要更多的系统资源，因此更适用于量少但对性能要求较高的文件处理和网络传输。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"非阻塞式IO：需要请求者主动轮询不断发IO请求直到返回正确。IO多路复用同非阻塞式IO本质是一样的，不过利用新的select、poll、epoll等系统调用，由操作系统来负责轮询操作。\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"两种方式可以提高服务器的响应速度和并发：\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"一种是异步IO或epool的方式\")]),v._v(\" \"),l(\"li\",[v._v(\"另一种是多线程或多进程方式\\n\"),l(\"ul\",[l(\"li\",[v._v(\"利用线程池和增加线程数量能很大程度地提高系统地响应速度\")]),v._v(\" \"),l(\"li\",[v._v(\"但连接数很多的时候，资源消耗也会成为瓶颈\")])])])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"进程-线程-协程\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#进程-线程-协程\"}},[v._v(\"#\")]),v._v(\" 进程，线程，协程\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[l(\"p\",[v._v(\"进程\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。\")]),v._v(\" \"),l(\"li\",[v._v(\"一个进程接到来自客户端新的请求时，可以通过\"),l(\"code\",[v._v(\"fork()\")]),v._v(\"复制出一个子进程让其来处理，父进程只需负责监控请求的到来，这样就能做到并发处理。根据写时拷贝（copy\\non\\nwrite）的机制，分为两个进程继续运行后面的代码。fork分别在父进程和子进程中返回，在子进程返回的值永远是0，在父进程返回的是子进程的pid。\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"线程\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"线程是程序执行时的最小单位，它是进程的一个执行流，是CPU调度和分派的基本单位。一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"线程和进程各自有什么区别和优劣呢？\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"进程是资源分配的最小单位，线程是程序执行的最小单位。\")]),v._v(\" \"),l(\"li\",[v._v(\"进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。\")]),v._v(\" \"),l(\"li\",[v._v(\"线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。\")]),v._v(\" \"),l(\"li\",[v._v(\"但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。\")]),v._v(\" \"),l(\"li\",[v._v(\"进程有严格的父进程和子进程的概念，而且它们之间有很多的联系，父进程可以很容易地了解到子进程出现问题退出了，子进程退出的行为很多时候可以不用交给程序来处理，操作系统就可以做的很好，充分利用这种机制可以获得很好的系统可靠性。\")]),v._v(\" \"),l(\"li\",[v._v(\"Linux系统提供了丰富的进程间通信机制。在Linux下进程的执行效率与线程的执行效率基本相当。\")]),v._v(\" \"),l(\"li\",[v._v(\"在完全不需要数据同步的基于UDP协议的大数据量读取应用（流式视频播放器）下，线程更为简单、方便且高效。\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"协程\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[l(\"p\",[v._v(\"协程是什么？\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"子程序，或者称为函数，在所有语言中都是层级调用，比如A调用B，B在执行过程中又调用了C，C执行完毕返回，B执行完毕返回，最后是A执行完毕。\")]),v._v(\" \"),l(\"li\",[v._v(\"所以子程序调用是通过栈实现的，一个线程就是执行一个子程序。\")]),v._v(\" \"),l(\"li\",[v._v(\"子程序调用总是一个入口，一次返回，调用顺序是明确的。\")]),v._v(\" \"),l(\"li\",[v._v(\"而协程的调用和子程序不同。协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。\")]),v._v(\" \"),l(\"li\",[v._v(\"在一个子程序中中断，去执行其他子程序，不是函数调用，有点类似CPU的中断\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"协程的特点在于是一个线程执行，那和多线程比，协程有何优势？\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。\")]),v._v(\" \"),l(\"li\",[v._v(\"第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"因为协程是一个线程执行，那怎么利用多核CPU呢？\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。\")]),v._v(\" \"),l(\"li\",[v._v(\"Python对协程的支持还非常有限，用在generator中的yield可以一定程度上实现协程。虽然支持不完全，但已经可以发挥相当大的威力了。\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"来看例子：\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[l(\"p\",[v._v(\"传统的生产者-消费者模型是一个线程写消息，一个线程取消息，通过锁机制控制队列和等待，但一不小心就可能死锁。\")])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"如果改用协程，生产者生产消息后，直接通过yield跳转到消费者开始执行，待消费者执行完毕后，切换回生产者继续生产，效率极高：\")])]),v._v(\" \"),l(\"li\",[l(\"div\",{staticClass:\"language-{.python} extra-class\"},[l(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[l(\"code\",[v._v(\"import time\\n\\ndef consumer():\\n    r = ''\\n    while True:\\n        n = yield r\\n        if not n:\\n            return\\n        print('[CONSUMER] Consuming %s...' % n)\\n        time.sleep(1)\\n        r = '200 OK'\\n\\ndef produce(c):\\n    c.next()\\n    n = 0\\n    while n < 5:\\n        n = n + 1\\n        print('[PRODUCER] Producing %s...' % n)\\n        r = c.send(n)\\n        print('[PRODUCER] Consumer return: %s' % r)\\n    c.close()\\n\\nif __name__=='__main__':\\n    c = consumer()\\n    produce(c)\\n\")])])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"执行结果：\")]),v._v(\" \"),l(\"div\",{staticClass:\"language- extra-class\"},[l(\"pre\",[l(\"code\",[v._v(\"[PRODUCER] Producing 1...\\n[CONSUMER] Consuming 1...\\n[PRODUCER] Consumer return: 200 OK\\n[PRODUCER] Producing 2...\\n[CONSUMER] Consuming 2...\\n[PRODUCER] Consumer return: 200 OK\\n[PRODUCER] Producing 3...\\n[CONSUMER] Consuming 3...\\n[PRODUCER] Consumer return: 200 OK\\n[PRODUCER] Producing 4...\\n[CONSUMER] Consuming 4...\\n[PRODUCER] Consumer return: 200 OK\\n[PRODUCER] Producing 5...\\n[CONSUMER] Consuming 5...\\n[PRODUCER] Consumer return: 200 OK\\n\")])])]),l(\"ul\",[l(\"li\",[v._v(\"注意到consumer函数是一个generator（生成器），把一个consumer传入produce后：\")])]),v._v(\" \"),l(\"ol\",[l(\"li\",[v._v(\"首先调用c.next()启动生成器；\")]),v._v(\" \"),l(\"li\",[v._v(\"然后，一旦生产了东西，通过c.send(n)切换到consumer执行；\")]),v._v(\" \"),l(\"li\",[v._v(\"consumer通过yield拿到消息，处理，又通过yield把结果传回；\")]),v._v(\" \"),l(\"li\",[v._v(\"produce拿到consumer处理的结果，继续生产下一条消息；\")]),v._v(\" \"),l(\"li\",[v._v(\"produce决定不生产了，通过c.close()关闭consumer，整个过程结束。\")])]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v('整个流程无锁，由一个线程执行，produce和consumer协作完成任务，所以称为\"协程\"，而非线程的抢占式多任务。')]),v._v(\" \"),l(\"li\")])])])])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"内存管理\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内存管理\"}},[v._v(\"#\")]),v._v(\" 内存管理\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"mmap：把文件当作内存看待，让用户将某个文件映射到自己程序地址空间的某个部分，使用简单的内存访问指令就能对这个文件进行读写。\")]),v._v(\" \"),l(\"li\",[v._v(\"虚拟内存技术：让多任务操作系统能够将多个进程的地址空间保护起来，让它们相互隔离。\\n\"),l(\"ul\",[l(\"li\",[v._v(\"MMU：内存管理单元\")])])]),v._v(\" \"),l(\"li\",[v._v(\"分页分段算法\\n\"),l(\"ul\",[l(\"li\",[v._v(\"分页:\\n\"),l(\"ul\",[l(\"li\",[v._v('用户程序的地址空间被划分成若干固定大小的区域，称为\"页\"，相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配。')]),v._v(\" \"),l(\"li\",[v._v(\"将整个内存划分成许多大小相等的页面，每个进程的地址空间可以由多个页面构成。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"分段:\\n\"),l(\"ul\",[l(\"li\",[v._v(\"将用户程序地址空间分成若干个大小不等的段，每段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻接，也实现了离散分配。\")]),v._v(\" \"),l(\"li\",[v._v(\"将整个内存划分为大小不同的段，每个进程的地址空间处于不同的独立段中。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"段页式：\\n\"),l(\"ul\",[l(\"li\",[v._v(\"用分段方法来分配和管理虚拟存储器。程序的地址空间按逻辑单位分成基本独立的段，而每一段有自己的段名，再把每段分成固定大小的若干页。\")]),v._v(\" \"),l(\"li\",[v._v(\"用分页方法来分配和管理实存。即把整个主存分成与上述页大小相等的存储块，可装入作业的任何一页。程序对内存的调入或调出是按页进行的。但它又可按段实现共享和保护。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"x86芯片考虑到兼容性，使得页式内存管理构筑在段式内存管理之上。所以先把内存划分成一个段，在进行页式映射。\")]),v._v(\" \"),l(\"li\",[v._v(\"应用场景\\n\"),l(\"ul\",[l(\"li\",[v._v(\"进程与进程之间可以让虚拟地址相同，但是物理地址不同而达到空间上的真正分离。\")]),v._v(\" \"),l(\"li\",[v._v(\"进程自己并不能看到自己的真实物理地址，而且即便物理地址不存在，也可以通过页面交换技术让它存在，那么操作系统就可以欺骗进程拥有很多的内存可用。\")]),v._v(\" \"),l(\"li\",[v._v(\"利用页面交换技术，可以将一个文件映射到内存中，使得mmap这样的系统调用可以实现。\")]),v._v(\" \"),l(\"li\",[v._v(\"将虚拟地址转换成相同的物理地址，就可以做到数据的共享，线程就是这么干的。\")]),v._v(\" \"),l(\"li\",[v._v(\"将硬件设备的控制存储区域反映到虚拟内存上，就可以实现通过内存访问就达到控制硬件的目的。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"分页与分段的主要区别\\n\"),l(\"ul\",[l(\"li\",[v._v(\"页是信息的物理单位,分页是为了实现非连续分配,以便解决内存碎片问题,或者说分页是由于系统管理的需要.段是信息的逻辑单位,它含有一组意义相对完整的信息,分段的目的是为了更好地实现共享,满足用户的需要.\")]),v._v(\" \"),l(\"li\",[v._v(\"页的大小固定,由系统确定,将逻辑地址划分为页号和页内地址是由机器硬件实现的.而段的长度却不固定,决定于用户所编写的程序,通常由编译程序在对源程序进行编译时根据信息的性质来划分.\")]),v._v(\" \"),l(\"li\",[v._v(\"分页的作业地址空间是一维的.分段的地址空间是二维的。\")])])])])]),v._v(\" \"),l(\"li\",[v._v(\"页面置换算法\\n\"),l(\"ul\",[l(\"li\",[v._v(\"最佳置换算法OPT:不可能实现\")]),v._v(\" \"),l(\"li\",[v._v(\"先进先出FIFO\")]),v._v(\" \"),l(\"li\",[v._v(\"最近最久未使用算法LRU:最近一段时间里最久没有使用过的页面予以置换.\")]),v._v(\" \"),l(\"li\",[v._v(\"clock算法\")])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"linux与windows\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#linux与windows\"}},[v._v(\"#\")]),v._v(\" Linux与windows\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"Linux：\\n\"),l(\"ul\",[l(\"li\",[v._v(\"以进程为主，强调任务的独立性\")]),v._v(\" \"),l(\"li\",[v._v(\"线程方面的处理：NPTL原生POSIX线程库\\n\"),l(\"ul\",[l(\"li\",[v._v(\"一个线程与一个内核的调度实体一一对应\")]),v._v(\" \"),l(\"li\",[v._v(\"新的线程同步机制：futex（快速用户空间互斥体）\")])])]),v._v(\" \"),l(\"li\",[v._v(\"Linux处理进程和线程的机制就是是否开启COW\\n\"),l(\"ul\",[l(\"li\",[v._v(\"子进程先跟父进程共享内存，采用COW及术后，子进程还需要拷贝父进程的页面表。\")])])])])]),v._v(\" \"),l(\"li\",[v._v(\"Windows\\n\"),l(\"ul\",[l(\"li\",[v._v(\"以线程为主，强调任务的协同性\")])])]),v._v(\" \"),l(\"li\",[v._v(\"windows的调度实体就是线程，进程只是一堆数据结构。而Linux不是。Linux将进程和线程做了同等对待，进程和线程在内核一级没有差别，只是通过特殊的内存映射方法使得它们从用户的角度上看来有了进程和线程的差别。\")]),v._v(\" \"),l(\"li\",[v._v(\"Windows至今也没有真正的多进程概念，创建进程的开销远大于创建线程的开销。Linux则不然。Linux在内核一级并不区分进程和线程，这使得创建进程的开销和创建线程的开销差不多。\")]),v._v(\" \"),l(\"li\",[v._v(\"Windows和Linux的任务调度策略也不尽相同。Windows会随着线程越来越多而变得越来越慢，这也是为什么Windows服务器在运行一段时间后必须重启的原因。Linux可以持续运行很长时间，系统的效率也不会有什么变化。\")])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"内核态和用户态\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内核态和用户态\"}},[v._v(\"#\")]),v._v(\" 内核态和用户态\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"内核态和用户态的区别\\n\"),l(\"ul\",[l(\"li\",[v._v(\"当进程执行系统调用而陷入内核代码中执行时，我们就称进程处于内核状态。此时处理器处于特权级最高的(0级)内核代码。当进程处于内核态时，执行的内核代码会使用当前的内核栈。每个进程都有自己的内核栈。\")]),v._v(\" \"),l(\"li\",[v._v(\"当进程在执行用户自己的代码时，则称其处于用户态。即此时处理器在特权级最低的用户代码中运行。\")]),v._v(\" \"),l(\"li\",[v._v(\"当正在执行用户程序而突然中断时，此时用户程序也可以象征性地处于进程的内核态。因为中断处理程序将使用当前进程的内核态。\")]),v._v(\" \"),l(\"li\",[v._v(\"内核态与用户态是操作系统的两种运行级别，跟intel\\ncpu没有必然联系，intel\\ncpu提供Ring0-Ring3三种级别运行模式，Ring0级别最高，Ring3级别最低。Linux使用了Ring3级别运行用户态。Ring0作为内核态，没有使用Ring1和Ring2。Ring3不能访问Ring0的地址空间，包括代码和数量。Linux进程的4GB空间，3G-4G部分大家是共享的，是内核态的地址空间，这里存放在整个内核代码和所有的内核模块，以及内核所维护的数据。用户运行一程序，该程序所创建的进程开始是运行在用户态的，如果要执行文件操作，网络数据发送等操作，必须通过write，send等系统调用，这些系统会调用内核中的代码来完成操作，这时必须切换到Ring0，然后进入3GB-4GB中的内核地址空间去执行这些代码完成操作，完成后，切换Ring3，回到用户态。这样，用户态的程序就不能随意操作内核地址空间，具有一定的安全保护作用。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"用户态和内核态的转换\\n\"),l(\"ul\",[l(\"li\",[v._v(\"用户态切换到内核态的3种方式\\n\"),l(\"ul\",[l(\"li\",[v._v(\"系统调用\\n\"),l(\"ul\",[l(\"li\",[v._v(\"这是用户进程主动要求切换到内核态的一种方式，用户进程通过系统调用申请操作系统提供的服务程序完成工作。而系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现，例如Linux的ine\\n80h中断。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"异常\\n\"),l(\"ul\",[l(\"li\",[v._v(\"当CPU在执行运行在用户态的程序时，发现了某些事件不可知的异常，这是会触发由当前运行进程切换到处理此异常的内核相关程序中，也就到了内核态，比如缺页异常。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"外围设备的中断\\n\"),l(\"ul\",[l(\"li\",[v._v(\"当外围设备完成用户请求的操作之后，会向CPU发出相应的中断信号，这时CPU会暂停执行下一条将要执行的指令转而去执行中断信号的处理程序，如果先执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了有用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。\")])])])])]),v._v(\" \"),l(\"li\",[v._v(\"具体的切换操作\\n\"),l(\"ul\",[l(\"li\",[v._v(\"从出发方式看，可以在认为存在前述3种不同的类型，但是从最终实际完成由用户态到内核态的切换操作上来说，涉及的关键步骤是完全一样的，没有任何区别，都相当于执行了一个中断响应的过程，因为系统调用实际上最终是中断机制实现的，而异常和中断处理机制基本上是一样的，用户态切换到内核态的步骤主要包括：\")]),v._v(\" \"),l(\"li\",[v._v(\"（1）从当前进程的描述符中提取其内核栈的ss0及esp0信息。\")]),v._v(\" \"),l(\"li\",[v._v(\"（2）使用ss0和esp0指向的内核栈将当前进程的cs,eip，eflags，ss,esp信息保存起来，这个过程也完成了由用户栈找到内核栈的切换过程，同时保存了被暂停执行的程序的下一条指令。\")]),v._v(\" \"),l(\"li\",[v._v(\"（3）将先前由中断向量检索得到的中断处理程序的cs，eip信息装入相应的寄存器，开始执行中断处理程序，这时就转到了内核态的程序执行了。\")])])])])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"进程间通信\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#进程间通信\"}},[v._v(\"#\")]),v._v(\" 进程间通信\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"管道：用于具有亲缘关系进程间的通信\\n\"),l(\"ul\",[l(\"li\",[v._v(\"由pipe函数创建，调用pipe函数时在内核中开辟一块缓冲区用于通信，它有一个读端一个写端，然后通过filedes参数传出给用户程序两个文件描述符，filedes[0]指向管道的读端，filedes[1]指向管道的写端。\")]),v._v(\" \"),l(\"li\",[v._v(\"所以管道在用户程序看来就像一个打开的文件，通过read(filedes[0])或者write(filedes[1])；向这个文件读写数据其实是在读写内核缓冲区。\")]),v._v(\" \"),l(\"li\",[v._v(\"管道的读写端通过打开的文件描述符来传递，因此要通信的两个进程必须从它们的公共祖先那里继承管道文件描述符。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"FIFO和Unix Domain Socket\\n\"),l(\"ul\",[l(\"li\",[v._v(\"利用文件系统中的特殊文件来标识内核提供的通道\")]),v._v(\" \"),l(\"li\",[v._v(\"FIFO和Unix Domain\\nSocket文件在磁盘上没有数据块，仅用来标识内核中的一条通道，各进程可以打开这个文件进行read和write，实际上实在读写内核通道，这样就实现了进程间通信。\")]),v._v(\" \"),l(\"li\",[v._v(\"FIFO又名有名管道，每个FIFO有一个路径名与之关联，从而允许无亲缘关系的进程访问同一个FIFO。半双工。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"fork和wait\\n\"),l(\"ul\",[l(\"li\",[v._v(\"父进程通过fork可以将打开的文件描述符传递给子进程\")]),v._v(\" \"),l(\"li\",[v._v(\"子进程结束时，父进程调用wait可以得到子进程的终止信息\")])])]),v._v(\" \"),l(\"li\",[v._v(\"信号\\n\"),l(\"ul\",[l(\"li\",[v._v(\"信号又称软中断，通知程序发生异步事件，程序执行中随时被各种信号中断，进程可以忽略该信号，也可以中断当前程序转而去处理信号，\")])])]),v._v(\" \"),l(\"li\",[v._v(\"信号量\\n\"),l(\"ul\",[l(\"li\",[v._v(\"分为命名和匿名信号量。命名信号量通常用于不共享内存的进程之间（内核实现）；匿名信号量可以用于线程通信（存放于线程共享的内存，如全局变量），或者用于进程间通信（存放于进程共享的内存，如System\\nV/ Posix 共享内存）。\")]),v._v(\" \"),l(\"li\",[v._v(\"信号量的使用主要是用来保护共享资源，使得资源在一个时刻只有一个进程（线程）所拥有。\\n信号量的值为正的时候，说明它空闲。所测试的线程可以锁定而使用它。若为0，说明它被占用，测试的线程要进入睡眠队列中，等待被唤醒。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"消息队列\\n\"),l(\"ul\",[l(\"li\",[v._v(\"Linux\\n中的消息可以被描述成在内核地址空间的一个内部链表，每一个消息队列由一个IPC\\n的标识号唯一地标识。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"共享文件\\n\"),l(\"ul\",[l(\"li\",[v._v(\"几个进程可以在文件系统中读写某个共享文件，也可以通过给文件加锁来实现进程间同步\")])])]),v._v(\" \"),l(\"li\",[v._v(\"共享内存：通过mmap函数实现，几个进程可以映射同一内存区\")]),v._v(\" \"),l(\"li\",[v._v(\"现在两个进程间通信，数据量很大，要求延时很小，你会使用哪种形式？为什么？共享内存使用的时候需要注意什么\")])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"死锁\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#死锁\"}},[v._v(\"#\")]),v._v(\" 死锁\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[l(\"p\",[v._v(\"概念：指多个进程因竞争共享资源而造成的一种僵局，若无外力作用，这些进程都将永远不能再向前推进。\")])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"原因:\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"竞争资源\\\\\")]),v._v(\" \"),l(\"li\",[v._v(\"程序推进顺序不当\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"必要条件:\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"互斥条件：进程要求对所分配的资源进行排它性控制，即在一段时间内某资源仅为一进程所占用。\")]),v._v(\" \"),l(\"li\",[v._v(\"请求和保持条件：当进程因请求资源而阻塞时，对已获得的资源保持不放。\")]),v._v(\" \"),l(\"li\",[v._v(\"不剥夺条件：进程已获得的资源在未使用完之前，不能剥夺，只能在使用完时由自己释放。\")]),v._v(\" \"),l(\"li\",[v._v(\"环路等待条件：在发生死锁时，必然存在一个进程--资源的环形链。\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"处理死锁基本方法:\")]),v._v(\" \"),l(\"ol\",[l(\"li\",[l(\"p\",[v._v(\"预防死锁(摒弃除1以外的条件)\")]),v._v(\" \"),l(\"ol\",[l(\"li\",[v._v(\"资源一次性分配：（破坏请求和保持条件）\")]),v._v(\" \"),l(\"li\",[v._v(\"可剥夺资源：即当某进程新的资源未满足时，释放已占有的资源（破坏不可剥夺条件）\")]),v._v(\" \"),l(\"li\",[v._v(\"资源有序分配法：系统给每类资源赋予一个编号，每一个进程按编号递增的顺序请求资源，释放则相反（破坏环路等待条件）\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"避免死锁(银行家算法)\")]),v._v(\" \"),l(\"ol\",[l(\"li\",[v._v(\"预防死锁的几种策略，会严重地损害系统性能。因此在避免死锁时，要施加较弱的限制，从而获得\\n较满意的系统性能。由于在避免死锁的策略中，允许进程动态地申请资源。因而，系统在进行资源分配之前预先计算资源分配的安全性。若此次分配不会导致系统进入不安全状态，则将资源分配给进程；否则，进程等待。其中最具有代表性的避免死锁算法是银行家算法。\")])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"检测死锁(资源分配图)\")]),v._v(\" \"),l(\"ol\",[l(\"li\",[l(\"p\",[v._v(\"首先为每个进程和每个资源指定一个唯一的号码；\")]),v._v(\" \"),l(\"p\",[v._v(\"然后建立资源分配表和进程等待表\")])])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"解除死锁\")]),v._v(\" \"),l(\"ol\",[l(\"li\",[v._v(\"剥夺资源：从其它进程剥夺足够数量的资源给死锁进程，以解除死锁状态；\")]),v._v(\" \"),l(\"li\",[v._v(\"撤销进程：可以直接撤消死锁进程或撤消代价最小的进程，直至有足够的资源可用，死锁状态.消除为止；所谓代价是指优先级、运行代价、进程的重要性和价值等。\")])])])])]),v._v(\" \"),l(\"li\",[l(\"p\",[v._v(\"如何制造死锁\")])])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"变量存储区域\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#变量存储区域\"}},[v._v(\"#\")]),v._v(\" 变量存储区域\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"栈：\\n\"),l(\"ul\",[l(\"li\",[v._v(\"由编译器在需要的时候分配，在不需要的时候自动清楚的变量的存储区。\")]),v._v(\" \"),l(\"li\",[v._v(\"地址是不固定的。\")]),v._v(\" \"),l(\"li\",[v._v(\"存储的变量通常是局部变量、函数参数等。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"堆：\\n\"),l(\"ul\",[l(\"li\",[v._v(\"由new分配的内存块，它们的释放编译器不去管，而是由应用程序去控制，一般一个new就要对应一个delete。\")]),v._v(\" \"),l(\"li\",[v._v(\"如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"自由存储区：\\n\"),l(\"ul\",[l(\"li\",[v._v(\"由malloc等分配的内存块，和堆是十分类似，不过它是用free来结束自己的生命的。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"全局存储区（静态存储区）：\\n\"),l(\"ul\",[l(\"li\",[v._v(\"全局变量和静态变量的存储是放在一块的。\")]),v._v(\" \"),l(\"li\",[v._v(\"初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。\")]),v._v(\" \"),l(\"li\",[v._v(\"程序结束后由系统释放。\")])])]),v._v(\" \"),l(\"li\",[v._v(\"常量存储区：\\n\"),l(\"ul\",[l(\"li\",[v._v(\"这是一块比较特殊的存储区，位置是固定的。\")]),v._v(\" \"),l(\"li\",[v._v(\"这里面存放的是常量，不允许修改。\")])])])])])}),[],!1,null,null,null);_.default=t.exports}}]);","extractedComments":[]}