{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{667:function(t,e,l){\"use strict\";l.r(e);var a=l(6),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[l(\"h3\",{attrs:{id:\"_111-二叉树的最小深度\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_111-二叉树的最小深度\"}},[t._v(\"#\")]),t._v(\" \"),l(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"111. 二叉树的最小深度\"),l(\"OutboundLink\")],1)]),t._v(\" \"),l(\"blockquote\",[l(\"p\",[t._v(\"给定一个二叉树，找出其最小深度。\")]),t._v(\" \"),l(\"p\",[t._v(\"最小深度是从根节点到最近叶子节点的最短路径上的节点数量。\")]),t._v(\" \"),l(\"p\",[t._v(\"说明：叶子节点是指没有子节点的节点。\")]),t._v(\" \"),l(\"p\",[t._v(\"示例 1：\")]),t._v(\" \"),l(\"p\",[l(\"img\",{attrs:{src:\"https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg\",alt:\"img\"}})]),t._v(\" \"),l(\"div\",{staticClass:\"language- extra-class\"},[l(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[l(\"code\",[t._v(\"输入：root = [3,9,20,null,null,15,7]\\n输出：2\\n\")])])]),l(\"p\",[t._v(\"示例 2：\")]),t._v(\" \"),l(\"div\",{staticClass:\"language- extra-class\"},[l(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[l(\"code\",[t._v(\"输入：root = [2,null,3,null,4,null,5,null,6]\\n输出：5\\n\")])])])]),t._v(\" \"),l(\"p\",[t._v(\"深度优先搜索的方法，遍历整棵树，记录最小深度\")]),t._v(\" \"),l(\"p\",[t._v(\"递归结束条件\")]),t._v(\" \"),l(\"ul\",[l(\"li\",[t._v(\"叶子节点的定义是左孩子和右孩子都为 null 时叫做叶子节点\")]),t._v(\" \"),l(\"li\",[t._v(\"当 root 节点左右孩子都为空时，返回 1\")]),t._v(\" \"),l(\"li\",[t._v(\"当 root 节点左右孩子有一个为空时，返回不为空的孩子节点的深度\")]),t._v(\" \"),l(\"li\",[t._v(\"当 root 节点左右孩子都不为空时，返回左右孩子较小深度的节点值\")])])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}