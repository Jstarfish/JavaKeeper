{"remainingRequest":"/Users/starfish/oceanus/JavaKeeper/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/starfish/oceanus/JavaKeeper/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/starfish/oceanus/JavaKeeper/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/starfish/oceanus/JavaKeeper/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/starfish/oceanus/JavaKeeper/docs/distribution/message-queue/Kafka/Consumer Group Protocol.md?vue&type=template&id=60b0923c&","dependencies":[{"path":"/Users/starfish/oceanus/JavaKeeper/docs/distribution/message-queue/Kafka/Consumer Group Protocol.md","mtime":1718357641586},{"path":"/Users/starfish/oceanus/JavaKeeper/node_modules/cache-loader/dist/cjs.js","mtime":1608440633000},{"path":"/Users/starfish/oceanus/JavaKeeper/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1608440637000},{"path":"/Users/starfish/oceanus/JavaKeeper/node_modules/cache-loader/dist/cjs.js","mtime":1608440633000},{"path":"/Users/starfish/oceanus/JavaKeeper/node_modules/vue-loader/lib/index.js","mtime":1608440637000},{"path":"/Users/starfish/oceanus/JavaKeeper/node_modules/@vuepress/markdown-loader/index.js","mtime":1616294268000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}